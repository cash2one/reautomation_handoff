import logging
logger = logging.getLogger('athenataf')
import time
from athenataf.lib.functionality.test.AthenaGUITestCase import AthenaGUITestCase
from athenataf.lib.functionality.common import DeviceLibrary
from athenataf.lib.functionality.test.GroupConfigurationTest import GroupConfigurationTest
from athenataf.config import devices

class NonDefaultValueCheck(GroupConfigurationTest):
	'''
	Test class for NonDefaultValueCheck.
	'''
	def _create_network(self , network_page):
		time.sleep(10)
		network_page.delete_network_if_present()
		network_page.delete_wired_network_if_present()
		basic_info = network_page.create_new_network()
		vlan_page = basic_info.employee_network_info()
		security_page = vlan_page.use_vlan_defaults()
		access_page = security_page.set_default_settings()
		access_page.click_role_radio_and_click_finish_button()
		
		basic_info = network_page.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info()
		security = vlan_obj.wired_vlan_defaults()
		security.wired_employee_security_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.finish_network_setup()	
		
	def test_ath_11748_group_configuration(self):
		conf = self.config.config_vars
		inner_left_panel = self.TopPanel.click_slider_icon()
		self.take_s1_snapshot()
		if inner_left_panel.assert_group():
			if inner_left_panel.assert_sample_group_with_vc_present():
				manage_group_page = inner_left_panel.manage_group()
				manage_group_page.move_virtual_controller()
				inner_left_panel.select_default_group()
				inner_left_panel = self.TopPanel.click_slider_icon()
				inner_left_panel.manage_group()
				manage_group_page.delete_empty_group()
			elif inner_left_panel.assert_sample_group_without_vc_present():
				inner_left_panel.select_default_group()
				inner_left_panel = self.TopPanel.click_slider_icon()
				manage_group_page = inner_left_panel.manage_group()
				manage_group_page.delete_empty_group()
		create_group_page = inner_left_panel.add_group()
		create_group_page.create_empty_group()
		inner_left_panel.select_samplegroup()
		network_page = self.LeftPanel.go_to_network_page()
		self._create_network(network_page)
		inner_left_panel.click_all_groups_label()
		inner_left_panel = self.TopPanel.click_slider_icon()
		manage_group_page = inner_left_panel.manage_group()
		manage_group_page.move_virtual_controller_from_default_to_samplegroup()
		inner_left_panel.select_samplegroup()
		time.sleep(300)
		DeviceLibrary.reconnect("IAP_1")
		network_page = self.LeftPanel.go_to_network_page()
		network_page.delete_specific_network_if_present(conf.network_name1)
		network_page.delete_specific_network_if_present(conf.network_name2)
		basic_info = network_page.create_new_network()
		vlan_obj = basic_info.create_new_network(basic_info.wireless,conf.network_name1,basic_info.employee)
		security = vlan_obj.use_vlan_defaults()
		access = security.set_default_settings()
		access.finish_network_setup()
		basic_info = network_page.create_new_network()
		vlan_obj = basic_info.create_new_network(basic_info.wireless,conf.network_name2,basic_info.voice)
		security = vlan_obj.use_vlan_defaults()
		access = security.set_default_settings()
		access.finish_network_setup()
		self.take_s2_snapshot()
		network_page.delete_network_if_present()
		network_page.delete_wired_network_if_present()
		network_page.delete_specific_network_if_present(conf.network_name1)
		network_page.delete_specific_network_if_present(conf.network_name2)
		inner_left_panel.click_all_groups_label()
		inner_left_panel = self.TopPanel.click_slider_icon()
		manage_group_page = inner_left_panel.manage_group()
		manage_group_page.move_virtual_controller()
		# manage_group_page = inner_left_panel.manage_group()
		# manage_group_page.delete_empty_group1()
		manage_group_page = inner_left_panel.manage_group()
		manage_group_page.delete_empty_group()
		time.sleep(300)
		DeviceLibrary.reconnect("IAP_1")
		self.browser.refresh()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()	
		
	def test_ath_11521_create_group(self):
		conf=self.config.config_vars
		inner_left_panel = self.TopPanel.click_slider_icon()
		if inner_left_panel.assert_mygroup():
			if inner_left_panel.assert_mygroup_with_vc_present():
				manage_group_page = inner_left_panel.manage_group()
				manage_group_page.move_virtual_controller5()
				inner_left_panel.select_default_group()
				inner_left_panel = self.TopPanel.click_slider_icon()
				inner_left_panel.manage_group()
				manage_group_page.delete_empty_mygroup()
			elif inner_left_panel.assert_mygroup_without_vc_present():
				inner_left_panel.select_default_group()
				inner_left_panel = self.TopPanel.click_slider_icon()
				manage_group_page = inner_left_panel.manage_group()
				manage_group_page.delete_empty_mygroup()
		if	inner_left_panel.assert_mynew_group():
			manage_group_page = inner_left_panel.manage_group()
			manage_group_page.delete_empty_mynew_group()
		create_group_page = inner_left_panel.add_group()
		create_group_page.create_multiple_empty_groups(conf.mynew)
		create_group_page = inner_left_panel.add_group()
		create_group_page.create_group_with_vc(conf.Mygroup)
		time.sleep(300)
		DeviceLibrary.reconnect("IAP_1")
		create_group_page = inner_left_panel.add_group()
		create_group_page.manage_groups_button.click()
		create_group_page.assert_mygroup_and_mynew()
		create_group_page.manage_group_close.click()
		manage_group_page = inner_left_panel.manage_group()
		manage_group_page.move_virtual_controller5()
		manage_group_page = inner_left_panel.manage_group()
		manage_group_page.delete_empty_mygroup()
		manage_group_page.delete_empty_mynew_group()
		time.sleep(300)
		DeviceLibrary.reconnect("IAP_1")
		
	def test_ath_11523_delete_group(self):
		conf=self.config.config_vars
		inner_left_panel = self.TopPanel.click_slider_icon()
		if inner_left_panel.assert_mygroup():
			if inner_left_panel.assert_mygroup_with_vc_present():
				manage_group_page = inner_left_panel.manage_group()
				manage_group_page.move_virtual_controller5()
				inner_left_panel.select_default_group()
				inner_left_panel = self.TopPanel.click_slider_icon()
				inner_left_panel.manage_group()
				manage_group_page.delete_empty_mygroup()
			elif inner_left_panel.assert_mygroup_without_vc_present():
				inner_left_panel.select_default_group()
				inner_left_panel = self.TopPanel.click_slider_icon()
				manage_group_page = inner_left_panel.manage_group()
				manage_group_page.delete_empty_mygroup()
		if	inner_left_panel.assert_mynew_group():
			manage_group_page = inner_left_panel.manage_group()
			manage_group_page.delete_empty_mynew_group()
			manage_group_page.click_manage_group_close_button()
		create_group_page = inner_left_panel.add_group()
		create_group_page.create_multiple_empty_groups(conf.mynew)
		create_group_page = inner_left_panel.add_group()
		create_group_page.create_group_with_vc(conf.Mygroup)
		time.sleep(300)
		DeviceLibrary.reconnect("IAP_1")
		manage_group_page = inner_left_panel.manage_group()
		manage_group_page.delete_empty_mynew_group()
		manage_group_page.delete_empty_mygroup()
		manage_group_page.assert_group_has_swarm()
		manage_group_page = inner_left_panel.manage_group()
		manage_group_page.move_virtual_controller5()
		manage_group_page = inner_left_panel.manage_group()
		manage_group_page.delete_empty_mygroup()
		time.sleep(300)
		DeviceLibrary.reconnect("IAP_1")
		
	def test_ath_11525_move_vcs_between_groups(self):
		conf=self.config.config_vars
		self.TopPanel.go_to_allgroups()
		inner_left_panel = self.TopPanel.click_slider_icon()
		inner_left_panel.delete_multiple_groups()
		inner_left_panel = self.TopPanel.click_slider_icon()
		if	inner_left_panel.assert_mygroup_without_vc_present():
			inner_left_panel.select_default_group()
			inner_left_panel = self.TopPanel.click_slider_icon()
			manage_group_page = inner_left_panel.manage_group()
			manage_group_page.delete_group1()
		if inner_left_panel.assert_mygroup_with_vc_present():
			manage_group_page = inner_left_panel.manage_group()
			manage_group_page.move_virtual_controller_group1()
			inner_left_panel.select_default_group()
			inner_left_panel = self.TopPanel.click_slider_icon()
			manage_group_page = inner_left_panel.manage_group()
			manage_group_page.delete_group1()
		create_group = inner_left_panel.add_group()
		create_group.set_group_name(conf.group_1)
		create_group.select_virtual_controller(create_group.select_vc)
		create_group.move_next()
		create_group._set_group_default_device_password1()
		inner_left_panel.select_group(inner_left_panel.group_1)
		time.sleep(300)
		DeviceLibrary.reconnect("IAP_1")
		self._create_employee_network()		
		inner_left_panel = self.TopPanel.click_slider_icon()
		create_group = inner_left_panel.add_group()
		create_group.set_group_name(conf.group_2)
		create_group.select_virtual_controller(create_group.select_vc)
		create_group.move_next()
		create_group._set_group_default_device_password1()
		inner_left_panel.select_group(inner_left_panel.group_two)
		time.sleep(300)
		DeviceLibrary.reconnect("IAP_1")
		self._create_employee_network()		
		inner_left_panel = self.TopPanel.click_slider_icon()
		create_group = inner_left_panel.add_group()
		create_group.set_group_name(conf.group_three)
		create_group.move_next()
		create_group._set_group_default_device_password1()
		inner_left_panel.select_group(inner_left_panel.group_three)
		self._create_guest_network()
		inner_left_panel = self.TopPanel.click_slider_icon()
		create_group = inner_left_panel.add_group()
		create_group.set_group_name(conf.group_four)
		create_group.move_next()
		create_group._set_group_default_device_password1()
		inner_left_panel.select_group(inner_left_panel.group_four)
		self._create_guest_network()
		inner_left_panel = self.TopPanel.click_slider_icon()
		create_group = inner_left_panel.add_group()
		create_group.set_group_name(conf.group_five)
		create_group.move_next()
		create_group._set_group_default_device_password1()
		inner_left_panel.select_group(inner_left_panel.group_five)
		self._create_voice_network()
		# inner_left_panel = self.TopPanel.click_slider_icon()
		# create_group = inner_left_panel.add_group()
		# create_group.set_group_name(conf.group_six)
		# create_group.move_next()
		# create_group._set_group_default_device_password1()
		# inner_left_panel.select_group(inner_left_panel.group_six)
		# self._create_voice_network()
		# inner_left_panel = self.TopPanel.click_slider_icon()
		# create_group = inner_left_panel.add_group()
		# create_group.set_group_name(conf.group_seven)
		# create_group.move_next()
		# create_group._set_group_default_device_password1()
		# inner_left_panel.select_group(inner_left_panel.group_seven)
		# self._create_voice_network()
		# inner_left_panel = self.TopPanel.click_slider_icon()
		# create_group = inner_left_panel.add_group()
		# create_group.set_group_name(conf.group_eight)
		# create_group.move_next()
		# create_group._set_group_default_device_password1()
		# inner_left_panel.select_group(inner_left_panel.group_eight)
		# self._create_voice_network()
		# inner_left_panel = self.TopPanel.click_slider_icon()
		# create_group = inner_left_panel.add_group()
		# create_group.set_group_name(conf.group_nine)
		# create_group.move_next()
		# create_group._set_group_default_device_password1()
		# inner_left_panel.select_group(inner_left_panel.group_nine)
		# self._create_voice_network()
		# inner_left_panel = self.TopPanel.click_slider_icon()
		# create_group = inner_left_panel.add_group()
		# create_group.set_group_name(conf.group_ten)
		# create_group.move_next()
		# create_group._set_group_default_device_password1()
		# inner_left_panel.select_group(inner_left_panel.group_ten)
		# self._create_voice_network()
		inner_left_panel = self.TopPanel.click_slider_icon()
		manage_group_page = inner_left_panel.manage_group()
		manage_group_page.move_virtual_controller6()
		inner_left_panel.select_default_group()
		inner_left_panel = self.TopPanel.click_slider_icon()
		inner_left_panel.delete_multiple_groups()
		time.sleep(300)
		DeviceLibrary.reconnect("IAP_1")
		
	def _create_employee_network(self):
		network_page = self.LeftPanel.go_to_network_page()
		basic_info = network_page.create_new_network()
		vlan = basic_info.employee_network_info()
		security = vlan.use_vlan_defaults()
		access = security.set_default_settings()
		access.finish_network_setup()

	def _create_voice_network(self):
		network_page = self.LeftPanel.go_to_network_page()
		basic_info = network_page.create_new_network()
		vlan = basic_info.voice_network_info()
		security  = vlan.use_vlan_defaults()		
		security.enable_mac_authentication()
		access_page = security.click_on_next()
		access_page.finish_network_setup()		

	def _create_guest_network(self):	
		network_page = self.LeftPanel.go_to_network_page()
		basic_info = network_page.create_new_network()
		vlan = basic_info.guest_network_info()
		security  = vlan.use_vlan_defaults()
		access_page = security.click_on_next()
		access_page.finish_network_setup()

	def test_ath_13755_attach_factory_reset_iap_to_athena(self):
		DeviceLibrary.factoryReset("IAP_1")
		time.sleep(100)
		DeviceLibrary.reconnect("IAP_1")
		time.sleep(300)
		inner_left_panel = self.TopPanel.click_slider_icon()
		inner_left_panel.select_default_group()
		mac = devices.IAP_1.mac_address
		access = self.LeftPanel.go_to_monitoring_access_points()
		time.sleep(20)
		access.verify_device_mac_address(mac)
		
		