import logging
logger = logging.getLogger('athenataf')

from athenataf.lib.functionality.test.AthenaGUITestCase import AthenaGUITestCase

class EditTestScenarios(AthenaGUITestCase):
	'''
	Test class for EditTestScenarios.
	'''
	def test_ath_11530_move_vcs(self):
		inner_left_panel = self.TopPanel.click_slider_icon()
		manage_group_page = inner_left_panel.manage_group()
		manage_group_page.click_move_button()
		manage_group_page.assert_move_group_wihtout_selecting_vc()
		manage_group_page.click_alert_ok_button()
		manage_group_page.click_manage_group_close_button()

	def test_ath_11750_modify_the_created_network(self):
		inner_left_panel = self.TopPanel.click_slider_icon()
		group_page=inner_left_panel.add_group()
		group_page.create_group()
		inner_left_panel.select_sample_group()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = network_page.create_new_network()
		basic_info.employee_network_info_with_advanced_settings()
		basic_info.set_inactivity_timeout_value(self.config.config_vars.valid_inactivity_timeout)
		vlan = basic_info.click_on_next()
		security_page = vlan.select_virtual_controller()
		security_page.security_level_enterprise()
		security_page.configure_80211r_romaing()
		access = security_page.click_on_next()
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.basic_info_accordion()
		edit_network_page.select_group_user()
		edit_network_page.setting_splash_page_type_internal_acknowledge(self.config.config_vars.internal_acknowledge)
		edit_network_page.click_vc_assigned()
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.asserting_modified_created_network()
		self.take_s2_snapshot()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.TopPanel.click_slider_icon()
		manage_group_page = inner_left_panel.manage_group()
		manage_group_page.move_virtual_controller()
		inner_left_panel.manage_group()	
		manage_group_page.delete_empty_group()
		self.clear()

	def test_ath_11749_delete_configuration(self):
		conf=self.config.config_vars
		inner_left_panel = self.TopPanel.click_slider_icon()
		if  inner_left_panel.assert_mygroup_without_vc_present():
			manage_group_page = inner_left_panel.manage_group()
			manage_group_page.delete_group1()
		if inner_left_panel.assert_mygroup_with_vc_present():
			manage_group_page = inner_left_panel.manage_group()
			manage_group_page.move_virtual_controller_group1()
			manage_group_page = inner_left_panel.manage_group()
			manage_group_page.delete_group1()
		self.take_s1_snapshot()			
		create_group_page = inner_left_panel.add_group()
		create_group_page.create_empty_group1('group1')
		inner_left_panel.select_group(inner_left_panel.group_1)
		network_page = self.LeftPanel.go_to_network_page()
		network_page.delete_specific_network_if_present(conf.network_name1)
		network_page.delete_specific_network_if_present(conf.network_name2)
		network_page.delete_specific_network_if_present(conf.network_name3)		
		basic_info = network_page.create_new_network()
		vlan_obj = basic_info.create_new_network(basic_info.wireless,conf.network_name1,basic_info.employee)
		security = vlan_obj.use_vlan_defaults()
		access = security.set_default_settings()
		access.finish_network_setup()
		basic_info = network_page.create_new_network()
		vlan_obj = basic_info.create_new_network(basic_info.wireless,conf.network_name2,basic_info.voice)
		security = vlan_obj.use_vlan_defaults()
		access = security.set_default_settings()
		access.finish_network_setup()
		basic_info = network_page.create_new_network()
		vlan_obj = basic_info.create_new_network(basic_info.wireless,conf.network_name3,basic_info.wired_network_guest)
		security = vlan_obj.click_on_next()
		access = security.use_security_default()
		access.finish_network_setup()
		inner_left_panel = self.TopPanel.click_slider_icon()
		manage_group_page = inner_left_panel.manage_group()
		manage_group_page.move_virtual_controller_between_two_groups(manage_group_page.move_from_default,manage_group_page.move_to_group1)
		inner_left_panel.select_group(inner_left_panel.group_1)
		network_page = self.LeftPanel.go_to_network_page()
		network_page.delete_specific_network_if_present(conf.network_name1)
		network_page.delete_specific_network_if_present(conf.network_name2)
		network_page.delete_specific_network_if_present(conf.network_name3)
		basic_info = network_page.create_new_network()
		vlan_obj = basic_info.create_new_network(basic_info.wireless,conf.network_name1,basic_info.employee)
		security = vlan_obj.use_vlan_defaults()
		access = security.set_default_settings()
		access.finish_network_setup()
		basic_info = network_page.create_new_network()
		vlan_obj = basic_info.create_new_network(basic_info.wireless,conf.network_name2,basic_info.voice)
		security = vlan_obj.use_vlan_defaults()
		access = security.set_default_settings()
		access.finish_network_setup()
		basic_info = network_page.create_new_network()
		vlan_obj = basic_info.create_new_network(basic_info.wireless,conf.network_name3,basic_info.wired_network_guest)
		security = vlan_obj.click_on_next()
		access = security.use_security_default()
		access.finish_network_setup()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()		
		network_page.delete_specific_network_if_present(conf.network_name1)
		network_page.delete_specific_network_if_present(conf.network_name2)
		network_page.delete_specific_network_if_present(conf.network_name3)
		self.TopPanel.go_to_allgroups()
		inner_left_panel = self.TopPanel.click_slider_icon()
		if  inner_left_panel.assert_mygroup_without_vc_present():
			manage_group_page = inner_left_panel.manage_group()
			manage_group_page.delete_group1()
		if inner_left_panel.assert_mygroup_with_vc_present():
			manage_group_page = inner_left_panel.manage_group()
			manage_group_page.move_virtual_controller_group1()
			manage_group_page = inner_left_panel.manage_group()
			manage_group_page.delete_group1()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
