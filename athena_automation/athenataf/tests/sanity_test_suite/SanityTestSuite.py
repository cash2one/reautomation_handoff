import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.SanityTestSuiteTest import SanityTestSuiteTest

class SanityTestSuite(SanityTestSuiteTest):
	'''
	Test class for SanityTestSuite.
	'''

	def _delete_network_auth_server(self):
		'''
		Delete wireless and auth servers 
		'''
		self.NetworkPage.delete_wired_network_if_present()
		security_page = self.LeftPanel.go_to_security() 
		security_page.delete_authentication_server()
		security_page.delete_authentication_server2()
		self.LeftPanel.go_to_network_page()

	def test_ath_9677_allow_custom_udp_to_domain_name(self):
		conf = self.config.config_vars
		self.take_s1_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		network_page.delete_network_if_present()
		basic_info = network_page.create_new_network()
		vlan_page = basic_info.employee_network_info()
		security_page = vlan_page.use_vlan_defaults()
		access = security_page.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_allow_custom_udp_to_a_domain_name_rule()
		access.finish_network_setup()    
		self.LeftPanel.assert_delta_config_icon()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page._click_access_accordion()
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9678_source_nat_custom_udp_except_to_network(self):
		conf = self.config.config_vars
		network_page = self.LeftPanel.go_to_network_page()
		network_page.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = network_page.create_new_network()
		vlan_page = basic_info.employee_network_info()
		security_page = vlan_page.use_vlan_defaults()
		access = security_page.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()    
		access.create_source_nat_custom_udp_except_to_network()
		access.finish_network_setup()    
		self.LeftPanel.assert_delta_config_icon()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page._click_access_accordion()
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_9657_create_employee_wired_network(self):
	
		self.NetworkPage.delete_wired_network_if_present()
		self.NetworkPage.delete_specific_wired_network_if_present('network1')
		self.NetworkPage.delete_specific_wired_network_if_present('network2')
		self.NetworkPage.delete_specific_wired_network_if_present('network3')
		self.NetworkPage.delete_specific_wired_network_if_present('network4')
		self._delete_network_auth_server()
		
		self.take_s1_snapshot()
	
		# ATH-1935
		
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.set_wired_basic_nondefault()
		security = vlan_obj.wired_vlan_defaults()
		security.wired_employee_security_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.finish_network_setup()
		
		# ATH-9211
		
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info_with_specific_name('network1')
		vlan_obj.validate_static_vlan_id('3333')
		vlan_obj.validate_static_vlan_id('over_max_length')
		security = vlan_obj.validate_static_vlan_id('100-200')
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.finish_network_setup()    
		
		# ATH-1938
		
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info_with_specific_name('network2')
		security = vlan_obj.wired_vlan_defaults()
		security.configure_auth_server_settings(mac_authentication = True)
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(balancing = True)
		security.set_auth_interval_time('10')
		access = security.click_on_next()
		network_assign = access.click_next()
		network_assign.finish_network_setup()
		
		# ATH-1939
		
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info_with_specific_name('network3')
		security = vlan_obj.wired_vlan_defaults()
		security.wired_employee_security_defaults()
		access = security.wired_security_defaults()
		access.click_network_access()
		access.access_rule_type_1()
		#access.access_rule_type_2()
		#access.access_rule_type_3()
		#access.access_rule_type_4()
		#access.rule_type_calea()
		network_assign = access.click_next()
		network_assign.finish_network_setup()

		#ATH-1941
		
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info_with_specific_name('network4')
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.finish_network_setup()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info_2()
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.click_back()
		access.use_access_defaults()
		network_assign.set_new_network_port('network4')
		network_assign.finish_network_setup()
		self.NetworkPage.delete_wired2_network_if_present()
		edit_wired_network = self.NetworkPage.edit_new_wired_network_4()
		edit_wired_network.edit_net_assign_default()

		
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self.NetworkPage.delete_specific_wired_network_if_present('network1')
		self.NetworkPage.delete_specific_wired_network_if_present('network2')
		self.NetworkPage.delete_specific_wired_network_if_present('network3')
		self.NetworkPage.delete_specific_wired_network_if_present('network4')
		self._delete_network_auth_server()
		
		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()	


	def test_ath_9681_create_a_new_role(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.guest_network_info()
		security  = vlan.use_vlan_defaults()
		access = security.click_on_next()
		access.create_role_assignment_rule()
		access.create_role()
		access.finish_network_setup()
		self.take_s2_snapshot()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_new_role()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9680_create_a_vlan_assignment_rule(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.guest_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.use_security_default()
		access.create_vlan_rule()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

		
	def test_ath_9679_create_external_captive_portal(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()		
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()
		security.enable_mac_authentication()
		access_page = security.click_on_next()
		access_page.network_based.click()
		access_page.create_captive_portal(external=True)
		access_page.save_settings.click()
		access_page.finish_network_setup()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.access_accordion.click()
		edit_network.assert_captive_portal()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9662_rf_module_test(self): 
		self.take_s1_snapshot()
		rf_page = self.LeftPanel.go_to_rf_page()
		rf_page.change_config()
		rf_page.assert_beacon_error_msg()
		rf_page.set_2ghz_band_field()
		rf_page.set_5ghz_band_field()
		self.take_s2_snapshot()
		rf_page.open_arm_accordion()
		rf_page.set_config_to_default()
		rf_page.open_radio_accordion()
		rf_page.set_2ghz_band_values_to_default()
		rf_page.set_5ghz_band_values_to_default()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9663_wireless_ids_ips_test(self):
		self.take_s1_snapshot()
		wids_page = self.LeftPanel.go_to_wids_page()
		wids_page.set_detection_infra_threat_detection_level('High')
		wids_page.set_detection_clients_threat_detection_level('High')
		wids_page.save_settings
		wids_page.set_infra_client_high()
		wids_page.set_wireless_containment()
		wids_page.set_wired_containment()
		self.take_s2_snapshot()
		wids_page.detection_accordion.click()
		wids_page.set_detection_infra_threat_detection_level('Off')
		wids_page.set_detection_clients_threat_detection_level('Off')
		wids_page.save_settings
		wids_page.set_infra_client_default()
		wids_page.set_wireless_containment_default()
		wids_page.set_wired_containment_default()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(1)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9665_vpn_test(self):
		self.take_s1_snapshot()
		vpn_obj = self.LeftPanel.go_to_vpn()
		vpn_obj.routing.click()
		vpn_obj.controller.click()
		vpn_obj.protocol.set(self.config.config_vars.vpn_def_protocol)
		protocol_default = vpn_obj.protocol.get_selected()
		config_protocol = self.config.config_vars.vpn_def_protocol
		vpn_obj.write_in_primary()
		vpn_obj.write_in_backup()
		vpn_obj.configure_IPSec_default()
		vpn_obj.save_settings()
		vpn_obj.got_to_vpn_routing()
		vpn_obj.click_new_route()
		vpn_obj.add_route()
		vpn_obj.save_settings()
		self.take_s2_snapshot()
		vpn_obj.controller.click()
		vpn_obj.revert_settings()
		vpn_obj.save_settings()
		vpn_obj.got_to_vpn_routing()
		vpn_obj.delete_route()
		vpn_obj.save_settings()
		vpn_obj.buy_time()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9683_create_wireless_guest_network(self):
		conf = self.config.config_vars
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.guest_network_info()
		security = vlan_obj.select_virtual_controller()
		security.set_splash_page_type_value(conf.Splash_page_Authenticated)
		security.set_wispr(conf.disable_option)
		security.set_encryption(conf.enable_option)
		security.set_security_key_management(conf.Authentication_wpa2)
		security.set_pass_phrase_format(conf.pass_phrase_format_8_63_chars)
		security.set_passphrase_retype(conf.Auth_Sharedkey,conf.Retype_auth_shared_key)
		security.set_mac_authentication_value(conf.disable_option)
		security.set_authentication_server1(conf.internal_server)
		security.configure_reauth_interval('1',conf.reauth_intrvl_unit_hrs)
		security.reset_disable_if_uplink_type_is()
		security.set_splash_page_visulas()
		access = security.return_acces_page()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_wireless_rules()
		access.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9666_monitoring_overview_page(self):
		self.LeftPanel.go_to_monitoring_page()
		self.Dashboard.assert_monitoring_overview_page_elements()
		
	def test_ath_9661_create_guest_wired_network(self):

		self.NetworkPage.delete_new_wired_network()#1949
		self.NetworkPage.delete_specific_wired_network_if_present('network1')
		self.NetworkPage.delete_specific_wired_network_if_present('network2')
		self.NetworkPage.delete_specific_wired_network_if_present('network3')
		self.NetworkPage.delete_specific_wired_network_if_present('network4')

		security_page = self.LeftPanel.go_to_security()
		security_page.go_to_user_for_internal_server()
		security_page.delete_user_for_internal_server()
		security_page.back_to_network_page()
		
		self.take_s1_snapshot()
		
		# ATH-1945
		
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.specific_wired_guest_network_info_changed('network1')
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.finish_network_setup()
		
		# ATH-1947
				
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_guest_network_info_with_specific_name('network2')
		vlan_obj.assert_default_vlan_value()
		security = vlan_obj.wired_network_mode()
		access = security.wired_guest_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.finish_network_setup()
		
		# ATH-6855
		
		basic_info= self.NetworkPage.create_new_network()
		virtual_lan= basic_info.wired_guest_network_info_with_specific_name('network3')
		security= virtual_lan.wired_network_vlan_defaults()
		security.set_splash_page_type_value('Internal - Acknowledged')
		security.enable_mac_authentication1()
		security.create_security_internal_server_new_user()
		security.set_splash_page_visuals_field_values()
		security.preview_splash_page.click()
		import time
		time.sleep(5)
		security.preview_splash_page_close.click()
		access_page = security.click_on_next()
		network_assnmnt_page = access_page.use_access_defaults()
		network_assnmnt_page.finish_network_setup()
		
		# ATH-1949
			
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_wired_guest_network()
		security = virtual_lan.select_virtual_controller()
		access = security.wired_guest_security_defaults()
		access.click_network_access()
		access.create_captive_portal_rue_type(True)
		access.create_wired_vlan_assignment()
		network_ass = access.create_wired_diff_rule_types()
		network_ass.finish_network_setup()

		# ATH-1951
		
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_guest_network_info_with_specific_name('network4')
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.finish_network_setup()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info_2()
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.click_back()
		access.use_access_defaults()
		network_assign.set_new_network_port('network4')
		network_assign.finish_network_setup()
		self.NetworkPage.delete_wired2_network_if_present()
		edit_wired_network = self.NetworkPage.edit_new_wired_network_4()
		edit_wired_network.edit_net_assign_default()
		
		self.take_s2_snapshot()
		self.NetworkPage.delete_new_wired_network()#1949
		self.NetworkPage.delete_specific_wired_network_if_present('network1')
		self.NetworkPage.delete_specific_wired_network_if_present('network2')
		self.NetworkPage.delete_specific_wired_network_if_present('network3')
		self.NetworkPage.delete_specific_wired_network_if_present('network4')

		security_page = self.LeftPanel.go_to_security()
		security_page.go_to_user_for_internal_server()
		security_page.delete_user_for_internal_server()
		security_page.back_to_network_page()
		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9658_create_and_check_network_report(self):
		conf = self.config.config_vars
		reports_network=self.LeftPanel.go_to_reports_network()
		reports_network.check_delete_button_disabled()
		  
		reports_network.create_report(conf.time_span_last_week,'now',conf.repeat_one_time,'disabled')
		reports_network.create_report(conf.time_span_last_month,'now',conf.repeat_one_time,'disabled')
		reports_network.create_report(conf.time_span_last_year,'now',conf.repeat_one_time,'disabled')
		  
		reports_network.create_report(conf.time_span_last_week,'Later',conf.repeat_one_time,'disabled')
		reports_network.create_report(conf.time_span_last_month,'Later',conf.repeat_one_time,'disabled')
		reports_network.create_report(conf.time_span_last_year,'Later',conf.repeat_one_time,'disabled')
		 
		reports_network.create_report(conf.time_span_last_week,'now',conf.repeat_one_time,'enabled')
		reports_network.create_report(conf.time_span_last_month,'now',conf.repeat_one_time,'enabled')
		reports_network.create_report(conf.time_span_last_year,'now',conf.repeat_one_time,'enabled')
		 
		reports_network.create_and_cancel()
		 
		reports_network.create_report(conf.time_span_custom_range,'now',conf.repeat_one_time,'disabled')
		reports_network.create_report(conf.time_span_custom_range,'Later',conf.repeat_one_time,'disabled')
		reports_network.create_report(conf.time_span_custom_range,'now',conf.repeat_one_time,'enabled')
		 
		reports_network.check_delete_button_disabled()
		reports_network.export_report('completed')

		reports_network.delete_report('scheduled')
		reports_network.delete_report('completed')
		reports_network.delete_report(None)

	def test_ath_9660_create_pci_reports(self):
		pci_report= self.LeftPanel.go_to_reports_pci_compliance()
		pci_report.create_pci_report('Now','subnet','disabled')
		pci_report.create_pci_report('Now','subnet','disabled')
		pci_report.create_pci_report('Now','subnet','disabled')
		pci_report.create_pci_report('later','subnet','disabled')
		pci_report.create_pci_report('later','subnet','disabled')
		pci_report.create_pci_report('later','subnet','disabled')
		pci_report.create_pci_report('Now','subnet','enabled')
		pci_report.create_pci_report('Now','subnet','enabled')
		pci_report.create_pci_report('Now','subnet','enabled')
		pci_report.create_pci_report('later','subnet','enabled')
		pci_report.create_pci_report('later','subnet','enabled')
		pci_report.create_pci_report('later','subnet','enabled')
		pci_report.create_and_cancel()
		pci_report.check_delete_button_disabled()
		pci_report.email_to_user()
		pci_report.export_pci_report('completed')
		pci_report.delete_all_reports('scheduled')
		pci_report.delete_all_reports(None)
		
	def test_ath_9659_create_and_check_the_security_report(self):
		conf = self.config.config_vars
		report_security = self.LeftPanel.go_to_reports_security()
		report_security.create_new_report()
		report_security.set_time_span(conf.last_day)
		report_security.set_run_report(conf.now)
		report_security.create_report()
		report_security.create_new_report()
		report_security.set_time_span(conf.last_week)
		report_security.set_run_report(conf.now)
		report_security.create_report()
		report_security.create_new_report()
		report_security.set_time_span(conf.last_month)
		report_security.set_run_report(conf.now)
		report_security.create_report()
		report_security.create_new_report()
		report_security.set_time_span(conf.last_year)
		report_security.set_run_report(conf.now)
		report_security.create_report()
		report_security.create_new_report()
		report_security.set_time_span(conf.last_day)
		report_security.set_run_report(conf.schedule_for_later)
		report_security.set_schedule_time(conf.seven_pm)
		report_security.create_report()
		report_security.create_new_report()
		report_security.set_time_span(conf.last_week)
		report_security.set_run_report(conf.schedule_for_later)
		report_security.set_schedule_time(conf.seven_pm)
		report_security.create_report()
		report_security.create_new_report()
		report_security.set_time_span(conf.last_month)
		report_security.set_run_report(conf.schedule_for_later)
		report_security.set_schedule_time(conf.seven_pm)
		report_security.create_report()
		report_security.create_new_report()
		report_security.set_time_span(conf.last_year)
		report_security.set_run_report(conf.schedule_for_later)
		report_security.set_schedule_time(conf.seven_pm)
		report_security.create_report()
		report_security.create_new_report()
		report_security.set_time_span(conf.last_day)
		report_security.set_run_report(conf.now)
		report_security.set_email_report()
		report_security.create_report()
		report_security.create_new_report()
		report_security.set_time_span(conf.last_week)
		report_security.set_run_report(conf.now)
		report_security.set_email_report()
		report_security.create_report()
		report_security.create_new_report()
		report_security.cancel_report()
		report_security.create_new_report()
		report_security.set_time_span(conf.custom_range)
		report_security.select_start_and_end_date()
		report_security.set_run_report(conf.now)
		report_security.create_report()
		report_security.select_scheduled_report()
		report_security.delete_reports()
		report_security.select_completed_report()
		report_security.delete_reports()
		report_security.select_scheduled_report()
		report_security.select_completed_report()
		report_security.delete_reports()
		report_security.select_title()
		report_security.delete_reports()
		
	def test_ath_9667_quicklinks(self):
		self.LeftPanel.go_to_monitoring_page()
		self.Dashboard.assert_quicklinks_dropdown_elements()
		self.Dashboard.assert_quicklinks_options()
		
	def test_ath_9682_create_wireless_employee_network(self):
		self.take_s1_snapshot()
		self._delete_network_auth_server()
		network_page = self.LeftPanel.go_to_network_page()
		basic_info = self.NetworkPage.create_new_network()
		basic_info.employee_network_info_with_advanced_settings()
		basic_info.set_broadcasefiltering_dtiminterval()
		vlan_page = basic_info.setting_hide_advance_option_value()
		security_page = vlan_page.edit_default_vlan_id(self.config.config_vars.Vlan_Id)
		access = security_page.set_security_page_value()
		access.finish_network_setup()