import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class NonDefaultValueCheck(ConfigurationTest):
	'''
		Test class for Non Default Value Check under System module.
	'''

	def test_ath_11342_check_uplink_non_default_values(self):
		system_page = self.LeftPanel.go_to_system_page()
		system_page.click_uplink()
		self.take_s1_snapshot()
		system_page.set_3g_4g_country_value(self.config.config_vars.Modem_Country)
		system_page.set_3g_4g_isp_value(self.config.config_vars.modem_isp_value)
		system_page.set_wifi_name(self.config.config_vars.wifi_name1)
		system_page.set_wifi_band_value(self.config.config_vars.preferred_band_new_value)
		system_page.set_wifi_passphrase_text(self.config.config_vars.area_code_2)
		system_page.set_management_enforce_uplink(self.config.config_vars.enforce_uplink1)
		system_page.set_management_Pre_emption(self.config.config_vars.pre_emption1)
		system_page.set_management_vpn_failover_timeout(self.config.config_vars.timeout_value)
		system_page.set_management_internet_failover(self.config.config_vars.manage_internet_failover_value)
		system_page.pppoe_service_name(self.config.config_vars.pppoe_service_name)
		system_page.set_pp_chap_secret1(self.config.config_vars.re_chap_secret)
		system_page.set_pp_chap_secret2(self.config.config_vars.re_chap_secret)
		system_page.set_pp_user_name_value(self.config.config_vars.user_name_value)
		system_page.set_pp_password(self.config.config_vars.password_value)
		system_page.set_pp_retype_password(self.config.config_vars.password_value)
		system_page._save_settings()
		self.take_s2_snapshot()
		system_page.click_uplink()
		system_page.set_default_uplink_3g_4g_setting()
		system_page.set_default_uplink_wi_fi_setting()
		system_page.set_default_uplink_management_settings()
		system_page.set_default_uplink_pppoe_setting()
		system_page._save_settings()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(None)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_11343_check_non_default_values(self):
		conf = self.config.config_vars
		system_page = self.LeftPanel.go_to_system_page()
		system_page.click_uplink()
		self.take_s1_snapshot()
		system_page.checking_non_default_value_for_3g_4g(None,None,"abc","def","ghi","jkl","mno","pqrs","tuv","CHAP","wxyz","abcde")
		system_page.checking_non_default_value_for_wifi_field(conf.wifi_name1,conf.prefered_band_2_4ghz,conf.wifi_management1,conf.wifi_passphrase_format2,conf.hexadecimal_64_char)
		system_page.checking_non_default_values_for_management(conf.enforce_uplink2,conf.pre_emption,conf.timeout_3600,conf.internet_failover)
		system_page._save_settings()
		self.take_s2_snapshot()
		system_page.click_uplink()
		system_page.set_default_uplink_3g_4g_setting()
		system_page.set_default_uplink_wi_fi_setting()
		system_page.set_default_uplink_management_settings()
		system_page._save_settings()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(None)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11344_check_non_default_values_for_wifi(self):
		system_page = self.LeftPanel.go_to_system_page()
		system_page.click_uplink()
		self.take_s1_snapshot()
		system_page.checking_non_default_value_for_3g_4g(None,None,"abc","def","ghi","jkl","mno","pqrs","tuv","PAP","wxyz","abcde")
		system_page.checking_non_default_values_for_wifi()
		system_page._save_settings()
		system_page.click_uplink()
		system_page.set_uplink_priority_list_eth0_first()
		system_page.set_uplink_priority_list_3G_4G_second()
		system_page._save_settings()
		self.take_s2_snapshot()
		system_page.click_uplink()
		system_page.set_management_failover_internet_packet_freq()
		system_page.set_management_failover_packet_lost_count()
		system_page.set_management_internet_check_timeout()
		system_page.set_default_uplink_3g_4g_setting()
		system_page.set_default_uplink_wi_fi_setting()
		system_page.set_default_uplink_management_settings()
		system_page.set_default_uplink_priority_list()
		system_page._save_settings()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(None)
		self.assert_s1_s3_diff()
		self.clear()