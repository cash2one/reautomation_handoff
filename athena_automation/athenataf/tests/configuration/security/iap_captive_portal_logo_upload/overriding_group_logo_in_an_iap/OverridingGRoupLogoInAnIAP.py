import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class OverridingGRoupLogoInAnIAP(ConfigurationTest):
	'''
	Test class for Overriding GRoup Logo in an IAP.
	'''
	
	def test_ath_8870_verify_41_iap_overriding_logo_other_than_group_configured_captive_portal_logo(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.guest_network_info()
		security = vlan_obj.click_on_next()
		security.set_splash_page_type_value(conf.Splash_page_Acknowledged)
		logger.debug('SecurityPage : Clicking on upload button')
		fu = self.get_file_uploader(self.config.config_vars.logo_5_kb)
		fu.start()
		security.logo_upload.click()
		fu.join()
		logger.debug('SecurityPage : Clicking on save button')
		security.save_button.click()
		access = security.click_on_next()
		access.finish_network_setup()
		inner_left_panel = self.TopPanel.click_slider_icon()
		inner_left_panel.select_device()
		self.LeftPanel.go_to_network_page()
		edit_network = self.NetworkPage.edit_network()
		edit_network.click_security_accordion()
		fu = self.get_file_uploader(self.config.config_vars.logo_2)
		fu.start()
		logger.debug('SecurityPage : Clicking on change button')
		security.change_logo.click()
		fu.join()
		edit_network.save_captive_portal_partial.click()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(None)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8871_verify_removing_group_logo_removes_logo_for_all_IAPs_in_group_even_if_with_overridden_logo(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.guest_network_info()
		security = vlan_obj.click_on_next()
		security.set_splash_page_type_value(conf.Splash_page_Acknowledged)
		logger.debug('SecurityPage : Clicking on upload button')
		fu = self.get_file_uploader(self.config.config_vars.logo_5_kb)
		fu.start()
		security.logo_upload.click()
		fu.join()
		logger.debug('SecurityPage : Clicking on save button')
		security.save_button.click()
		access = security.click_on_next()
		access.finish_network_setup()
		inner_left_panel = self.TopPanel.click_slider_icon()
		inner_left_panel.select_device()
		self.LeftPanel.go_to_network_page()
		edit_network = self.NetworkPage.edit_network()
		edit_network.click_security_accordion()
		fu = self.get_file_uploader(self.config.config_vars.logo_2)
		fu.start()
		edit_network.change_logo.click()
		fu.join()
		edit_network.save_captive_portal_partial.click()
		if not edit_network.logo_preview:
			raise AssertionError("Captive Portal Logo is not displayed")
		inner_left_panel = self.TopPanel.click_slider_icon()
		inner_left_panel.select_default_group()
		self.LeftPanel.go_to_network_page()
		edit_network = self.NetworkPage.edit_network()
		edit_network.click_security_accordion()
		edit_network.delete_logo.click()
		edit_network.save_captive_portal_partial.click()
		if not edit_network.disable_delete_logo:
			raise AssertionError("EditNetworkPage: Delete logo button is not 'Disabled'")
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(None)
		self.assert_s1_s3_diff()
		self.clear()