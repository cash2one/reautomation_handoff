import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class LogoUpload(ConfigurationTest):
	'''
	Test class for Employee Security Level Personal testcases.
	'''

	def test_ath_8854_verify_captive_portal_logo_upload(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.guest_network_info()
		security = vlan_obj.click_on_next()
		security.set_splash_page_type_value(conf.Splash_page_Acknowledged)
		logger.debug('SecurityPage : Clicking on upload button')
		fu = self.get_file_uploader(conf.logo1)
		fu.start()
		security.logo_upload.click()
		fu.join()
		logger.debug('SecurityPage : Clicking on save button')
		security.save_button.click()
		logger.debug('SecurityPage : Asserting logo preview image')
		self.browser.assert_element(security.logo_preview,'Logo preview image is not displayed')
		logger.debug('SecurityPage : Asserting logo change button')
		self.browser.assert_element(security.change_logo,'Logo change button is not displayed')
		logger.debug('SecurityPage : Asserting logo delete button')
		self.browser.assert_element(security.delete_logo,'Logo delete button is not displayed')
		access = security.click_on_next()
		access.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(None)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_8978_verify_existing_captive_portal_logo_can_be_changed(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.guest_network_info()
		security = vlan_obj.click_on_next()
		security.set_splash_page_type_value(conf.Splash_page_Acknowledged)
		logger.debug('SecurityPage : Clicking on upload button')
		fu = self.get_file_uploader(conf.logo1)
		fu.start()
		security.logo_upload.click()
		fu.join()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.click_on_security_accordion()
		logger.debug('SecurityPage : Clicking on upload button')
		fu = self.get_file_uploader(conf.logo1)
		fu.start()
		security.logo_upload.click()
		fu.join()
		edit_network._save_settings()
		self.take_s2_snapshot()

		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(None)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8855_verify_captive_portal_logo_image_type(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.guest_network_info()
		security = vlan_obj.click_on_next()
		security.set_splash_page_type_value(conf.Splash_page_Acknowledged)
		logger.debug('SecurityPage : Clicking on upload button')
		fu = self.get_file_uploader(conf.logo1)
		fu.start()
		security.logo_upload.click()
		fu.join()
		import time
		time.sleep(5)
		fu = self.get_file_uploader(conf.textfile)
		fu.start()
		security.logo_upload.click()
		fu.join()
		time.sleep(5)
		logger.debug('SecurityPage : Asserting logo preview image')
		self.browser.assert_element(security.invalid_logo_error,'Invalid logo image file format alert is not displayed')
		logger.debug('SecurityPage : Clicking on ok button')
		security.logo_upload_error_ok_button.click()
		access = security.click_on_next()
		access.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(None)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9039_verify_reupload_of_same_logo_should_not_lead_to_any_issue(self):
		conf = self.config.config_vars
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.guest_network_info()
		security = vlan_obj.use_vlan_defaults()
		fu = self.get_file_uploader(conf.logo_path)
		fu.start()
		security.logo_upload.click()
		fu.join()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.delete_logo.click()
		fu = self.get_file_uploader(conf.logo_path)
		fu.start()
		edit_network_page.logo_upload.click()
		fu.join()
		edit_network_page._save_settings()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_8860_verify_captive_portal_logo_upload_feature_on_different_browsers(self):
		conf = self.config.config_vars
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.guest_network_info()
		security = vlan_obj.click_on_next()
		security.set_splash_page_type_value(conf.Splash_page_Acknowledged)
		logger.debug('SecurityPage : Clicking on upload button')
		security.assert_splas_page_visuals_fields()
		security.click_on_preview_splash_page()
		security.assert_splash_banner_logo()
		security.click_on_preview_splash_page_close()
		fu = self.get_file_uploader(conf.logo_path)
		fu.start()
		security.logo_upload.click()
		fu.join()
		security.assert_splash_logo_preview_change_delete_options()
		security.click_on_preview_splash_page()
		logger.debug("SecurityPage: Checking splash Banner logo is not present or not")
		self.browser.assert_element(security.splash_banner_logo,'splash banner logo is not Present')	
		security.click_on_preview_splash_page_close()
		access = security.click_on_next()
		access.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(None)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8863_verify_captive_portal_logo_delete_on_group_with_mix_iap_versions(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.guest_network_info()
		security = vlan_obj.click_on_next()
		security.set_splash_page_type_value(conf.Splash_page_Acknowledged)
		logger.debug('SecurityPage : Clicking on upload button')
		fu = self.get_file_uploader(conf.logo1)
		fu.start()
		security.logo_upload.click()
		fu.join()
		security._save_settings()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.click_on_security_accordion()
		edit_network.click_on_delete_logo()
		edit_network.assert_splas_page_visuals_fields()
		edit_network.assert_security_logo_small_preview_image()
		edit_network.click_on_preview_splash_page()
		edit_network.assert_security_splash_banner_logo()
		edit_network.click_on_preview_splash_page_close()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(None)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8864_verify_captive_portal_logo_delete_on_iap_41(self): 
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.guest_network_info()
		security = vlan_obj.click_on_next()
		security.set_splash_page_type_value(conf.Splash_page_Acknowledged)
		logger.debug('SecurityPage : Clicking on upload button')
		fu = self.get_file_uploader(conf.logo1)
		fu.start()
		security.logo_upload.click()
		fu.join()
		security._save_settings()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.click_on_security_accordion()
		edit_network.click_on_delete_logo()
		edit_network.assert_splas_page_visuals_fields()
		edit_network.assert_security_logo_small_preview_image()
		edit_network.click_on_preview_splash_page()
		edit_network.assert_security_splash_banner_logo()
		edit_network.click_on_preview_splash_page_close()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(None)
		self.assert_s1_s3_diff()
		self.clear()
		
		
		
		
		