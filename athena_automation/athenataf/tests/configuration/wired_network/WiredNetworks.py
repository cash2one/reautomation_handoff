
import logging
logger = logging.getLogger('athenataf')


from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class WiredNetworks(ConfigurationTest):
	'''
	Test class for network configuration wired network.
	'''

	def _delete_network_auth_server(self):
		'''
		Delete wireless and auth servers 
		'''
		self.NetworkPage.delete_network_if_present()
		self.NetworkPage.delete_wired_network_if_present()
		security_page = self.LeftPanel.go_to_security() 
		security_page.delete_2_external_servers()
		self.LeftPanel.go_to_network_page()

	def test_ath_1933_default_wired_networks(self):
		self.take_s1_snapshot()
		self.NetworkPage.assert_editable_default_wired_port()
		self.NetworkPage.assert_editable_default_wired_instant()
		self.take_s2_snapshot()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(None)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1934_create_wired_network_default(self):
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info()
		security = vlan_obj.wired_vlan_defaults()
		security.wired_employee_security_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.assert_network_assigned()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_1935_create_wired_basic_nondefault(self):
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.set_wired_basic_nondefault()
		security = vlan_obj.wired_vlan_defaults()
		security.wired_employee_security_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.assert_network_assigned()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_1939_create_wired_network_nondefault(self):
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info()
		security = vlan_obj.wired_vlan_defaults()
		security.wired_employee_security_defaults()
		access = security.wired_security_defaults()
		access.create_different_rule_types()
		network_assign = access.click_next()
		network_assign.assert_network_assigned()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_1940_create_wired_role_nondefault(self):
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info()
		security = vlan_obj.wired_vlan_defaults()
		security.wired_employee_security_defaults()
		access = security.wired_security_defaults()
		access.click_role_access()
		access.role_access_rule()
		access.create_new_role_1()
		access.create_new_role_2()
		access.create_new_role_3()
		network_assign = access.click_next()
		network_assign.assert_network_assigned()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_1941_network_port_assignment(self):
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info()
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.assert_network_assigned()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info_2()
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.click_back()
		access.use_access_defaults()
		network_assign.set_network_port()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network_2()
		self.NetworkPage.delete_wired2_network_if_present()
		self.NetworkPage.assert_wired_network()
		edit_wired_network = self.NetworkPage.edit_wired_network()
		edit_wired_network.edit_net_assign_default()
		self.NetworkPage.assert_wired_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_1942_network_port_assignment(self):
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.set_wired_basic_nondefault()
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		edit_wired_network = self.NetworkPage.edit_wired_network()
		edit_wired_network.edit_basic_info_setting()
		edit_wired_network = self.NetworkPage.edit_wired_network()
		edit_wired_network.edit_net_assign_setting()
		self.NetworkPage.assert_wired_network()
		# self.NetworkPage.wired_network.click()
		# edit_wired_network.assert_edited_value()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_1945_guest_network_change_basic(self):
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_guest_network_info_changed()
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_1951_guest_network_port_assignment(self):
		self.NetworkPage.delete_wired_network_if_present()		
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_guest_network_info()
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.assert_network_assigned()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info_2()
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.click_back()
		access.use_access_defaults()
		network_assign.set_network_port()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network_2()
		self.NetworkPage.delete_wired2_network_if_present()
		self.NetworkPage.assert_wired_network()
		edit_wired_network = self.NetworkPage.edit_wired_network()
		edit_wired_network.edit_net_assign_default()
		self.NetworkPage.assert_wired_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()     
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9211_vlan_ip_assigned_by_virtual_controller_default(self):	
		self.NetworkPage.delete_wired_network_if_present()		
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info()
		vlan_obj.validate_static_vlan_id('3333')
		vlan_obj.validate_static_vlan_id('over_max_length')
		#security = vlan_obj.validate_static_vlan_id('1,2')
		#vlan_obj = security.back_to_vlan_page()
		security = vlan_obj.validate_static_vlan_id('100-200')
		#vlan_obj = security.back_to_vlan_page()	
		#security = vlan_obj.validate_static_vlan_id('2')
		#security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.assert_network_assigned()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		self.take_s2_snapshot()		
		self.NetworkPage.delete_wired_network_if_present()     
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_1947_guest_network_vlan_access_mode(self):
		self.NetworkPage.delete_wired_network_if_present()		
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_guest_network_info()
		vlan_obj.assert_default_vlan_value()
		security = vlan_obj.wired_network_mode()
		access = security.wired_guest_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()     
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1949_Guest_Wired_Network_Access_Network_based_access_rule(self):
		# conf = self.config.config_vars
		self.NetworkPage.delete_wired_network_if_present()		
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_wired_guest_network()
		security = virtual_lan.select_virtual_controller()
		access = security.wired_guest_security_defaults()
		access.click_network_access()
		# access.assert_allow_any_to_all_destination_msg()
		# access.assert_default_rule_edit_and_delete()
		# access.assert_add_rule_plus_button()
		access.create_captive_portal_rue_type(True)
		access.create_wired_vlan_assignment()
		network_ass = access.create_wired_diff_rule_types()
		network_ass.finish_network_setup()
		self.NetworkPage.delete_wired_network()
		
	def test_ath_7230_delete_existing_wired_network(self):
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info()
		security = vlan_obj.wired_vlan_defaults()
		security.wired_employee_security_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.assert_network_assigned()
		network_assign.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.assert_wired_network()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_6853_create_new_wired_network_security_verify_802_auth(self):
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_authentication_server()
		NetworkPage = security_page.back_to_network_page()
		self.NetworkPage.delete_test_1934_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		basic_info.click_wired_network()
		basic_info.assert_wired_configuration_defaults()
		vlan_obj = basic_info.wired_test_1934_info()
		vlan_obj.assert_default_vlan_value()
		security = vlan_obj.wired_vlan_defaults()
		security.wired_employee_security_defaults()
		security.configure_wired_802_1x_authentication('Enabled')
		security.assert_auth_server_one_defaults()
		security.assert_reauth_interval_unit('0','min.')
		security.assert_default_users()
		security.set_external_radius_server_1()
		security.checking_for_authentication_server2_visibility()
		access = security.click_on_next()
		access.assert_access_rule_unrestricted()
		network_assignemnt = access.click_next()
		network_assignemnt.assert_network_assigned()
		network_assignemnt.finish_network_setup()
		self.NetworkPage.assert_test_1934_network()
		self.take_s2_snapshot()	
		self.NetworkPage.delete_test_1934_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_authentication_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11267_employee_wired_network_vlan_mode_to_access_default(self):
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.wired_employee_network_info()
		security_page = virtual_lan.wired_network_mode()
		access_page = security_page.click_on_next()
		network_assign_page = access_page.click_next()
		network_assign_page.finish_network_setup()
		self.take_s2_snapshot() 
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11262_delete_existing_wired_network(self):
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info()
		security = vlan_obj.wired_vlan_defaults()
		security.wired_employee_security_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.assert_network_assigned()
		network_assign.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.assert_wired_network()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11263_default_wired_networks(self):
		self.take_s1_snapshot()
		self.NetworkPage.assert_editable_default_wired_port()
		self.NetworkPage.assert_editable_default_wired_instant()
		self.take_s2_snapshot()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(None)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11264_create_wired_network_default(self):
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info()
		security = vlan_obj.wired_vlan_defaults()
		security.wired_employee_security_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.assert_network_assigned()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_11265_create_wired_basic_nondefault(self):
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.set_wired_basic_nondefault(poe = True)
		security = vlan_obj.wired_vlan_defaults()
		security.wired_employee_security_defaults()
		access = security.wired_security_defaults()
		access.assert_access_rule_unrestricted()
		network_assign = access.use_access_defaults()
		network_assign.assert_network_assigned()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11269_create_wired_network_nondefault(self):
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info()
		security = vlan_obj.wired_vlan_defaults()
		security.wired_employee_security_defaults()
		access = security.wired_security_defaults()
		access.assert_access_rule_unrestricted()
		access.create_different_rule_types()
		network_assign = access.click_next()
		network_assign.assert_network_assigned()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11270_create_wired_role_nondefault(self):
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info()
		security = vlan_obj.wired_vlan_defaults()
		security.wired_employee_security_defaults()
		access = security.wired_security_defaults()
		access.click_role_access()
		access.role_access_rule()
		access.create_new_role_1()
		access.create_new_role_2()
		access.create_new_role_3()
		network_assign = access.click_next()
		network_assign.assert_network_assigned()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11271_network_port_assignment(self):
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info()
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.assert_network_assigned()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info_2()
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.click_back()
		access.use_access_defaults()
		network_assign.set_network_port()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network_2()
		self.NetworkPage.delete_wired2_network_if_present()
		self.NetworkPage.assert_wired_network()
		edit_wired_network = self.NetworkPage.edit_wired_network()
		edit_wired_network.edit_net_assign_default()
		self.NetworkPage.assert_wired_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11274_guest_network_change_basic(self):
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_guest_network_info_changed()
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11276_guest_network_vlan_access_mode(self):
		self.NetworkPage.delete_wired_network_if_present()		
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_guest_network_info()
		vlan_obj.assert_default_vlan_value()
		security = vlan_obj.wired_network_mode()
		access = security.wired_guest_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()     
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11278_Guest_Wired_Network_Access_Network_based_access_rule(self):
		# conf = self.config.config_vars
		self.NetworkPage.delete_wired_network_if_present()		
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_wired_guest_network()
		security = virtual_lan.select_virtual_controller()
		access = security.wired_guest_security_defaults()
		access.click_network_access()
		# access.assert_allow_any_to_all_destination_msg()
		# access.assert_default_rule_edit_and_delete()
		# access.assert_add_rule_plus_button()
		access.create_captive_portal_rue_type(True)
		access.create_wired_vlan_assignment()
		network_ass = access.create_wired_diff_rule_types()
		network_ass.finish_network_setup()
		self.NetworkPage.delete_wired_network()
		
	def test_ath_11280_guest_network_port_assignment(self):
		self.NetworkPage.delete_wired_network_if_present()		
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_guest_network_info()
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.assert_network_assigned()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info_2()
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.click_back()
		access.use_access_defaults()
		network_assign.set_network_port()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network_2()
		self.NetworkPage.delete_wired2_network_if_present()
		self.NetworkPage.assert_wired_network()
		edit_wired_network = self.NetworkPage.edit_wired_network()
		edit_wired_network.edit_net_assign_default()
		self.NetworkPage.assert_wired_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()     
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11284_create_new_wired_network_security_verify_802_auth(self):
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_authentication_server()
		NetworkPage = security_page.back_to_network_page()
		self.NetworkPage.delete_test_1934_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		basic_info.click_wired_network()
		basic_info.assert_wired_configuration_defaults()
		vlan_obj = basic_info.wired_test_1934_info()
		vlan_obj.assert_default_vlan_value()
		security = vlan_obj.wired_vlan_defaults()
		security.wired_employee_security_defaults()
		security.configure_wired_802_1x_authentication('Enabled')
		security.assert_auth_server_one_defaults()
		security.assert_reauth_interval_unit('0','min.')
		security.assert_default_users()
		security.set_external_radius_server_1()
		security.checking_for_authentication_server2_visibility()
		access = security.click_on_next()
		access.assert_access_rule_unrestricted()
		network_assignemnt = access.click_next()
		network_assignemnt.assert_network_assigned()
		network_assignemnt.finish_network_setup()
		self.NetworkPage.assert_test_1934_network()
		self.take_s2_snapshot()	
		self.NetworkPage.delete_test_1934_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_authentication_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11292_vlan_ip_assigned_by_virtual_controller_default(self):	
		self.NetworkPage.delete_wired_network_if_present()		
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info()
		vlan_obj.validate_static_vlan_id('3333')
		vlan_obj.validate_static_vlan_id('over_max_length')
		#security = vlan_obj.validate_static_vlan_id('1,2')
		#vlan_obj = security.back_to_vlan_page()
		security = vlan_obj.validate_static_vlan_id('100-200')
		#vlan_obj = security.back_to_vlan_page()	
		#security = vlan_obj.validate_static_vlan_id('2')
		#security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.assert_network_assigned()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		self.take_s2_snapshot()		
		self.NetworkPage.delete_wired_network_if_present()     
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11266_employee_wired_network_vlan_ip_assigned_by_virtual_controller_edit(self):
		self.NetworkPage.delete_test_1934_if_present()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		basic_info.click_wired_network()
		basic_info.assert_wired_configuration_defaults()
		vlan_obj = basic_info.wired_test_1934_info()
		vlan_obj.assert_default_vlan_value()
		vlan_obj.select_network_assigned()
		vlan_obj.assert_native_allowed_vlan_and_vlan_new()
		vlan_obj.validate_native_vlan()
		vlan_obj.set_native_vlan(conf.Vlan_Id_vlan)
		vlan_obj.click_on_new()
		vlan_obj.get_and_assert_rule_operator_dropdown_elements()
		vlan_obj.set_rule_string_value(conf.string_max_len)
		vlan_obj._click_ok()
		vlan_obj.assert_vlan_string_error()
		vlan_obj.validate_vlan_assignment()
		vlan_obj.create_multiple_vlan_assignment_rules()
		vlan_obj.assert_vlan_delete_edit_options()
		security = vlan_obj.click_on_next()
		access = security.click_on_next()
		network_assignemnt = access.click_next()
		network_assignemnt.finish_network_setup()
		self.take_s2_snapshot()	
		self.NetworkPage.delete_test_1934_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11275_Guest_wired_network_vlan_ip_assignment_by_virtual_controller(self):
		self.NetworkPage.delete_test_1934_if_present()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_guest_network_info_with_specific_name(conf.new_test_1934)
		vlan_obj.select_network_assigned()
		vlan_obj.assert_native_allowed_vlan_and_vlan_new()
		vlan_obj.validate_native_vlan()
		vlan_obj.validate_allowed_vlan_values()
		vlan_obj.set_native_vlan(conf.Vlan_Id_vlan)
		vlan_obj.set_wired_vlan_id(conf.Vlan_Id_vlan)
		vlan_obj.click_on_new()
		vlan_obj.get_and_assert_rule_operator_dropdown_elements()
		vlan_obj.set_rule_string_value(conf.string_max_len)
		vlan_obj._click_ok()
		vlan_obj.assert_vlan_string_error()
		vlan_obj.validate_vlan_assignment()
		vlan_obj.create_multiple_vlan_assignment_rules()
		vlan_obj.assert_vlan_delete_edit_options()
		vlan_obj.move_vlan_assignment_rule_up_and_down()
		security = vlan_obj.click_on_next()
		access = security.click_on_next()
		network_assignemnt = access.click_next()
		network_assignemnt.finish_network_setup()
		self.take_s2_snapshot()	
		self.NetworkPage.delete_test_1934_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11268_employee_wired_network_security_mac_auth_enable(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.wired_employee_network_info()
		security_page = virtual_lan.wired_vlan_defaults()
		security_page.wired_employee_security_defaults()
		logger.debug('SecurityPage : Enabling mac authentication server')
		security_page.mac_authentication.set(conf.enable_option)
		self.browser.assert_drop_down_value(security_page.authentication_server,conf.Authentication_server,'Auth server1 is not set to InternalServer')
		self.browser.assert_text(security_page.reauth_interval,conf.invalid_zero_input,'reauth interval is not set to zero','value')
		self.browser.assert_element(security_page.show_users_link,'zero show users link is not displayed')
		self.browser.assert_element(security_page.zero_users_warning,'Only registered users of type "Employee" will be able to access this networks not displayed')
		security_page.get_and_assert_authentication_server1_dropdown_elements()
		security_page.assert_auth_server1_selected_option(conf.InternalServer)
		security_page.set_authentication_server_1_value(conf.new_server)
		security_page.assert_radius_radio_button()
		security_page.validate_authentication_server_name()
		security_page.assert_auth_server2_internal_server_count_warning()
		security_page.assert_authentication_server2_dropdown()
		security_page.create_external_radius_server_in_auth_server_two()
		logger.debug('SecurityPage : asserting load balancing : disabled') 
		self.browser.assert_drop_down_value(security_page.load_balancing,conf.open_roaming_value,'load balancing field is not set to disabled')
		security_page.validate_reauth_interval_field(conf.reauth_intrvl_unit_min)
		security_page.validate_reauth_interval_field(conf.reauth_intrvl_unit_hrs)
		security_page.configure_reauth_interval(conf.max_authentication_failure,conf.reauth_intrvl_unit_min)  
		access = security_page.return_acces_page()
		network_assign = access.use_access_defaults()
		network_assign.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11277_guest_wired_network_security_splash_type_nternal_auth(self):
		self.NetworkPage.delete_new_wired_network_1948()		
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_authentication_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		self.LeftPanel.go_to_network_page()
		basic_info = self.NetworkPage.create_new_network()
		basic_info.create_wired_guest_network_1948()
		basic_info.assert_wired_guest_network_1948()
		vlan_obj = basic_info.click_on_next()
		vlan_obj.assert_default_vlan_value()
		security = vlan_obj.click_on_next()
		security.configure_splash_page_type(conf.Splash_page_Authenticated)
		security.assert_splash_page_type_and_mac_authentication()
		security.assert_internal_authenticated_fields()
		security.create_authenticate_server()
		security.checking_for_authentication_server2_visibility()
		security.browser.assert_element(security.zero_users_warning,'zero users warning link is not displayed',False)
		security.set_splash_page_visulas()
		access = security.click_on_next()
		access.assert_access_rule_unrestricted()
		network_assign_page = access.click_on_next()
		network_assign_page.assert_network_assigned()
		network_assign_page.finish_network_setup()
		self.take_s2_snapshot()	
		self.NetworkPage.delete_new_wired_network_1948()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_authentication_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()	
	
	def test_ath_11282_guest_wired_network_splash_page_type_external_radius_authenticated(self):
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_walled_garden_blacklist_whitelist()
		self.LeftPanel.go_to_network_page()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_guest_network_info_with_specific_name(self.config.config_vars.Network_name)
		security = vlan_obj.click_on_next()
		security.set_splash_page_type('External')
		security.assert_external_splash_page_type_fields()
		security.set_captive_portal_profile('default')
		security.click_on_edit_captive_portal()
		security.assert_external_captive_portal_default()
		security.set_captive_type()
		security.browser.assert_element(security.captive_auth_text,'Auth Text textbox is present',False)
		security.cap_cancel.click()
		security.set_mac_authentication_value('Enabled')
		security.create_walled_garden_white_and_blacklist()
		access = security.click_on_next()
		network_assign_page = access.click_on_next()
		network_assign_page.finish_network_setup()
		self.take_s2_snapshot()	
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_walled_garden_blacklist_whitelist()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11297_security_disabled_mac_authentication_fail_through(self):
		self.NetworkPage.delete_network_if_present()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info()
		vlan_obj.clicking_network_assigned()
		vlan_obj.set_native_vlan(conf.Vlan_Id_vlan)
		vlan_obj.set_wired_vlan_id(conf.Vlan_Number)
		vlan_obj.create_new_vlan_assignment_rule(conf.rule_operator_rule_equals,conf.Vlan_Rule_String1,conf.Vlan_Id_vlan)
		security = vlan_obj.click_on_next()
		security.set_mac_authentication_value('Enabled')
		security.configure_wired_802_1x_authentication(conf.enable_option)
		security.assert_wired_mac_authentication_fail_through()
		security.set_reauth_interval()
		security.add_internal_sever_user()
		access = security.click_on_next()
		network_assign_page = access.click_on_next()
		network_assign_page.finish_network_setup()
		self.take_s2_snapshot()	
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11299_employee_wired_network_access_network_based_access_rule_with_options(self):
		self.NetworkPage.delete_wired_network_if_present()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info()
		security = vlan_obj.click_on_next()
		access = security.click_on_next()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_rule_one()
		access.create_rule_two()
		access.create_rule_three()
		network_assign_page = access.click_on_next()
		network_assign_page.finish_network_setup()
		self.take_s2_snapshot()	
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11296_employee_wired_network_security_mac_and_802_1x_enabled(self):
		self.NetworkPage.delete_wired_network_if_present()
		security_page = self.LeftPanel.go_to_security() 
		security_page.delete_authentication_server()
		security_page.delete_authentication_server2()
		self.LeftPanel.go_to_network_page()		
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.create_wired_network()
		vlan_obj.clicking_network_assigned()
		vlan_obj.set_native_vlan(conf.Vlan_Id_vlan)
		vlan_obj.set_wired_vlan_id(conf.Vlan_Number)
		vlan_obj.create_new_vlan_assignment_rule(conf.rule_operator_rule_equals,conf.Vlan_Rule_String1,conf.Vlan_Id_vlan)
		security = vlan_obj.click_on_next()
		security.set_mac_authentication_value('Enabled')
		security.configure_wired_802_1x_authentication(conf.enable_option)
		security.assert_wired_mac_authentication_fail_through()
		security.configure_wired_mac_authentication_fail_through(conf.Security_Mac_Authentication_Enabled)
		security.create_external_radius_server_in_auth_server_one()
		security.configure_reauth_interval(conf.default_time_out, conf.reauth_intrvl_unit_min)
		access = security.click_on_next()
		network_assign_page = access.click_on_next()
		network_assign_page.finish_network_setup()
		self.take_s2_snapshot()	
		self.NetworkPage.delete_wired_network_if_present()
		security_page = self.LeftPanel.go_to_security() 
		security_page.delete_authentication_server()
		security_page.delete_authentication_server2()
		self.LeftPanel.go_to_network_page()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11273_guest_wired_network_default_values_for_the_new_guest_profile(self):
		self.NetworkPage.delete_wired_network_if_present()		
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_wired_guest_network_assert_defaults()
		virtual_lan.assert_default_vlan_value()
		security_page = virtual_lan.click_on_next()
		security_page.assert_wired_guest_network_security_level_defaults()
		security_page.assert_wired_guest_network_security_level_Splash_page_visuals_defaults()
		security_page.assert_wired_network_redirected_url()
		security_page.set_default_redirect_url()
		access_page = security_page.click_on_next()
		access_page.assert_access_rule_unrestricted()
		network_assign_page = access_page.click_next()
		network_assign_page.assert_network_assigned()
		network_assign_page.finish_network_setup()
		self.take_s2_snapshot() 
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11281_guest_wired_network_default_values_for_the_new_guest_profile(self):
		self.NetworkPage.delete_wired_network_if_present()		
		self.take_s1_snapshot()
		conf = self.config.config_vars
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_wired_guest_network_assert_defaults()
		virtual_lan.assert_default_vlan_value()
		security_page = virtual_lan.click_on_next()
		security_page.assert_wired_guest_network_security_level_defaults()
		security_page.assert_wired_guest_network_security_level_Splash_page_visuals_defaults()
		security_page.assert_wired_network_redirected_url()
		security_page.set_default_redirect_url()
		access_page = security_page.click_on_next()
		access_page.assert_access_rule_unrestricted()
		network_assign_page = access_page.click_next()
		network_assign_page.assert_network_assigned()
		network_assign_page.finish_network_setup()
		edit_wired_network = self.NetworkPage.edit_wired_network()
		edit_wired_network.click_employee_primary_usage()
		edit_wired_network.edit_basic_info_setting_employee_primary_usage()
		edit_wired_network.click_vlans_accordion()
		edit_wired_network.edit_vlans_access_mode_network_assigned_access_vlan(conf.vlan_rule,conf.attribute_ap_name,conf.operator_not_equals,conf.string,conf.speed_edit)
		edit_wired_network.edit_security_internal_authenticated_all_fields(mac_auth=conf.uplink,auth_server=conf.internal_server1,reauth_interval_time=conf.vlan_rule)
		edit_wired_network.click_access_accordion()
		edit_wired_network.edit_access_role_based_all_fields(new_role=conf.new_role1,attribute=conf.attribute_ap_name,operator=conf.operator_not_equals,string=conf.string,role=conf.role_value)
		edit_wired_network.click_network_assign_accordion()
		edit_wired_network.edit_network_assignment_all_fields(conf.role_value,conf.role_value,conf.role_value,conf.role_value,conf.role_value)
		edit_wired_network.click_save_settings()
		self.take_s2_snapshot() 
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11298_employee_wired_network_security_edit_authserver(self):
		self.NetworkPage.delete_wired_network_if_present()
		security_page = self.LeftPanel.go_to_security() 
		security_page.delete_authentication_server()
		security_page.delete_authentication_server2()
		self.LeftPanel.go_to_network_page()		
		self.take_s1_snapshot()
		conf = self.config.config_vars
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.wired_employee_network_info()
		security_page = virtual_lan.click_on_next()
		security_page.enable_mac_authentication()
		security_page.create_external_radius_server_in_auth_server_one()
		security_page.create_external_radius_server_in_auth_server_two()
		security_page.configure_auth_server_settings(balancing = True)
		security_page.set_authentication_server_2_value(conf.select)
		access_page = security_page.click_on_next()
		access_page.assert_access_rule_unrestricted()
		network_assign_page = access_page.click_next()
		network_assign_page.finish_network_setup()
		edit_wired_network = self.NetworkPage.edit_wired_network()
		edit_wired_network.click_security_accordion()
		edit_wired_network.select_internalserver()
		logger.debug("Asserting show users link")
		self.browser.assert_element(edit_wired_network.show_users_link,'zero users link is not displayed')
		edit_wired_network.add_internal_sever_user()
		edit_wired_network.checking_for_authentication_servers_visibility()
		edit_wired_network.click_save_settings()
		self.take_s2_snapshot() 
		self.NetworkPage.delete_wired_network_if_present()
		security_page = self.LeftPanel.go_to_security() 
		security_page.delete_authentication_server()
		security_page.delete_authentication_server2()
		self.LeftPanel.go_to_network_page()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()		

	def test_ath_11279_employee_wired_network_security_mac_auth_enable(self):
		conf = self.config.config_vars
		self._delete_network_auth_server()
		self.NetworkPage.delete_wired_network_if_present()		
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_guest_network_info()
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		access.click_role_access()
		access.create_multiple_roles()
		access.select_role(access.role1_name)
		access.create_vlan_assignment_rule(conf.acct_session_id)
		access.select_role(access.role2_name)
		access.captive_portal_profile_create()
		access.select_role(access.role3_name)
		access.access_rule_type_calea()
		access.set_role_assignment_rules_to_roles(conf.role_name_1,conf.service_role_dhcp)
		access.set_role_assignment_rules_to_roles(conf.role_name_2,conf.service_role_dns)
		access.set_role_assignment_rules_to_roles(conf.role_name_3,conf.service_role_esp)
		network_assign = access.click_next()
		network_assign.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11285_guest_wired_networks_security_splash_type_internal_ack(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_wired_network_if_present()		
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_guest_network_info()
		security = vlan_obj.wired_vlan_defaults()
		security.set_splash_page_type_value(conf.Splash_page_Acknowledged)
		security.enable_mac_authentication1()
		security.add_internal_sever_user()
		security.set_splash_page_visulas()
		access = security.click_on_next()
		network_assign = access.click_next()
		network_assign.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_11293_employee_wired_networks_vlan_modify_mode_to_access(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_wired_network_if_present()		
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_guest_network_info()
		vlan_obj.set_mode_value(conf.vlan_mode_value)
		vlan_obj.select_network_assigned()
		vlan_obj.validate_access_vlan()
		vlan_obj.set_access_vlan(conf.Vlan_Id_vlan4)
		vlan_obj.create_multiple_vlan_assignment_rules()
		security = vlan_obj.click_on_next()
		access = security.click_on_next()
		network_assign = access.click_next()
		network_assign.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11283_guest_wired_network_splash_page_external_auth_text(self):
		self.NetworkPage.delete_wired_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_authentication_server()
		security_page.delete_walled_garden_blacklist_whitelist()
		self.LeftPanel.go_to_network_page()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_guest_network_info()
		security = vlan_obj.click_on_next()
		security.set_splash_page_type('External')
		security.assert_external_splash_page_type_fields()
		security.set_captive_portal_profile('default')
		security.click_on_edit_captive_portal()
		security.assert_external_captive_portal_default()
		security.save.click()
		security.set_mac_authentication_value('Disabled')
		security.set_external_radius_server_1()
		security.create_walled_garden_white_and_blacklist()
		access = security.click_on_next()
		network_assign_page = access.click_on_next()
		network_assign_page.finish_network_setup()
		self.take_s2_snapshot()	
		self.NetworkPage.delete_wired_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_authentication_server()
		security_page.delete_walled_garden_blacklist_whitelist()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def _delete_external_radius_servers(self):
		self.NetworkPage.delete_wired_network_if_present()
		security_page = self.LeftPanel.go_to_security() 
		security_page.delete_authentication_server()
		security_page.delete_authentication_server2()
		self.LeftPanel.go_to_network_page()
		
	def test_ath_11272_network_port_assignment(self):
		conf = self.config.config_vars
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.set_wired_basic_nondefault()
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		network_assign = access.use_access_defaults()
		network_assign.finish_network_setup()
		self.NetworkPage.assert_wired_network()
		edit_wired_network = self.NetworkPage.edit_wired_network()
		edit_wired_network.edit_basic_info_setting()
		edit_wired_network = self.NetworkPage.edit_wired_network()
		edit_wired_network.click_vlans_accordion()
		edit_wired_network.edit_vlans_access_mode_network_assigned_access_vlan(conf.vlan_rule,conf.attribute_ap_name,conf.operator_not_equals,conf.string,conf.speed_edit)
		edit_wired_network.edit_security_internal_authenticated_all_fields(mac_auth = conf.enable_option)
		edit_wired_network.set_security_authentication_802_1x(conf.enable_option)
		edit_wired_network.create_external_radius_server_in_auth_servers('one')
		edit_wired_network.create_external_radius_server_in_auth_servers('two')
		edit_wired_network.configure_wired_mac_authentication_fail_through(conf.enable_option)
		edit_wired_network.set_load_balancing_field(conf.enable_option)
		edit_wired_network.click_access_accordion()
		edit_wired_network.edit_access_role_based_all_fields(new_role=conf.new_role1,attribute=conf.attribute_ap_name,operator=conf.operator_not_equals,string=conf.string,role=conf.new_role1)
		edit_wired_network.edit_access_role_based_all_fields(new_role=conf.role_name_2,attribute=conf.attribute_arap_features,operator=conf.rule_operator_rule_starts_with,string=conf.Vlan_Rule_String1,role=conf.role_name_2)
		edit_wired_network.edit_access_role_based_all_fields(new_role=conf.role_name_1,attribute=conf.attribute_arap_security,operator=conf.rule_operator_rule_ends_with,string=conf.Vlan_Rule_String2,role=conf.role_name_1)
		edit_wired_network.edit_net_assign_setting()
		self.take_s2_snapshot()
		edit_wired_network = self.NetworkPage.edit_wired_network()
		edit_wired_network.edit_net_assign_setting()
		self.NetworkPage.assert_wired_network()
		self._delete_external_radius_servers()
		# self.NetworkPage.wired_network.click()
		# edit_wired_network.assert_edited_value()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11294_employee_wired_network_security_802_1x_enable(self):
		conf = self.config.config_vars
		self._delete_network_auth_server()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.wired_employee_network_info()
		virtual_lan.select_network_assigned()
		virtual_lan.set_native_vlan(conf.vlan_id_200)
		virtual_lan.create_new_vlan_assignment_rule(conf.rule_operator_rule_equals,conf.Vlan_Rule_String1,conf.Vlan_Id_vlan)
		virtual_lan.create_new_vlan_assignment_rule(conf.rule_operator_default,conf.Vlan_Rule_String2,conf.Vlan_Id_vlan1)
		virtual_lan.create_new_vlan_assignment_rule(conf.rule_operator_rule_not_equals,conf.Vlan_Rule_String3,conf.Vlan_Id_vlan2)
		security_page = virtual_lan.click_on_next()
		access = security_page.click_on_next()
		network_assign = access.click_next()
		network_assign.finish_network_setup()
		edit_wired_network = self.NetworkPage.edit_wired_network()
		edit_wired_network.click_vlans_accordion()
		import time
		time.sleep(5)
		edit_wired_network.set_mode_value(conf.vlan_mode_value)
		edit_wired_network.click_new_vlan_assignment_role_button()
		edit_wired_network.create_new_vlan_assignment_role(attribute=conf.rule_attribute_default,operator = conf.rule_operator_default,string =conf.Vlan_Rule_String4 ,rule_vlan_value = conf.Vlan_Id)
		edit_wired_network.click_new_vlan_assignment_role_button()
		edit_wired_network.create_new_vlan_assignment_role(attribute=conf.rule_attribute_default,operator = conf.rule_operator_rule_equals,string =conf.Vlan_Rule_String4 ,rule_vlan_value = conf.Vlan_Id)
		edit_wired_network.delete_vlan_rules()
		edit_wired_network.delete_vlan_rules()
		edit_wired_network.select_vlan_rule(edit_wired_network.vlan_rule_0)
		edit_wired_network.move_up_or_down_vlan_rule(edit_wired_network.move_selected_rule_down)
		edit_wired_network.select_vlan_rule(edit_wired_network.vlan_rule_3)
		edit_wired_network.move_up_or_down_vlan_rule(edit_wired_network.move_selected_rule_up)
		edit_wired_network.delete_vlan_rules()
		edit_wired_network.delete_vlan_rules()
		edit_wired_network.click_save_settings()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11295_employee_wired_network_security_802_1x_enable(self):
		conf = self.config.config_vars
		self._delete_network_auth_server()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.wired_employee_network_info()
		security_page = virtual_lan.wired_vlan_defaults()
		security_page.wired_employee_security_defaults()
		security_page.configure_wired_802_1x_authentication(conf.Uppercase_Support_Enabled)
		self.browser.assert_drop_down_value(security_page.authentication_server,conf.Authentication_server,'Auth server1 is not set to InternalServer')
		self.browser.assert_text(security_page.reauth_interval,conf.invalid_zero_input,'reauth interval is not set to zero','value')
		self.browser.assert_element(security_page.show_users_link,'zero show users link is not displayed')
		self.browser.assert_element(security_page.zero_users_warning,'Only registered users of type "Employee" will be able to access this networks not displayed')
		security_page.get_and_assert_authentication_server1_dropdown_elements()
		security_page.assert_auth_server1_selected_option(conf.InternalServer)
		security_page.set_authentication_server_1_value(conf.new_server)
		security_page.assert_radius_radio_button()
		security_page.validate_authentication_server_name()
		security_page.assert_auth_server2_internal_server_count_warning()
		security_page.select_auth_server_internalserver('2')
		logger.debug('SecurityPage : asserting load balancing : disabled') 
		self.browser.assert_drop_down_value(security_page.load_balancing,conf.open_roaming_value,'load balancing field is not set to disabled')
		security_page.validate_reauth_interval_field(conf.reauth_intrvl_unit_min)
		security_page.validate_reauth_interval_field(conf.reauth_intrvl_unit_hrs)
		security_page.configure_reauth_interval(conf.max_authentication_failure,conf.reauth_intrvl_unit_min)  
		security_page.add_internal_sever_user()
		self.browser.assert_element(security_page.show_users_link,'zero show users link is not displayed')
		self.browser.assert_element(security_page.zero_users_warning,'Only registered users of type "Employee" will be able to access this networks not displayed')
		security_page.create_internal_server_employee_user()
		self.browser.assert_element(security_page.user_count1,'1 show users link is not displayed')
		self.browser.assert_element(security_page.zero_users_warning,'Only registered users of type "Employee" will be able to access this networks not displayed',False)
		access = security.click_on_next()
		network_assign = access.click_next()
		network_assign.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_wired_network_if_present()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
		