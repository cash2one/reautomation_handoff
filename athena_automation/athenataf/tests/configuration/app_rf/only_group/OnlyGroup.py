import logging
logger = logging.getLogger('athenataf')

from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class OnlyGroup(ConfigurationTest):
	'''
	Test class for 4.1 Only Group of APP RF
	'''

	def test_ath_5785_application(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.creating_different_application_access_rule()
		access.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_5790_edit_rules(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.creating_different_application_access_rule()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_application_service_rules()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_application_service_rules()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_5791_delete_rules(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.creating_different_application_access_rule()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.delete_application_service_rules()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_deleted_application_service_rules()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_5786_application_category(self):
		conf = self.config.config_vars
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security._set_phrase()
		access = security.click_on_next()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_rule_with_webtegory_shopping_permit()
		access.create_rule_with_webtegory_travel_deny()
		access.finish_network_setup()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9038_check_the_options(self):
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security._set_phrase()
		access = security.click_on_next()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.click_add_rule_plus_button()
		access.asserts_sevices_options()
		access.validate_application_throttening_option()
		access.assert_dscp_tag_options()
		
	def test_ath_5784_application_category(self):
		conf = self.config.config_vars
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security._set_phrase()
		access = security.click_on_next()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_rule_with_appcategory_antivirus_permit()
		access.create_rule_with_appcategory_collaboration_deny()
		access.create_rule_with_appcategory_gaming_allow()
		access.finish_network_setup()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_5792_move_rules(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.guest_network_info()
		security  = vlan.use_vlan_defaults()
		access_page = security.click_on_next()
		access_page.network_based.click()
		access_page.create_external_captive_portal()
		access_page.create_vlan_rule_assignment()
		access_page.create_h323_to_all_destinations()
		access_page.create_single_vlan_rule_calea()
		access_page.assert_rules_before_moving()
		access_page.access_rule_down_0.click()
		access_page.assert_rules_after_moving()
		access_page.finish_network_setup()
		self.take_s2_snapshot()    
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_5789_check_other_rules(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		security = self.LeftPanel.go_to_security()
		security.delete_authentication_server()
		self.take_s1_snapshot()
		self.LeftPanel.go_to_network_page()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security._set_phrase()
		access = security.click_on_next()
		access.click_network_access()
		access._add_new_rule()
		access.assert_network_based_rule_type_options()
		access.click_role_access()
		access.click_on_role_based_add_rule()
		access.assert_role_based_rule_type_options()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		security = self.LeftPanel.go_to_security()
		security.delete_authentication_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_5787_iap4_web_reputation(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.click_on_next()
		security._set_phrase()
		access = security.click_on_next()
		access.click_network_access()
		access.click_add_rule_plus_button()
		logger.debug('AccessPage : Clicking on Application cattegory radio')
		access.ac_app_category2.click()
		access.assert_options(logoption = True, dscptag = True, blacklist = True, priority_802 = True)
		logger.debug('AccessPage : Clicking on Web reputation radio')
		access.webreputation.click()
		access.select_slider()
		access.select_sites('Trustworthy WRI > 81')
		logger.debug('AccessPage : Clicking on save settings')
		access.save_settings.click()
		access.click_add_rule_plus_button()
		logger.debug('AccessPage : Clicking on Web reputation radio')
		access.webreputation2.click()
		logger.debug('AccessPage : Clicking on slider')
		access.selectorreputation1.click()
		logger.debug('AccessPage : Selecting Deny')
		access.action_role3.set(conf.action_deny)
		access.select_sites('Suspicious WRI 21-40')
		logger.debug('AccessPage : Clicking on save settings')
		access.save_button_1.click()
		access.finish_network_setup()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_6130_ui_check(self):
		'''
		create a test class
		'''
		self.LeftPanel.go_to_network_page()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security._set_phrase()
		access = security.click_on_next()
		access.assert_access_disabled_app_rf_rule('network_based')
		
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_wired_network()
		security= virtual_lan.wired_network_vlan_defaults()
		access = security.wired_security_defaults()
		access.assert_access_disabled_app_rf_rule('network_based')
		
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security._set_phrase()
		access = security.click_on_next()
		access.assert_access_disabled_app_rf_rule('role_based')
		
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_wired_network()
		security= virtual_lan.wired_network_vlan_defaults()
		access = security.wired_security_defaults()
		access.assert_access_disabled_app_rf_rule('role_based')

	def test_ath_5788_global_test(self):
		conf = self.config.config_vars
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.NetworkPage.delete_specific_network_if_present(conf.network_name1)
		self.NetworkPage.delete_specific_network_if_present(conf.network_name2)
		self.NetworkPage.delete_specific_network_if_present(conf.network_name3)
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_new_network(basic_info.wired,conf.network_name1,basic_info.employee)
		security = virtual_lan.wired_network_vlan_defaults()
		access = security.click_on_next()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_rule_with_appcategory_antivirus_permit()
		access.create_rule_with_appcategory_collaboration_deny()
		access.create_rule_with_appcategory_gaming_allow()
		network_assignment_page = access.click_next()
		network_assignment_page.finish_network_setup()

		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_new_network(basic_info.wired,conf.network_name2,basic_info.employee)
		security = virtual_lan.wired_network_vlan_defaults()
		access = security.click_on_next()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.creating_different_application_access_rule()
		network_assignment_page = access.click_next()
		network_assignment_page.finish_network_setup()

		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_new_network(basic_info.wired,conf.network_name3,basic_info.employee)
		security = virtual_lan.wired_network_vlan_defaults()
		access = security.click_on_next()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_rule_with_webtegory_shopping_permit()
		access.create_rule_with_webtegory_travel_deny()
		network_assignment_page = access.click_next()
		network_assignment_page.finish_network_setup()

		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_new_network(basic_info.wired,conf.Network_name,basic_info.employee)
		security = virtual_lan.wired_network_vlan_defaults()
		access = security.click_on_next()
		access.click_network_access()
		access.click_add_rule_plus_button()
		logger.debug('AccessPage : Clicking on Application cattegory radio')
		access.ac_app_category2.click()
		access.assert_options(logoption = True, dscptag = True, blacklist = True, priority_802 = True)
		logger.debug('AccessPage : Clicking on Web reputation radio')
		access.webreputation.click()
		access.select_slider()
		access.select_sites('Trustworthy WRI > 81')
		logger.debug('AccessPage : Clicking on save settings')
		access.save_settings.click()
		access.click_add_rule_plus_button()
		logger.debug('AccessPage : Clicking on Web reputation radio')
		access.webreputation2.click()
		logger.debug('AccessPage : Clicking on slider')
		access.selectorreputation1.click()
		logger.debug('AccessPage : Selecting Deny')
		access.action_role3.set(conf.action_deny)
		access.select_sites('Suspicious WRI 21-40')
		logger.debug('AccessPage : Clicking on save settings')
		access.save_button_1.click()
		network_assignment_page = access.click_next()
		network_assignment_page.finish_network_setup()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.NetworkPage.delete_specific_network_if_present(conf.network_name1)
		self.NetworkPage.delete_specific_network_if_present(conf.network_name2)
		self.NetworkPage.delete_specific_network_if_present(conf.network_name3)
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()		
		
	def test_ath_13345_check_app_rf_rule_created_under_role_based_network(self):
		conf = self.config.config_vars
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security._set_phrase()
		access = security.click_on_next()
		access.click_role_access()
		access.create_role()
		access.delete_default_rule_if_present()	
		access.create_rule_with_appcategory_antivirus_permit()
		access.create_rule_with_webtegory_travel_deny()
		access.create_rule_with_application_adobe_update_deny()
		access.create_rule_with_web_reputation_Selecting_Deny()
		access.finish_network_setup()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_13346_check_apprf_rules_created_under_security_roles(self):
		conf = self.config.config_vars
		security = self.LeftPanel.go_to_security()
		security.go_to_roles()
		security.create_app_rf_rules()	

	def test_ath_9037_Application_category_and_application_are_not_supported_on_all_platform(self):
		conf = self.config.config_vars
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security._set_phrase()
		access = security.click_on_next()
		access.click_network_access()
		access.click_add_rule_plus_button()
		access.ac_app_category2.click()
		logger.debug('Access Page : Asserting warning message app category rules are not supported on all the platforms.')
		if not access.supported_flatform_warning :
			raise AssertionError('Warning message :rules are not supported on all the platforms is not displayed.')
		