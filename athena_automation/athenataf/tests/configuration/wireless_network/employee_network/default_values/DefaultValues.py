import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class DefaultValues(ConfigurationTest):
	'''
	Test class for Default Values of employee network.
	'''

	def test_ath_8308_default_value_vlan(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		virtual_lan.assert_default_value_vlan()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8312_default_vlan_dynamic(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		virtual_lan.check_dynamic_vlan_attribute_list()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_8313_default_value_security(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.assert_security_level_default_options()
		security.assert_key_management_values()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		
	def _delete_network_auth_server(self):
		'''
		Delete wireless and auth servers 
		'''
		self.NetworkPage.delete_network_if_present()
		self.NetworkPage.delete_wired_network_if_present()
		security_page = self.LeftPanel.go_to_security() 
		security_page.delete_authentication_server()
		security_page.delete_authentication_server2()
		self.LeftPanel.go_to_network_page()
		
	def test_ath_11762_default_value_security_enterprise_auth_server_1_external_radius(self):
		self._delete_network_auth_server()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_wpa_2_enterprise_option()
		security.create_external_radius_server_in_auth_server_one()
		security.assert_authentication_server2_dropdown()
		security.assert_auth_survivability_dropdown()
		security.assert_accounting_dropdown()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		


	def test_ath_8314_default_value_security_enterprise(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.assert_security_level_default_options(default=True)
		security.assert_key_management_values(personal=True)
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_8315_default_value_security_open(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.assert_security_level_default_options(open_level=True)
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_8316_default_value_security_personal(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.assert_default_fields_security_personal()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()



	def test_ath_8310_default_value_vlan_static(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		virtual_lan.assert_default_value_vlan_static()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8317_default_value_security_personal_wpa_wpa2(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level()
		security.assert_default_fields_security_personal(wpa_wpa2=True)
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8318_default_value_security_personal_wpa_personal(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level()
		security.assert_default_fields_security_personal(wpa=True,skip_roaming=True)
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8324_default_value_security_enterprise_wpa2(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8401_default_value_security_enterprise_wpa_wpa2(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(wpa_wpa2=True)
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8402_default_value_security_enterprise_wpa(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(wpa=True,skip_roaming_okc=True)
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8405_default_value_security_enterprise_dynamic_wep(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(skip_roaming_okc=True,dynamic_wep=True,assert_session_key=True)
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8406_default_feilds_security_enterprise_mac_enabled(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_feilds_security_enterprise_mac_enabled()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8407_default_feilds_security_personal_mac_enabled(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.assert_default_feilds_security_mac_enabled()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8408_default_feilds_security_open_mac_enabled(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(open=True)
		security.assert_default_feilds_security_mac_enabled()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8409_default_feilds_security_enterprise_termination_enabled(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_feilds_security_termination_enabled()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()        


	def test_ath_8410_default_feilds_security_enterprise_blacklisting_enabled(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_feilds_security_blacklisting_enabled()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8411_default_feilds_security_personal_blacklisting_enabled(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level()
		security.assert_default_feilds_security_blacklisting_enabled()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8412_default_feilds_security_open_blacklisting_enabled(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(open=True)
		security.assert_default_feilds_security_blacklisting_enabled()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8404_default_feilds_security_personal_static_wep(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level()
		security.assert_default_feilds_security_static_wep()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8275_employee_default_value_advanced_settings(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		basic_info.employee.click()
		basic_info.click_advanced_settings()
		basic_info.assert_dropdown_default_values(broadcasefiltering=True,dtiminterval=True,multicastratetransmission=True,dynamicmulticast=True,content_filtering=True,band=True)
		basic_info.assert_broadcasefiltering_dropdown_values()
		basic_info.assert_dtiminterval_dropdown_options()
		basic_info.assert_multicastratetransmission_dropdown_values()
		basic_info.assert_dynamicmulticast_dropdown_values()
		basic_info.assert_content_filtering_dropdown()
		basic_info.assert_band_dropdown()
		basic_info.assert_transmit_rates_dropdown_default_values(ghz24_min=True,ghz24_max=True,ghz5_min=True,ghz5_max=True)
		basic_info.assert_2_Ghz_dropdown_options('min')
		basic_info.assert_2_Ghz_dropdown_options('max')
		basic_info.assert_5_Ghz_dropdown_options('min')
		basic_info.assert_5_Ghz_dropdown_options('max')
		basic_info.assert_local_probe_request_threshold()
		basic_info.assert_max_client_threshold()
		basic_info.assert_can_be_used_without_uplink()
		basic_info.assert_disable_ssid()
		basic_info.assert_hide_ssid()
		basic_info.assert_inactivity_timeout()
		basic_info.assert_dmo_channel_utilization_threshold()
		basic_info.assert_wmm_share_value()
		basic_info.assert_bandwidth_limits_airtime_checkbox()
		# basic_info.assert_bandwidth_limits_each_radio_checkbox()
		basic_info.click_airtime_checkbox()
		basic_info.assert_airtime_textbox_empty()
		# basic_info.click_each_radio_checkbox()
		# basic_info.assert_each_radio_textbox_empty()
		
	def test_ath_11840_default_value_security_open_mac_enabled_auth_server_1_external_radius(self):
		self._delete_network_auth_server()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(open=True)
		security.configure_auth_server_settings(mac_authentication=True)
		security.create_external_radius_server_in_auth_server_one()
		security.assert_authentication_server2_dropdown()
		security.assert_accounting_dropdown()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()


	def test_ath_11823_default_value_security_personal_mac_enabled_auth_server_1_external_radius(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.set_security_key_management('WPA-2 Personal')
		security.enable_mac_authentication1()
		security.create_external_radius_server_in_auth_server_one()
		security.assert_authentication_server2_dropdown()
		security.assert_accounting_dropdown()
		security.network_create_cancel.click()
		self._delete_network_auth_server()
		
	def test_ath_11824_default_value_security_personal_mac_enabled_auth_server_1_external_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.set_security_key_management('WPA-2 Personal')
		security.enable_mac_authentication1()
		security.create_external_radius_server_in_auth_server_one()
		security.configure_auth_server_settings(accounting_enable = True)
		security.assert_accounting_mode_and_interval()
		security.set_authentication_server_to_internalserver()
		self.browser.assert_element(security.accounting,'Accounting field is visible', False)
		self.browser.assert_element(security.accounting_interval,'Accounting Interval field is visible', False)
		security.network_create_cancel.click()
		self._delete_network_auth_server()
		
	def test_ath_11764_default_value_security_enterprise_auth_server1_external_radius_auth_server2_internal(self):

		self.NetworkPage.delete_network_if_present()
		security = self.LeftPanel.go_to_security()
		security.delete_2_external_servers()
		self.take_s1_snapshot()
		security = self.LeftPanel.go_to_security()
		security.create_authentication_server_radius()
		self.LeftPanel.go_to_network_page() 
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_authentication_server_1_value(self.config.config_vars.auth_server_name)
		security.set_authentication_server_2_value(self.config.config_vars.InternalServer)
		security.assert_load_balancing()
		security.get_and_assert_load_balancing_dropdown_elements()
		security.assert_internal_server_link()
		security.network_create_cancel.click()
		self.take_s2_snapshot()
		security = self.LeftPanel.go_to_security()
		security.delete_2_external_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11765_default_value_security_enterprise_auth_server1_and_auth_server2_external_radius(self):
		self.NetworkPage.delete_network_if_present()
		security = self.LeftPanel.go_to_security()
		security.delete_2_external_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.create_external_radius_server_in_auth_server_one()
		security.assert_authentication_server2_survivability_accounting()
		security.create_external_radius_server_in_auth_server_two()
		security.get_and_assert_authentication_server2_dropdown_elements()
		security.get_and_assert_accounting_dropdown_elements()
		security.get_and_assert_auth_survivability_dropdown_elements()
		security.network_create_cancel.click()
		self.take_s2_snapshot()
		security = self.LeftPanel.go_to_security()
		security.delete_2_external_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_11843_default_value_security_open_mac_auth_enabled_auth_server_1_and_auth_server_2_external(self):
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(open=True)  
		security.set_mac_authentication_value('Enabled')
		security.create_external_radiuds_server('1')
		self.browser.assert_drop_down_value(security.authentication_server_2,conf.select,'Authentication Server2 is not selected as --Select-- by default')
		security.create_external_radiuds_server('2')
		security.get_and_assert_accounting_dropdown_elements()
		security.get_and_assert_authentication_server2_dropdown_elements()
		security.network_create_cancel.click()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	
	def test_ath_11842_default_value_security_open_mac_auth_enabled_auth_server_1_external_as2_internal(self):
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level()  
		security.set_mac_authentication_value('Enabled')
		security.create_external_radiuds_server('1')
		self.browser.assert_drop_down_value(security.authentication_server_2,conf.select,'Authentication Server2 is not selected as --Select-- by default')
		security.create_external_radiuds_server('2')
		security.get_and_assert_accounting_dropdown_elements()
		security.get_and_assert_authentication_server2_dropdown_elements()
		security.network_create_cancel.click()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_11839_default_value_security_personal_mac_auth_enabled_auth_server_1_external_as2_internal(self):
		conf = self.config.config_vars

		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level()
		security.set_mac_authentication_value('Enabled')
		security.create_external_radiuds_server('1')
		security.authentication_server_2.set(conf.InternalServer)
		security.assert_load_balancing()
		security.get_and_assert_load_balancing_dropdown_elements()
		security.assert_internal_server_link()
		security.network_create_cancel.click()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()	
	
	def test_ath_11841_default_value_security_open_mac_enabled_auth_server_1_external_accounting_enabled(self):
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(open = True)
		security.enable_mac_authentication() 
		security.create_external_radiuds_server('1')
		security.accounting.set(conf.accounting_enabled)
		self.browser.assert_text(security.accounting_interval,'','Accounting Internal is not empty','value')
		security.authentication_server_2.set(conf.InternalServer)
		security.assert_accounting_accounting_interval(visibile=False)
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_11747_default_value_security_enterprise_auth_server1_external_radius_auth_survivabilty_enabled(self):
		self._delete_network_auth_server()
		security = self.LeftPanel.go_to_security()
		security.create_authentication_server_radius()
		conf = self.config.config_vars
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_authentication_server_1_value(conf.auth_server_name)
		security.enable_authentication_survivability()
		logger.debug("SecurityPage : Writing valid number in 'Cache Timeout' text-box.")
		self.browser.assert_text(security.cache_timeout,conf.cache_timeout_default,'Cache timeout is not set to 19426'
                                                                                   '444264','value')
		security.set_authentication_server_2_value(conf.internal_server)
		logger.debug('NetworkPage: Securiity : Asserting Auth survivabilty field ')
		self.browser.assert_element(security.auth_survivability,'auth survivability is visible on ui', False)
		logger.debug('NetworkPage: Securiity : Selecting --select-- for auth server 2')
		security.authentication_server_2.set(conf.select)
		security.setting_termination_option(True)
		logger.debug('NetworkPage: Securiity : Asserting Auth survivabilty field ')
		self.browser.assert_element(security.auth_survivability,'auth survivability is visible on ui', False)
		security.setting_termination_option(False)
		security.set_mac_authentication_options()
		logger.debug('NetworkPage: Securiity : Asserting Auth survivabilty field ')
		self.browser.assert_element(security.auth_survivability,'auth survivability is visible on ui', False)
		security = self.LeftPanel.go_to_security()
		self._delete_network_auth_server()

	def test_ath_11838_default_value_security_enterprise_auth_server1_external_radius_auth_survivabilty_enabled(self):
		self._delete_network_auth_server()
		security = self.LeftPanel.go_to_security()
		security.create_authentication_server_radius()
		conf = self.config.config_vars
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level()
		security.enable_mac_authentication()
		security.set_authentication_server_1_value(conf.auth_server_name)
		security.set_authentication_server_2_value(conf.InternalServer)
		logger.debug('SecurityPage : asserting show user link')	
		self.browser.assert_element(security.show_users_link,'zero show users link is not displayed')
		logger.debug('SecurityPage : asserting load balancing : disabled')	
		self.browser.assert_drop_down_value(security.load_balancing,conf.open_roaming_value,'load balancing field is not set to disabled')
		security = self.LeftPanel.go_to_security()
		self._delete_network_auth_server()
	
	def test_ath_11725_employee_default_value_advanced_settings(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		basic_info.employee.click()
		basic_info.click_advanced_settings()
		basic_info.assert_dropdown_default_values(broadcasefiltering=True,dtiminterval=True,multicastratetransmission=True,dynamicmulticast=True,content_filtering=True,band=True)
		basic_info.assert_broadcasefiltering_dropdown_values()
		basic_info.assert_dtiminterval_dropdown_options()
		basic_info.assert_multicastratetransmission_dropdown_values()
		basic_info.assert_dynamicmulticast_dropdown_values()
		basic_info.assert_content_filtering_dropdown()
		basic_info.assert_band_dropdown()
		basic_info.assert_transmit_rates_dropdown_default_values(ghz24_min=True,ghz24_max=True,ghz5_min=True,ghz5_max=True)
		basic_info.assert_2_Ghz_dropdown_options('min')
		basic_info.assert_2_Ghz_dropdown_options('max')
		basic_info.assert_5_Ghz_dropdown_options('min')
		basic_info.assert_5_Ghz_dropdown_options('max')
		basic_info.assert_local_probe_request_threshold()
		basic_info.assert_max_client_threshold()
		basic_info.assert_can_be_used_without_uplink()
		basic_info.assert_disable_ssid()
		basic_info.assert_hide_ssid()
		basic_info.assert_inactivity_timeout()
		basic_info.assert_dmo_channel_utilization_threshold()
		basic_info.assert_wmm_share_value()
		basic_info.assert_bandwidth_limits_airtime_checkbox()
		basic_info.assert_bandwidth_limits_each_radio_checkbox()
		basic_info.click_airtime_checkbox()
		basic_info.assert_airtime_textbox_empty()
		basic_info.click_each_radio_checkbox()
		basic_info.assert_each_radio_textbox_empty()

	def test_ath_11726_default_value_vlan(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		virtual_lan.assert_default_value_vlan()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11727_default_value_vlan_static(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		virtual_lan.assert_default_value_vlan_static()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11728_default_vlan_dynamic(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		virtual_lan.check_dynamic_vlan_attribute_list()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11729_default_value_security(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.assert_security_level_default_options()
		security.assert_key_management_values()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		
	def test_ath_11730_default_value_security_enterprise(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.assert_security_level_default_options(default=True)
		security.assert_key_management_values(personal=True)
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11731_default_value_security_open(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.assert_security_level_default_options(open_level=True)
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11732_default_value_security_personal(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.assert_default_fields_security_personal()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11733_default_value_security_personal_wpa_wpa2(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level()
		security.assert_default_fields_security_personal(wpa_wpa2=True)
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11734_default_value_security_personal_wpa_personal(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level()
		security.assert_default_fields_security_personal(wpa=True,skip_roaming=True)
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11735_default_value_security_enterprise_wpa2(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(wpa=True)
		logger.debug('Checking for User Link')
		self.browser.assert_element(self.show_users_link, "show users link not present")
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11736_default_value_security_enterprise_wpa_wpa2(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(wpa_wpa2=True)
		logger.debug('Checking for User Link')
		self.browser.assert_element(self.show_users_link, "show users link not present")
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11737_default_value_security_enterprise_wpa(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(wpa=True,skip_roaming_okc=True)
		logger.debug('Checking for User Link')
		self.browser.assert_element(self.show_users_link, "show users link not present")
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11738_default_feilds_security_personal_static_wep(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level()
		security.assert_default_feilds_security_static_wep()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11739_default_value_security_enterprise_dynamic_wep(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(skip_roaming_okc=True,dynamic_wep=True,assert_session_key=True)
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11740_default_feilds_security_enterprise_mac_enabled(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_feilds_security_enterprise_mac_enabled()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11741_default_feilds_security_personal_mac_enabled(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.assert_default_feilds_security_mac_enabled()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_11742_default_feilds_security_open_mac_enabled(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(open=True)
		security.assert_default_feilds_security_mac_enabled()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_11743_default_feilds_security_enterprise_termination_enabled(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_feilds_security_termination_enabled()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()        

	def test_ath_11744_default_feilds_security_enterprise_blacklisting_enabled(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_feilds_security_blacklisting_enabled()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11745_default_feilds_security_personal_blacklisting_enabled(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level()
		security.assert_default_feilds_security_blacklisting_enabled()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11746_default_feilds_security_open_blacklisting_enabled(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(open=True)
		security.assert_default_feilds_security_blacklisting_enabled()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11724_default_value_basic_info(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		inner_left_panel = self.TopPanel.click_slider_icon()
		create_group_page = inner_left_panel.add_group()
		create_group_page.create_group_with_vc1('group1')
		inner_left_panel.select_group1()
		network_page = self.LeftPanel.go_to_network_page()
		basic_info = network_page.create_new_network()
		basic_info.assert_basic_info_page_all_fields_and_default_values()
		inner_left_panel = self.TopPanel.click_slider_icon()
		manage_group_page = inner_left_panel.manage_groups()
		manage_group_page.move_virtual_controller_group1()
		manage_group_page1 = inner_left_panel.manage_groups()
		manage_group_page1.delete_group1()
		self.take_s2_snapshot()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11763_Default_value_security_enterprise_auth_server_1_external_radius_accounting_enabled(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		security = self.LeftPanel.go_to_security()
		security.create_new_server()
		security.create_authentication_server_radius()
		self.LeftPanel.go_to_network_page()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_wpa_2_enterprise_option()
		security.set_authentication_server_1_value(self.config.config_vars.auth_server_value)
		security.accounting.set('Enable')
		self.browser.assert_text(security.accounting_interval,'','Accounting Internal is not empty','value')
		security.setting_termination_option(True)
		self.browser.assert_element(security.accounting_disabled,'Accounting dropdown is not disabled', False)
		self.browser.assert_element(security.accounting_interval_disabled,'Accounting Interval is not disabled', False)
		security.setting_termination_option()
		security.set_authentication_server_to_internalserver()
		self.browser.assert_element(security.accounting,'Accounting field is visible', False)
		self.browser.assert_element(security.accounting_interval,'Accounting Interval field is visible', False)
		access = security.use_security_default()
		access.finish_network_setup()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()		
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()