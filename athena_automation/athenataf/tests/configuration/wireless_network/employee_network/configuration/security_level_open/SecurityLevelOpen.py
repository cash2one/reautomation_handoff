import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class SecurityLevelOpen(ConfigurationTest):
	'''
		Test class for services test cases of SecurityLevelOpen.
	'''

	def test_ath_9335_field_validation(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_and_assert_employee_network()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_roaming_to_enable()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_network_changes()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_9343_create_network_with_blacklisting_max_auth_failure(self):
 		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_and_assert_employee_network()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_blacklisting_and_max_authentication_failure()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_network_blacklist_max_auth_changes()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9336_edit_open_employee_network_with_802r_roaming_mac_authentication_reauth_interv(self):
 		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_802_roaming_dropdown()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.change_roaming_mac_authentication_settings()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_roaming_mac_authentication_changes()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9337_edit_open_employee_network_with_authentication_server_1(self):
 		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_mac_authentication_dropdown()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.change_to_external_server()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_authentication_server_changes()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_external_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9338_edit_open_employee_network_with_authentication_server_2(self):
 		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_mac_authentication_dropdown()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.change_auth_server_2_to_external_server()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.change_delimiter_uppercase_rauth()
		edit_network_page = self.NetworkPage.edit_network()		
		edit_network_page.assert_authentication_server_delimeter_uppercase_reauth_changes()
		self.NetworkPage.delete_network_if_present()						
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9339_edit_open_employee_network_with_accounting_interval_accounting_load_balancing_de(self):
 		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_mac_authentication_auth_server_delimeter_uppercase_options()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_accounting_delimeter_loadbalance_uppercase()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.verify_accounting_delimeter_loadbalance_uppercase_changes()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9341_edit_open_employee_network_with_accounting_interval_uppercase_support_accounting(self):
 		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_mac_authentication_auth_server_accounting_options()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_accounting_uppercase_auth_server()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.verify_accounting_uppercase_auth_server()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9340_edit_open_employee_network_with_blacklisting_authentication_server_2_accounting_accounting_interval(self):
 		self.take_s1_snapshot()
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.set_security_level_open()
		security.enable_mac_authentication()
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.enable_accounting_interval(conf.valid_accounting)
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_blacklisting_option(conf.blacklisting_value)
		edit_network_page.authentication_server_2.set(conf.authentication_server_value)
		edit_network_page.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		self.browser.assert_drop_down_value(edit_network_page.authentication_server_2, conf.edit_Authentication_server, "Authentication server not set to 'InternalServer'")
		self.browser.assert_drop_down_value(edit_network_page.blacklisting, conf.blacklisting_value, "Blacklisting is not set to 'Enabled'")
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9344_edit_open_employee_network_with_blacklisting_max_authentication_failure(self):
 		self.take_s1_snapshot()
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.set_security_level_open()
		security.configure_blacklisting('Enable',conf.max_authentication_failure)
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_blacklisting_option()
		edit_network_page.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		self.browser.assert_drop_down_value(edit_network_page.blacklisting, conf.disabled_option, "Blacklisting is not set to 'Disabled'")
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def _delete_network_auth_server(self):
		'''
		Delete wireless and auth servers 
		'''
		self.NetworkPage.delete_network_if_present()
		self.NetworkPage.delete_wired_network_if_present()
		import time
		time.sleep(5)
		security_page = self.LeftPanel.go_to_security()
		time.sleep(10)
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_authentication_server()
		self.browser.refresh()
		security_page.delete_authentication_server2()
		self.browser.refresh()
		self.LeftPanel.go_to_network_page()

	def test_ath_9342_edit_open_employee_network_with_disable_ssid_accounting_int(self):
		conf = self.config.config_vars
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(open = True)
		security.enable_mac_authentication()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.enable_accounting_interval('60')
		security.set_load_balancing_field(conf.blacklisting_option)
		security.configure_auth_server_settings(mac_authentication = True)
		security.configure_reauth_interval(conf.reauth_value,conf.reauth_intrvl_unit_min)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		edit_network.configure_mac_authentication()
		edit_network.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		logger.debug('EditNetworkPage: Security Accordion:Asserting Mac Authentication : Disabled')
		self.browser.assert_drop_down_value(self.mac_authentication,conf.disabled_option, "MAC Authentication option is not selected to 'Disabled'")
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11930_field_validation(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_roaming_to_enable()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()

		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_network_changes()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
			
	def test_ath_11931_edit_open_employee_network_with_802r_roaming_mac_authentication_reauth_interv(self):
 		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_802_roaming_dropdown()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()

		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.change_roaming_mac_authentication_settings()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_roaming_mac_authentication_changes()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11932_edit_open_employee_network_with_authentication_server_1(self):
 		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_mac_authentication_dropdown()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.change_to_external_server()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_authentication_server_changes()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_external_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		# self.clear()
		
	def test_ath_11933_edit_open_employee_network_with_authentication_server_2(self):
 		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_mac_authentication_dropdown()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.change_auth_server_2_to_external_server()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.change_delimiter_uppercase_rauth()
		edit_network_page = self.NetworkPage.edit_network()		
		edit_network_page.assert_authentication_server_delimeter_uppercase_reauth_changes()
		self.NetworkPage.delete_network_if_present()						
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		# self.clear('IAP_1')
		
	def test_ath_11934_edit_open_employee_network_with_accounting_interval_accounting_load_balancing_de(self):
 		self.take_s1_snapshot()
		self._delete_network_auth_server()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_mac_authentication_auth_server_delimeter_uppercase_options()
		access.finish_network_setup()

		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_accounting_delimeter_loadbalance_uppercase()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.verify_accounting_delimeter_loadbalance_uppercase_changes()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_11935_edit_open_employee_network_with_blacklisting_authentication_server_2_accounting_accounting_interval(self):
 		self.take_s1_snapshot()
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.set_security_level_open()
		security.enable_mac_authentication()
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.enable_accounting_interval(conf.valid_accounting)
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_blacklisting_option(conf.blacklisting_value)
		edit_network_page.authentication_server_2.set(conf.authentication_server_value)
		edit_network_page.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		self.browser.assert_drop_down_value(edit_network_page.authentication_server_2, conf.edit_Authentication_server, "Authentication server not set to 'InternalServer'")
		self.browser.assert_drop_down_value(edit_network_page.blacklisting, conf.blacklisting_value, "Blacklisting is not set to 'Enabled'")
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		# self.clear()

	def test_ath_11936_edit_open_employee_network_with_accounting_interval_uppercase_support_accounting(self):
 		self.take_s1_snapshot()
		self._delete_network_auth_server()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.mac_authentication.set(self.config.config_vars.enable_option)
		logger.debug('EditNetworkPage : Setting new external server to Authentication Server 1')
		security.create_external_radiuds_server('1')
		logger.debug('EditNetworkPage : Setting internal server to Authentication Server 2')
		security.select_auth_server_internalserver('2')
		security._set_phrase()
		access = security.move_to_next_page()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.create_external_radiuds_server('2')
		edit_network_page.set_uppercase_support_option('Enabled')
		edit_network_page.configure_auth_server_settings(acc_interval = True, accounting_enable = True)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.check_security_configurations_for_external_radius_server2()
		edit_network_page.assert_auth_server_settings(accounting_enable = True)
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		# self.clear()

	def test_ath_11937_edit_open_employee_network_with_disable_ssid_accounting_int(self):
		conf = self.config.config_vars
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(open = True)
		security.enable_mac_authentication()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.enable_accounting_interval('60')
		security.set_load_balancing_field(conf.blacklisting_option)
		security.configure_auth_server_settings(mac_authentication = True)
		security.configure_reauth_interval(conf.reauth_value,conf.reauth_intrvl_unit_min)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		edit_network.configure_mac_authentication()
		edit_network.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		logger.debug('EditNetworkPage: Security Accordion:Asserting Mac Authentication : Disabled')
		self.browser.assert_drop_down_value(edit_network.mac_authentication,conf.disabled_option, "MAC Authentication option is not selected to 'Disabled'")
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11938_create_network_with_blacklisting_max_auth_failure(self):
 		self.take_s1_snapshot()
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_blacklisting_and_max_authentication_failure()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_network_blacklist_max_auth_changes()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		# self.clear()
		
	def test_ath_11939_edit_open_employee_network_with_blacklisting_max_authentication_failure(self):

		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.set_security_level_open()
		security.configure_blacklisting('Enable',conf.max_authentication_failure)
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_blacklisting_option()
		edit_network_page.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		self.browser.assert_drop_down_value(edit_network_page.blacklisting, conf.disabled_option, "Blacklisting is not set to 'Disabled'")
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()