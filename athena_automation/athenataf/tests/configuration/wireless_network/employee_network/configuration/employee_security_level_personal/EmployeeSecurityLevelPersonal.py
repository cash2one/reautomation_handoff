import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest
import time
class EmployeeSecurityLevelPersonal(ConfigurationTest):
	'''
	Test class for Employee Security Level Personal testcases.
	'''

	def test_ath_9311_create_personal_wpa_2_personal_employee_network_with_passphrase(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9312_create_personal_wpa_2_personal_employee_network_with_broadcast_filtering_dtim_in(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info_with_advanced_settings_broadcasefiltering_dtiminterval()
		security = vlan_obj.set_static_vlan_defaults()
		access = security.enable_80211r_roaming()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.assert_broadcasefiltering_dtiminterval('ARP' , '3 beacons')
		edit_network_page.click_vlans_accordion()
		edit_network_page.click_security_accordion()
		edit_network_page.check_security_configurations()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9313_edit_personal_wpa_2_personal_employee_network_with_broadcast_filtering_dtim_in(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info_with_advanced_settings_broadcasefiltering_dtiminterval()
		security = vlan_obj.use_vlan_defaults()
		access = security.enable_80211r_roaming()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.assert_broadcasefiltering_dtiminterval('ARP' , '3 beacons')
		edit_network_page.edit_advanced_settings()
		edit_network_page.click_security_accordion()
		edit_network_page.check_security_configurations()
		edit_network_page.edit_security_configurations()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.assert_broadcasefiltering_dtiminterval('ALL' , '7 beacons')
		edit_network_page.click_security_accordion()
		edit_network_page.check_security_configurations1()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_9314_edit_personal_wpa_2_personal_employee_network_with_broadcast_filtering_dtim_interval(self):
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings()
		security = vlan_obj.use_vlan_defaults()
		security.enable_mac_authentication()
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.edit_advanced_settings_default()
		edit_network_page.click_security_accordion()
		edit_network_page.create_external_radiuds_server('1')
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.assert_broadcasefiltering_dtiminterval('Disabled' , '1 beacon')
		edit_network_page.click_security_accordion()
		edit_network_page.check_security_configurations_for_external_radius_server()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self._delete_external_radius_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9315_edit_personal_wpa_2_personal_employee_network_with_authentication_server_2_delim(self):
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.enable_mac_authentication()
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.create_external_radiuds_server('1')
		edit_network_page.create_external_radiuds_server('2')
		edit_network_page.edit_security_configurations_external_radiuds_server2()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.check_security_configurations_for_external_radius_server2()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self._delete_external_radius_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9322_edit_personal_wpa_2_personal_employee_network_with_best_effort_wmm_share_static(self):
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.set_besteffort_wmm_share()
		edit_network_page.click_vlans_accordion()
		edit_network_page.set_static_vlan()
		edit_network_page.click_security_accordion()
		edit_network_page.enable_mac_authentication()
		edit_network_page.create_external_radiuds_server('1')
		edit_network_page.create_external_radiuds_server('2')
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.check_security_configurations_for_two_external_radius_servers()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self._delete_external_radius_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9323_edit_personal_wpa_2_personal_employee_network_with_best_effort_wmm_share_default(self):
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_besteffort_wmm_share()
		security = vlan_obj.use_vlan_defaults()
		access = security.enable_mac_authentication()
		security.create_external_radiuds_server('1')
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.set_besteffort_wmm_share_default()
		edit_network_page.click_vlans_accordion()
		edit_network_page.click_security_accordion()
		edit_network_page.select_internalserver()
		edit_network_page.checking_for_authentication_server2_visibility()
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_vlans_accordion()
		edit_network_page.click_security_accordion()
		edit_network_page.checking_for_authentication_server()
		edit_network_page.checking_for_authentication_server2_visibility()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self._delete_external_radius_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9325_edit_personal_wpa_2_personal_employee_network_with_video_wmm_share(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_video_wmm_share()
		security = vlan_obj.use_vlan_defaults()
		access = security.set_both_wpa_2_wpa_64passphrase_format()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.set_video_wmm_share_default()
		edit_network_page.click_security_accordion()
		edit_network_page.edit_both_wpa_2_wpa_64passphrase_format()
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.checking_key_managementpassphrase_format()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9326_create_personal_static_wep_employee_network_with_voice_wmm_share_key_management(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_voice_wmm_share()
		security = vlan_obj.use_vlan_defaults()
		security.set_static_wep_Tx_key()
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.check_static_wep_Tx_key()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9327_edit_personal_static_wep_employee_network_with_voice_wmm_share(self):
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_voice_wmm_share()
		security = vlan_obj.use_vlan_defaults()
		security.enable_mac_authentication()
		security.create_external_radiuds_server('1')
		security.set_static_wep_Tx_key()
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.edit_voice_wmm_share_default()
		edit_network_page.click_security_accordion()
		edit_network_page.edit_static_wep_network()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.check_static_network_changes()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self._delete_external_radius_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9320_create_personal_wpa_personal_employee_network_with_background_wmm_share_virtual(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_background_wmm()
		security = vlan_obj.use_vlan_defaults()
		access = security.set_wpa_blacklisting_enable()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.check_wpa_blacklisting_enable()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9321_edit_personal_wpa_personal_employee_network_with_background_wmm_share_Blacklistist(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_background_wmm()
		security = vlan_obj.use_vlan_defaults()
		access = security.set_wpa_blacklisting_enable()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.edit_background_wmm_default()
		edit_network_page.click_security_accordion()
		edit_network_page.edit_wpa_blacklisting_disable()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.check_wpa_blacklisting_disable()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9329_create_personal_wpa_2_personal_employee_network_with_content_filtering_key(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_enable_content_filtering()
		security = vlan_obj.use_vlan_defaults()
		access = security.enable_80211r_roaming()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.check_security_configurations()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		
	def test_ath_9324_create_personal_wpa_2_personal_employee_network_with_video_wmm_share(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_video_wmm_share()
		security = vlan_obj.use_vlan_defaults()
		access = security.set_both_wpa_2_wpa_passphrase_format_64_hexadecimal_chars()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.checking_key_wpa_2_and_wpa_64_passphrase_format()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		
	def _delete_external_radius_servers(self):
		self.NetworkPage.delete_network_if_present()
		self.NetworkPage.delete_wired_network_if_present()
		security_page = self.LeftPanel.go_to_security() 
		security_page.delete_authentication_server()
		self.browser.refresh()
		security_page.delete_authentication_server2()
		self.browser.refresh()
		self.LeftPanel.go_to_network_page()
		
	def test_ath_9333_edit_personal_wpa_2_personal_employee_network_with_band_key_management(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_5ghz_band()
		security = vlan_obj.use_vlan_defaults()
		security.set_security_level_and_key_management('Personal')
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.set_band_default()
		edit_network_page.click_security_accordion()
		edit_network_page.edit_network_wpa_2_personal()
		edit_network_page.checking_for_wep_key_visibility()
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.checking_for_band_all()
		edit_network_page.click_security_accordion()
		edit_network_page.checking_network_wpa_2_personal()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9316_edit_personal_wpa_2_personal_employee_network_with_dynamic_multicast_optimization(self):
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.enable_mac_authentication()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.configure_auth_server_settings(uppercase_support = True)
		security.set_delimiter()
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.enable_optimization_feilds()
		edit_network_page.click_security_accordion()
		edit_network_page.edit_personal_employee_network_with_dynamic_multicast_optimization()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.check_enable_optimization_feilds()
		edit_network_page.click_security_accordion()
		edit_network_page.check_personal_employee_network_with_dynamic_multicast_optimization()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self._delete_external_radius_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9330_edit_personal_wpa_personal_employee_network_with_content_filtering_key_management(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_and_assert_employee_network_with_content_filtering()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_default_settings()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.change_content_filtering()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.change_key_management()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_content_filtering_key_management_changes()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_9331_edit_personal_both_WPA2_and_WPA_personal_employee_network_with_band_key_management(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_wpa_personal()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.change_advanced_band_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.change_key_management_to_both_wpa2_wpa_personal()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_band_key_management_mac_auth_changes()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_9317_edit_personal_wpa_2_personal_employee_network_with_airtime_value_each_radio(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_dmo_channel_utilization_and_multicast_transmission('Employee',self.config.config_vars.background_wmm,'Enabled')
		security = virtual_lan.use_vlan_defaults()
		security.set_security_key_management('WPA-2 Personal')
		security.enable_mac_authentication()
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()	
		security.enable_accounting_interval(self.config.config_vars.valid_accounting)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_wpa_2_personal_voice_network_with_airtime_each_radio_value()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_wpa_2_personal_voice_network_with_airtime_each_radio_value()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_9318_edit_personal_wpa_2_personal_employee_network_with_airtime_dmo_channel_utilization(self):
		'''
			In test case 9412. 
			In Precondition it says set the Authentication Server 2 : InternalServer and Accounting : Disabled.
			But, when we will select Authentication Server 2 to 'InternalServer' then the Accounting field will invisible.
			But by default Accounting field is 'Disabled.' , so we escape this step.
		'''
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_dmo_channel_dynamic_optimization_radio_airtime('Employee',self.config.config_vars.edit_besteffort)
		security = virtual_lan.use_vlan_defaults()
		security.set_security_key_management('WPA-2 Personal')
		security.enable_mac_authentication()
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.set_authentication_server_2_value(self.config.config_vars.edit_Authentication_server)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_wpa_2_personal_voice_network_with_airtime_dmo_channel_value()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_wpa_2_personal_voice_network_with_airtime_dmo_channel_value()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_external_radius_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9319_edit_personal_wpa2_personal_employee_network_with_24ghz_max_24ghz_min_5ghz(self):
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level()
		security.set_security_key_management('WPA-2 Personal')
		security.set_passphrase_retype(conf.Auth_Sharedkey,conf.Auth_Sharedkey)
		security.set_mac_authentication_value('Enabled')
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.enable_accounting_interval('60')
		security.set_load_balancing_field(conf.blacklisting_option)
		security.configure_reauth_interval(conf.max_authentication_failure,conf.reauth_intrvl_unit_min)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.set_2_4ghz_max_min_transmit_rates(conf.max_auth_failure_invalid_num,conf.max_value_36)
		edit_network_page.set_5ghz_max_min_transmit_rates(conf.min_value_9,conf.max_value_48)
		edit_network_page.open_security_accordion()
		edit_network_page.mac_authentication.set(conf.blacklisting_disabled)
		edit_network_page.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edit_personal_both_wpa2_personal_enterprise_voice_network_with_2_4ghz_5ghz()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_9332_edit_personal_static_wep_employee_network_with_band_key_management_wep_key_80211r_roaming(self):
		self._delete_external_radius_servers()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		basic_info.employee_network_info_with_advanced_settings()
		basic_info.set_miscellaneous_band(self.config.config_vars.band_24ghz)
		virtual_lan = basic_info.click_on_next()
		security = virtual_lan.use_vlan_defaults()
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.set_open_roaming_nondefault()
		security._set_phrase()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.set_miscellaneous_band(conf.band_24ghz)
		edit_network_page.click_security_accordion()
		edit_network_page.set_security_key_management(conf.static_wep_value)
		edit_network_page.set_wep_key_and_retype_wep_key(conf.wep_key)
		edit_network_page._save_settings()
		self.LeftPanel.assert_delta_config_icon()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.assert_static_wep_and_wep_key()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_external_radius_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_9328_edit_personal_static_wep_employee_network_with_content_filtering_blacklisting_ma(self):
		self._delete_external_radius_servers()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.set_static_wep_Tx_key()
		security.create_external_radiuds_server('1')
		security.configure_auth_server_settings(mac_authentication = True)
		security.configure_reauth_interval(conf.new_reauth_value,conf.reauth_intrvl_unit_hrs)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_personal_static_wep_voice_network_with_content_filtering_blacklisting()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_personal_static_wep_voice_network_with_content_filtering_blacklisting()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_external_radius_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()	

	def test_ath_11907_create_personal_wpa_2_personal_employee_network_with_passphrase(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		# self.clear('IAP_1')
		
	def test_ath_11908_create_personal_wpa_2_personal_employee_network_with_broadcast_filtering_dtim_in(self):
		self.NetworkPage.delete_network_if_present()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info_with_advanced_settings_broadcasefiltering_dtiminterval()
		security = vlan_obj.set_static_vlan_defaults()
		access = security.enable_80211r_roaming()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.assert_broadcasefiltering_dtiminterval('ARP' , '3 beacons')
		edit_network_page.click_vlans_accordion()
		self.browser.assert_text(edit_network_page.vlanid,conf.vlan_default_value,'Vlan id is not set to 1','value')
		edit_network_page.click_security_accordion()
		edit_network_page.check_security_configurations()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		# self.clear('IAP_1')
		
	def test_ath_11909_edit_personal_wpa_2_personal_employee_network_with_broadcast_filtering_dtim_in(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info_with_advanced_settings_broadcasefiltering_dtiminterval()
		security = vlan_obj.use_vlan_defaults()
		access = security.enable_80211r_roaming()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.assert_broadcasefiltering_dtiminterval('ARP' , '3 beacons')
		edit_network_page.edit_advanced_settings()
		edit_network_page.click_security_accordion()
		edit_network_page.check_security_configurations()
		edit_network_page.edit_security_configurations()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.assert_broadcasefiltering_dtiminterval('ALL' , '7 beacons')
		edit_network_page.click_security_accordion()
		edit_network_page.check_security_configurations1()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		# self.clear()
		
		
	def test_ath_11910_edit_personal_wpa_2_personal_employee_network_with_broadcast_filtering_dtim_interval(self):
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings()
		security = vlan_obj.use_vlan_defaults()
		security.enable_mac_authentication()
		security.set_authentication_server_to_internalserver()
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.edit_advanced_settings_default()
		edit_network_page.click_security_accordion()
		edit_network_page.create_external_radiuds_server('1')
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.assert_broadcasefiltering_dtiminterval('Disabled' , '1 beacon')
		edit_network_page.click_security_accordion()
		edit_network_page.check_security_configurations_for_external_radius_server()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self._delete_external_radius_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		# self.clear('IAP_1')
		
	def test_ath_11911_edit_personal_wpa_2_personal_employee_network_with_authentication_server_2_delim(self):
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.enable_mac_authentication()
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.create_external_radiuds_server('1')
		edit_network_page.create_external_radiuds_server('2')
		edit_network_page.edit_security_configurations_external_radiuds_server2()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.check_security_configurations_for_external_radius_server2()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self._delete_external_radius_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11912_edit_personal_wpa_2_personal_employee_network_with_dynamic_multicast_optimization(self):
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.enable_mac_authentication()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.configure_auth_server_settings(uppercase_support = True)
		security.set_delimiter()
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.enable_optimization_feilds()
		edit_network_page.click_security_accordion()
		edit_network_page.edit_personal_employee_network_with_dynamic_multicast_optimization()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.check_enable_optimization_feilds()
		edit_network_page.click_security_accordion()
		edit_network_page.check_personal_employee_network_with_dynamic_multicast_optimization()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self._delete_external_radius_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11913_edit_personal_wpa_2_personal_employee_network_with_airtime_value_each_radio(self):
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_dmo_channel_utilization_and_multicast_transmission('Employee',self.config.config_vars.background_wmm,'Enabled')
		security = virtual_lan.use_vlan_defaults()
		security.set_security_key_management('WPA-2 Personal')
		security.enable_mac_authentication()
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()	
		security.enable_accounting_interval(self.config.config_vars.valid_accounting)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_wpa_2_personal_voice_network_with_airtime_each_radio_value()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_wpa_2_personal_voice_network_with_airtime_each_radio_value()
		network_page = self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_external_radius_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_11914_edit_personal_wpa_2_personal_employee_network_with_airtime_dmo_channel_utilization(self):
		'''
			In test case 9412. 
			In Precondition it says set the Authentication Server 2 : InternalServer and Accounting : Disabled.
			But, when we will select Authentication Server 2 to 'InternalServer' then the Accounting field will invisible.
			But by default Accounting field is 'Disabled.' , so we escape this step.
		'''
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_dmo_channel_dynamic_optimization_radio_airtime('Employee',self.config.config_vars.edit_besteffort)
		security = virtual_lan.use_vlan_defaults()
		security.set_security_key_management('WPA-2 Personal')
		security.enable_mac_authentication()
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.set_authentication_server_2_value(self.config.config_vars.edit_Authentication_server)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_wpa_2_personal_voice_network_with_airtime_dmo_channel_value()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_wpa_2_personal_voice_network_with_airtime_dmo_channel_value()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_external_radius_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11915_edit_personal_wpa2_personal_employee_network_with_24ghz_max_24ghz_min_5ghz(self):
		self._delete_external_radius_servers()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level()
		security.set_security_key_management('WPA-2 Personal')
		security.set_passphrase_retype(conf.Auth_Sharedkey,conf.Auth_Sharedkey)
		security.set_mac_authentication_value('Enabled')
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.enable_accounting_interval('60')
		security.set_load_balancing_field(conf.blacklisting_option)
		security.configure_reauth_interval(conf.max_authentication_failure,conf.reauth_intrvl_unit_min)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.set_2_4ghz_max_min_transmit_rates(conf.max_auth_failure_invalid_num,conf.max_value_36)
		edit_network_page.set_5ghz_max_min_transmit_rates(conf.min_value_9,conf.max_value_48)
		edit_network_page.open_security_accordion()
		edit_network_page.mac_authentication.set(conf.blacklisting_disabled)
		edit_network_page.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edit_personal_both_wpa2_personal_enterprise_voice_network_with_2_4ghz_5ghz()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_external_radius_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11916_create_personal_wpa_personal_employee_network_with_background_wmm_share_virtual(self):
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_background_wmm()
		security = vlan_obj.select_virtual_controller()
		access = security.set_wpa_blacklisting_enable()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.check_wpa_blacklisting_enable()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_external_radius_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		# self.clear()
		
	def test_ath_11917_edit_personal_wpa_personal_employee_network_with_background_wmm_share_Blacklistist(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_background_wmm()
		security = vlan_obj.use_vlan_defaults()
		access = security.set_wpa_blacklisting_enable()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.edit_background_wmm_default()
		edit_network_page.click_security_accordion()
		edit_network_page.edit_wpa_blacklisting_disable()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.check_wpa_blacklisting_disable()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		# self.clear()
		
	def test_ath_11918_edit_personal_wpa_2_personal_employee_network_with_best_effort_wmm_share_static(self):
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level()
		security.set_security_key_management('WPA Personal')
		security._set_phrase()
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.set_besteffort_wmm_share()
		edit_network_page.click_vlans_accordion()
		edit_network_page.set_static_vlan()
		edit_network_page.click_security_accordion()
		edit_network_page.enable_mac_authentication()
		edit_network_page.create_external_radiuds_server('1')
		edit_network_page.create_external_radiuds_server('2')
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.check_security_configurations_for_two_external_radius_servers()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self._delete_external_radius_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11919_edit_personal_wpa_2_personal_employee_network_with_best_effort_wmm_share_default(self):
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_besteffort_wmm_share()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level()
		security.set_security_key_management('WPA Personal')
		access = security.enable_mac_authentication()
		security.create_external_radiuds_server('1')
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.set_besteffort_wmm_share_default()
		# edit_network_page.click_vlans_accordion()
		edit_network_page.click_security_accordion()
		edit_network_page.select_internalserver()
		edit_network_page.checking_for_authentication_server2_visibility()
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		# edit_network_page.click_vlans_accordion()
		edit_network_page.click_security_accordion()
		time.sleep(30)
		edit_network_page.checking_for_authentication_server()
		edit_network_page.checking_for_authentication_server2_visibility()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self._delete_external_radius_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		# self.clear()
		
	def test_ath_11920_create_personal_wpa_2_and_wpa_personal_employee_network_with_video_wmm_share(self):
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		conf = self.config.config_vars
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_video_wmm_share()
		vlan_obj.create_new_dynamic_vlan_assignment_rule(conf.vlan_id_alpha,conf.vlan_id_200)
		security = vlan_obj.click_on_next()
		# security = vlan_obj.use_vlan_defaults()
		# access = security.set_both_wpa_2_wpa_passphrase_format_64_hexadecimal_chars()
		access = security.set_both_wpa_2_wpa_passphrase_format_64_hexadecimal_chars()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.assert_wpa_personal_roaming_open_mac_auth()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self._delete_external_radius_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		
	def test_ath_11921_edit_personal_wpa_2_personal_employee_network_with_video_wmm_share(self):
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_video_wmm_share()
		security = vlan_obj.use_vlan_defaults()
		access = security.set_both_wpa_2_wpa_64passphrase_format()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.set_video_wmm_share_default()
		edit_network_page.click_security_accordion()
		edit_network_page.edit_both_wpa_2_wpa_64passphrase_format()
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.checking_key_managementpassphrase_format()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self._delete_external_radius_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		# self.clear()
	def test_ath_11922_create_personal_static_wep_employee_network_with_voice_wmm_share_key_management(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_voice_wmm_share()
		security = vlan_obj.use_vlan_defaults()
		security.set_static_wep_Tx_key()
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.check_static_wep_Tx_key()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		# self.clear('IAP_1')
		
	def test_ath_11923_edit_personal_static_wep_employee_network_with_voice_wmm_share(self):
		self._delete_external_radius_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_voice_wmm_share()
		security = vlan_obj.use_vlan_defaults()
		security.enable_mac_authentication()
		security.create_external_radiuds_server('1')
		security.set_static_wep_Tx_key()
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.edit_voice_wmm_share_default()
		edit_network_page.click_security_accordion()
		edit_network_page.edit_static_wep_network()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		self.browser.assert_text(edit_network_page.voice_wmm_share,self.config.config_vars.edit_video_wmm_share,'Voice wmm is not set to zero','value')
		edit_network_page.click_security_accordion()
		edit_network_page.check_static_network_changes()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self._delete_external_radius_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		# self.clear('IAP_1')
		
	def test_ath_11924_edit_personal_static_wep_employee_network_with_content_filtering_blacklisting_ma(self):
		self._delete_external_radius_servers()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.set_static_wep_Tx_key()
		security.create_external_radiuds_server('1')
		security.configure_auth_server_settings(blacklisting = True)
		security.configure_reauth_interval(conf.new_reauth_value,conf.reauth_intrvl_unit_hrs)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_personal_static_wep_voice_network_with_content_filtering_blacklisting()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_personal_static_wep_voice_network_with_content_filtering_blacklisting()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_external_radius_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11925_create_personal_wpa_2_personal_employee_network_with_content_filtering_key(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_enable_content_filtering()
		security = vlan_obj.use_vlan_defaults()
		access = security.enable_80211r_roaming()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.check_security_configurations()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		
	def test_ath_11926_edit_personal_wpa_personal_employee_network_with_content_filtering_key_management(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_and_assert_employee_network_with_content_filtering()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_default_settings()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.change_content_filtering()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.change_key_management()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_content_filtering_key_management_changes()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_11927_edit_personal_both_WPA2_and_WPA_personal_employee_network_with_band_key_management(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_wpa_personal()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.change_advanced_band_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.change_key_management_to_both_wpa2_wpa_personal()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_band_key_management_mac_auth_changes()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11928_edit_personal_static_wep_employee_network_with_band_key_management_wep_key_80211r_roaming(self):
		self._delete_external_radius_servers()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		basic_info.employee_network_info_with_advanced_settings()
		basic_info.set_miscellaneous_band(self.config.config_vars.band_24ghz)
		virtual_lan = basic_info.click_on_next()
		security = virtual_lan.use_vlan_defaults()
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.set_open_roaming_nondefault()
		security._set_phrase()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.set_miscellaneous_band(conf.band_24ghz)
		edit_network_page.click_security_accordion()
		edit_network_page.set_security_key_management(conf.static_wep_value)
		edit_network_page.set_wep_key_and_retype_wep_key(conf.wep_key)
		edit_network_page._save_settings()
		self.LeftPanel.assert_delta_config_icon()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.assert_static_wep_and_wep_key()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_external_radius_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11929_edit_personal_wpa_2_personal_employee_network_with_band_key_management(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_5ghz_band()
		security = vlan_obj.use_vlan_defaults()
		security.set_security_level_and_key_management('Personal')
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.set_band_default()
		edit_network_page.click_security_accordion()
		edit_network_page.edit_network_wpa_2_personal()
		edit_network_page.checking_for_wep_key_visibility()
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.checking_for_band_all()
		edit_network_page.click_security_accordion()
		edit_network_page.checking_network_wpa_2_personal()
		self.take_s2_snapshot()
		network_page = self.LeftPanel.go_to_network_page()
		self.NetworkPage.assert_new_network()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()		
		