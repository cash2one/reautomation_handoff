'''
Created on 02-Aug-2014

@author: Raju
'''
import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class EnterpriseSecurity(ConfigurationTest):
	'''
	Test class for Default Values of employee network.
	'''

	def test_ath_9251_create_enterprise_employee_network_with_inactive_timeout(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options()
		security = virtual_lan.select_virtual_controller()
		security.security_level_enterprise()
		security.configure_80211r_romaing()
		security.assert_auth_server_one_defaults()
		access = security.click_on_next()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level_enterprise()
		edit_network.assert_802_roaming_options()  
		self.LeftPanel.go_to_network_page()      
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_9257_create_enterprise_employee_network_without_uplink_security_level(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(uplink=True)
		security = virtual_lan.select_virtual_controller()
		security.security_level_enterprise()
		security.set_auth_interval_time('10')
		security.okc_checkbox.click()
		access = security.click_on_next()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level_enterprise()
		self.LeftPanel.go_to_network_page()      
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_9258_edit_enterprise_employee_network_without_uplink_security_level(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(uplink=True)
		security = virtual_lan.select_virtual_controller()
		security.security_level_enterprise()
		security.set_auth_interval_time('10')
		security.okc_checkbox.click()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_settings_and_reauth_interval()
		self.take_s2_snapshot()		
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_9259_edit_enterprise_employee_network_max_client_threshold(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.security_level_enterprise()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_max_client_threshold_and_mac_authentication()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_9260_edit_enterprise_employee_network_blacklisting_enabled(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(max_threshold=True)
		security = virtual_lan.select_virtual_controller()
		access = security.create_network_mac_authentication_enabled(enterprise=True)
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_enterprise_employee_network_blacklisting_enabled()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()  
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9263_edit_enterprise_employee_network_with_mac_authentication(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.select_virtual_controller()
		security.security_level_enterprise()
		security.set_mac_authentication_enabled()        
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.disable_mac_authentication()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present() 
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9253_edit_enterprise_employee_network_with_hide_ssid_okc_termination(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(hide_ssid=True)
		edit_network.open_security_accordion()
		edit_network.configure_mac_authentication(enable=True)
		edit_network.create_external_radius_server_in_auth_server_one()
		edit_network.edit_security_settings(okc=True)
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present() 
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def _delete_network_auth_server(self):
		'''
		Delete wireless and auth servers 
		'''
		self.NetworkPage.delete_network_if_present()
		self.NetworkPage.delete_wired_network_if_present()
		security_page = self.LeftPanel.go_to_security() 
		security_page.delete_authentication_server()
		security_page.delete_authentication_server2()
		self.LeftPanel.go_to_network_page()        


	def test_ath_9264_create_enterprise_wpa_2_enterprise_employee_network_with_key_management_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level(enterprise=True)
		edit_network.assert_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		edit_network.assert_external_radius_auth_server_one()
		edit_network.assert_external_radius_auth_server_two()
		self.LeftPanel.go_to_network_page()     
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_9266_create_enterprise_wpa_enterprise_employee_network_with_inactive_timeout_interval(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options()
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)        
		security.assert_default_fields_security_enterprise(wpa=True,skip_roaming_okc=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level(enterprise=True)
		self.LeftPanel.go_to_network_page()                       
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9272_create_enterprise_wpa_enterprise_employee_network_with_can_be_used_without_uplink(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(uplink=True)
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)        
		security.assert_default_fields_security_enterprise(wpa=True,skip_roaming_okc=True)
		security.set_auth_interval_time(10)
		access = security.click_on_next()
		access.finish_network_setup() 
		edit_network = self.NetworkPage.edit_network()        
		edit_network.assert_edited_advance_options(uplink=True)
		self.LeftPanel.go_to_network_page()                      
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9279_create_enterprise_wpa_enterprise_employee_network_with_key_management_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(wpa=True,skip_roaming_okc=True)        
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level(enterprise=True)
		edit_network.assert_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		edit_network.assert_external_radius_auth_server_one()
		edit_network.assert_external_radius_auth_server_two()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9281_create_enterprise_wpa_wpa2_enterprise_employee_network_with_inactive_timeout_interval(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(max_threshold=True)
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(wpa_wpa2=True)
		security.configure_auth_server_settings(roaming=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edited_advance_options(max_threshold=True)
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9287_create_enterprise_wpa_wpa2_enterprise_employee_network_with_can_be_used_without_uplink(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(uplink=True)
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(wpa_wpa2=True)
		security.configure_auth_server_settings(okc=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edited_advance_options(uplink=True)
		edit_network.assert_security_level(enterprise=True)
		edit_network.assert_auth_server_settings(okc=True)
		self.LeftPanel.go_to_network_page()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9294_create_enterprise_wpa_wpa2_enterprise_employee_network_with_key_management_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(wpa_wpa2=True)       
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level(enterprise=True)
		edit_network.assert_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		edit_network.assert_external_radius_auth_server_one()
		edit_network.assert_external_radius_auth_server_two()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9252_edit_enterprise_wpa_2_enterprise_employee_network_with_inactive_timeout_authention(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.edit_advance_options(inactivity_timeout=True)
		security = virtual_lan.select_virtual_controller()
		security.security_level_enterprise()
		security.configure_80211r_romaing()
		security.assert_auth_server_one_defaults()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(timeout=True)
		edit_network.open_security_accordion()
		edit_network.create_external_radius_server_in_auth_server_one()
		edit_network.configure_auth_server_settings(roaming=True)
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9309_create_enterprise_dynamic_wep_employee_network_with_key_management_accounting_interval(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.set_security_level_and_key_management('Enterprise')
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.configure_auth_server_settings(accounting_enable = True,acc_interval=True, auth_survivability=True, balancing=True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.assert_auth_server_settings(accounting_enable=True,balancing=True,auth_survivability=True)
		self.LeftPanel.go_to_network_page()     
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_9291_edit_enterprise_both_wpa_2_and_wpa_enterprise_employee_network_with_local_probe(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.set_localprobe_feilds()
		edit_network_page.click_security_accordion()
		edit_network_page.create_external_radiuds_server('1')
		edit_network_page.create_external_radiuds_server('2')
		edit_network_page.enable_auth_server_settings(balancing=True,blacklisting=True,max_auth_failures=True)
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.assert_external_radius_auth_server_one()
		edit_network_page.assert_external_radius_auth_server_two()
		edit_network_page.assert_auth_server_settings(balancing=True,blacklisting=True,max_auth_failures=True)
		self.LeftPanel.go_to_network_page()     
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_9285_edit_enterprise_both_wpa_2_and_wpa_enterprise_employee_network_with_disabled_ssid(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.configure_auth_server_settings(termination = True)
		security.create_external_radiuds_server('1')
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options(disable_ssid=True)
		edit_network_page.click_security_accordion()
		edit_network_page.edit_enterprise_employee_network_with_disabled_ssid()
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_disable_ssid_checkbox('check')
		edit_network_page.click_security_accordion()
		edit_network_page.assert_external_radius_auth_server_one()
		edit_network_page.assert_auth_server_settings(accounting_enable=True,termination_disable = True)
		self.LeftPanel.go_to_network_page()     
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9271_edit_enterprise_wpa_enterprise_employee_network_with_disable_ssid_authentication(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_enable_disable_ssid()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa=True)
		security.create_external_radiuds_server('1')
		security.configure_auth_server_settings(accounting_enable= True,acc_interval = True, auth_survivability= True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.uncheck_disable_ssid()
		edit_network_page.click_security_accordion()
		edit_network_page.create_external_radiuds_server('2')
		edit_network_page.enable_auth_server_settings(termination = True)
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_disable_ssid_checkbox('uncheck')
		edit_network_page.click_security_accordion()
		edit_network_page.assert_external_radius_auth_server_one()
		edit_network_page.assert_auth_server_settings(termination_enable = True)
		self.LeftPanel.go_to_network_page()     
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9273_edit_enterprise_wpa_enterprise_employee_network_with_can_be_used_without_uplink(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj   = basic_info.edit_advance_options(uplink=True)
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)        
		security.set_security_enterprise_dropdown(wpa=True)
		security.set_auth_interval_time('10')
		access = security.click_on_next()
		access.finish_network_setup() 
		edit_network_page = self.NetworkPage.edit_network()    
		edit_network_page.set_advance_settings_and_reauth_interval()		
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_advance_settings_and_reauth_interval()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9289_edit_enterprise_both_wpa_2_and_wpa_enterprise_employee_network_with_max_client_threshold(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_max_client_threshold_and_mac_authentication()  
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9290_edit_enterprise_both_wpa_2_and_wpa_enterprise_employee_network_with_max_client_blacklisting(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj   = basic_info.edit_advance_options(max_threshold=True)
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.enable_mac_authentication_enterprise()
		security.configure_auth_server_settings(uppercase_support= True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_enterprise_employee_network_blacklisting_enabled()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()       
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9299_edit_enterprise_dynamic_wep_employee_network_with_hide_ssid_authentication_survivability(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_enable_hide_ssid()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(dynamic_wep=True)
		security.configure_auth_server_settings(termination= True)
		security.create_external_radiuds_server('1')
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options(hide_ssid_uncheck=True)
		edit_network_page.click_security_accordion()
		edit_network_page.configure_auth_server_settings(termination_disable=True,auth_survivability_enable=True)
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_hide_ssid_checkbox('uncheck')
		edit_network_page.click_security_accordion()
		edit_network_page.assert_auth_survivability_cache_timeout_enable()
		edit_network_page.assert_auth_server_settings(termination_enable = True)
		self.LeftPanel.go_to_network_page()     
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9301_edit_enterprise_dynamic_WEP_employee_network_with_disable_SSID_authentication(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_and_assert_employee_network_with_disable_ssid()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_auth_server_termination_accounting()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_disable_ssid_auth_server_termination()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_disable_ssid_auth_server_termination_changes()
		self.NetworkPage.delete_network_if_present()						
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_9302_create_enterprise_dynamic_WEP_employee_network_with_can_be_used_without_uplink_select(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_can_be_used_without_uplink()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_reauth_interval_use_session_key()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_key_management_reauth_interval_use_session_key_changes()
		self.NetworkPage.delete_network_if_present()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_9303_edit_enterprise_dynamic_WEP_employee_network_with_can_be_used_without_uplink(self):

		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_can_be_used_without_uplink()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_reauth_interval_use_session_key()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()

		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_reauth_interval_session_key_with_advanced_settings()	
		edit_network_page = self.NetworkPage.edit_network()
		self.take_s2_snapshot()
		edit_network_page.assert_reauth_interval_session_key_with_advanced_settings_changes()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	
	def test_ath_9304_edit_enterprise_dynamic_WEP_employee_network_with_max_client_threshold_delimiter(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_can_be_used_without_uplink()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_dynamic_wep()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_max_client_threshold(255)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_delimiter_uppercase_support_mac_auth_options()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_delimiter_uppercase_support_mac_auth_options_check()	
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_9305_edit_enterprise_dynamic_WEP_employee_network_with_max_client_threshold_blacklist(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_max_client_threshold()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_dynamic_wep_with_uppercase_support_enabled()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_max_client_threshold(0)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_blacklisting_uppercase_support_delimiter_options()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_blacklisting_uppercase_support_delimiter_changes()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
 	def test_ath_9306_edit_enterprise_dynamic_WEP_employee_network_with_local_probe_request_threshold(self):
 		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_dynamic_wep()					
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_local_probe_request(100)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_auth_server_loadbalancing_max_auth_failure()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_auth_server_loadbalancing_max_auth_failure()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()	
		
		
	def test_ath_9308_edit_enterprise_dynamic_WEP_employee_network_with_mac_authentication_mac_authe(self):
		self.take_s1_snapshot()	
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_dynamic_wep_option()
		security.set_mac_authentication_options()
		security.set_uppercase_support_dropdown()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_mac_authentication_options()
		edit_network_page.set_session_key_for_leap()
		edit_network_page.assert_uppercase_support_delimiter_options()
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_disabled_mac_authentication_options_and_session_key_for_leap()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_9300_edit_enterprise_dynamic_WEP_employee_network_with_disable_SSID_accounting_interv(self):

		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_dynamic_wep_option()
		security.set_external_radius_server_1()
 		security.setting_termination_option(True)
 		access = security.move_to_next_page()
		access.finish_network_setup()

		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.click_on_disable_ssid()
		edit_network_page._save_settings()	
		edit_network_page = self.NetworkPage.edit_network()	
		edit_network_page.click_on_security_accordion()
		edit_network_page.setting_termination_option(False)
		edit_network_page.setting_accounting_interval_option(True,60)
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()	
		edit_network_page.assert_disable_ssid_termination_accounting_option()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_9298_edit_enterprise_dynamic_WEP_employee_network_with_hide_SSID_termination_use_session_key_for_LEAP(self):
		self.take_s1_snapshot()	
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()		
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_dynamic_wep_option()
 		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.click_on_hide_ssid()		 					
		edit_network_page.click_on_security_accordion()
		edit_network_page.setting_termination_option(True)
		edit_network_page.set_session_key_for_leap()
		edit_network_page.set_external_radius_server_1()
		edit_network_page._save_settings()					
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_hide_ssid_termination_session_key_for_leap()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_9296_create_enterprise_dynamic_WEP_employee_network_with_inactive_timeout_virtual_con(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_inactive_timeout(3600)
		security = virtual_lan.select_virtual_controller()
		security.click_on_enterprise_radio_button()
		security.set_key_management_dynamic_wep_option()
		security.assert_auth_server_internal_server_option()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_inactive_timeout_vlan_security_level_key_management()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	
	def test_ath_9288_edit_enterprise_both_WPA_2_and_WPA_enterprise_employee_network_with_can_be_used(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_can_be_used_without_uplink()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.click_on_okc('Disable')
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.set_reauth_interval_options(10)
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.click_on_can_be_used_without_uplink()
		edit_network_page.click_on_security_accordion()
		edit_network_page.click_on_okc('Enable')
		edit_network_page.set_reauth_interval()
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_can_be_used_without_uplink_okc_reauth_interval()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_9284_edit_enterprise_both_WPA_2_and_WPA_enterprise_employee_network_with_hide_SSID(self):

		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_hide_ssid()		
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()					 				
 		security.setting_termination_option(True)
 		security.set_external_radius_server_1()
 		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.click_on_hide_ssid()
		edit_network_page.click_on_security_accordion()
		edit_network_page.assert_auth_survivability_cache_timeout()
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.assert_hide_ssid_disabled()
		edit_network_page.networks.click()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_9283_edit_enterprise_both_WPA_2_and_WPA_enterprise_employee_network_with_hide_ssid_okc_termination(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()						
		security.click_on_enterprise_radio_button()		
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
 		security.set_external_radius_server_1()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()					
		edit_network_page.click_on_hide_ssid()
		edit_network_page.click_on_security_accordion()
		edit_network_page.click_on_okc('Disable')
		edit_network_page.setting_termination_option(True)
		edit_network_page.assert_auth_server_2(True)
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()			
		edit_network_page.assert_hide_ssid_enabled()
		edit_network_page.click_on_security_accordion()		
		edit_network_page.assert_okc_checkbox(False)
		edit_network_page.assert_termination_dropdown('Enabled')
		edit_network_page.click_on_network()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		

	def test_ath_9274_edit_enterprise_WPA_enterprise_employee_network_with_max_client_threshold_delimiter(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()	
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
 		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.set_max_client_threshold(255)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_mac_authentication_options()
		edit_network_page.set_delimiter_option()
		edit_network_page.set_uppercase_support_option('Enabled')
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_delimiter_uppercase_support_mac_auth_options_check()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_9275_edit_enterprise_WPA_enterprise_employee_network_with_max_client_threshold_blacklisting(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_max_client_threshold()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		security.set_mac_authentication_options()
		security.set_uppercase_support_dropdown()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.set_max_client_threshold(0)				
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_blacklisting_option('Enabled')
		edit_network_page.set_uppercase_support_option('Disabled')
		edit_network_page.set_delimiter_option_empty()
		edit_network_page._save_settings()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_blacklisting_uppercase_support_delimiter_changes()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear() 
		
		
	def test_ath_9276_edit_enterprise_WPA_enterprise_employee_network_with_local_probe_request_threshold(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()					
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
 		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_local_probe_request(100)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()		
		edit_network_page.set_external_radius_server_1()
		edit_network_page.set_external_radius_server_2()
		edit_network_page.set_blacklisting_option('Enabled')
		edit_network_page.set_max_authentication_option(10)
		edit_network_page.set_load_balancing_option('Enabled')
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_auth_server_loadbalancing_max_auth_failure()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_9268_edit_enterprise_WPA_enterprise_employee_network_with_hide_SSID_termination(self):

		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()					
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
 		access = security.move_to_next_page()
		access.finish_network_setup()

		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()					
		edit_network_page.click_on_hide_ssid()
		edit_network_page.click_on_security_accordion()
		edit_network_page.setting_termination_option(True)
		edit_network_page.set_external_radius_server_1()
		edit_network_page._save_settings()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.assert_hide_ssid_enabled()
		edit_network_page.click_on_security_accordion()
		edit_network_page.assert_termination_dropdown('Enabled')		
		edit_network_page.click_on_network()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	
	def test_ath_9267_edit_enterprise_WPA_enterprise_employee_network_with_inactive_timeout_authentication(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()						
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_inactive_timeout(3600)
		security = virtual_lan.select_virtual_controller()
		security.click_on_enterprise_radio_button()
		security.set_security_enterprise_dropdown(wpa=True)
		# security.select_auth_server_internalserver('1')
 		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.set_inactive_timeout_option(1000)
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_external_radius_server_1()				
		edit_network_page.select_auth_server_internalserver('2')
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()		
		edit_network_page.assert_inactive_timeout(1000)
		edit_network_page.click_on_security_accordion()
		edit_network_page.assert_auth_server_2_internal_auth_server_1_external_server()
		edit_network_page.click_on_network()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()	
		
		
	def test_ath_9269_edit_enterprise_WPA_enterprise_employee_network_with_hide_SSID_authentication_survivability_cache_timeout(self):

		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_hide_ssid()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		security.set_external_radius_server_1()
		security.set_external_radius_server_2()
		security.setting_termination_option(True)	
 		access = security.move_to_next_page()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()				
		edit_network_page.click_on_hide_ssid()
		edit_network_page._save_settings()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()	
		edit_network_page.click_on_security_accordion()
		edit_network_page.assert_auth_survivability_cache_timeout()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.assert_hide_ssid_disabled()
		edit_network_page.click_on_network()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9270_edit_enterprise_wpa_enterprise_employee_network_with_disable_ssid_accounting_int(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa=True)
		security.create_external_radius_server_in_auth_server_one()
		security.setting_termination_option(True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options(disable_ssid=True)
		edit_network_page.click_security_accordion()
		#edit_network_page.configure_mac_authentication()
		edit_network_page.setting_termination_option(False)
		edit_network_page.setting_accounting_interval_option(True,self.config.config_vars.edit_accounting_interval60)
		import time
		time.sleep(10)
		edit_network_page._save_settings()
		time.sleep(10)
		self.LeftPanel.assert_delta_config_icon()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.open_security_accordion()        
		self.browser.assert_check_box_value(edit_network_page.mac_authentication_enterprise, 'Mac authentication enterprise is not unchecked', check = False)
		self.browser.assert_check_box_value(edit_network_page.auth_failthru_enterprise, 'auth fail through is not unchecked', check = False) 
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9254_edit_enterprise_wpa_2_enterprise_employee_network_with_hide_ssid_authentication(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(hide_ssid=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.configure_auth_server_settings(termination=True)
		security.create_external_radius_server_in_auth_server_one()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(hide_ssid_uncheck=True)
		edit_network.open_security_accordion()
		edit_network.setting_termination_option(False)
		edit_network.enable_auth_server_settings(auth_survivability=True)
		edit_network.set_auth_cache_timeout('19')
		edit_network.save_settings.click()
		self.LeftPanel.go_to_network_page()  
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9255_edit_enterprise_wpa_2_enterprise_employee_network_with_disable_ssid_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.configure_auth_server_settings(termination=True)
		security.create_external_radius_server_in_auth_server_one()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(hide_ssid=True)        
		edit_network.open_security_accordion()
		edit_network.configure_auth_server_settings(termination_disable=True,accounting_enable=True)
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9256_edit_enterprise_wpa_2_enterprise_employee_network_with_disable_ssid_authentication(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(hide_ssid=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.create_external_radius_server_in_auth_server_one()   
		security.configure_auth_server_settings(auth_survivability=True,accounting_enable=True,acc_interval=True,)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(hide_ssid=True)        
		edit_network.open_security_accordion()
		edit_network.create_external_radius_server_in_auth_server_two()
		edit_network.configure_auth_server_settings(termination_enable=True)
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9261_edit_enterprise_wpa_2_enterprise_employee_network_with_local_probe_request_threshold(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(local_probe=True)        
		edit_network.open_security_accordion()
		edit_network.create_external_radius_server_in_auth_server_one()
		edit_network.create_external_radius_server_in_auth_server_two()
		edit_network.configure_blacklisting(blacklisting_enable=True)
		edit_network.configure_auth_server_settings(balancing=True)
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9265_edit_enterprise_wpa_2_enterprise_employee_network_with_authentication_server_2(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,auth_survivability=False)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		edit_network.select_internal_server_in_auth_server_2()
		edit_network.save_configuration()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9295_edit_enterprise_wpa_2_and_wpa_enterprise_employee_network_with_authentication_server_2(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,auth_survivability=False)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		edit_network.select_internal_server_in_auth_server_2()
		edit_network.save_configuration()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9297_edit_enterprise_dynamic_WEP_employee_network_with_inactivity_timeout_authentication(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.edit_advance_options(inactivity_timeout=True)
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_dynamic_wep()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(timeout=True)
		edit_network.open_security_accordion() 
		edit_network.create_external_radius_server_in_auth_server_one()
		edit_network.select_internal_server_in_auth_server_2()
		edit_network.save_configuration()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9307_edit_enterprise_dynamic_WEP_employee_network_with_local_probe_request(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.edit_advance_options(local_probe = True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(dynamic_wep=True)
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.configure_blacklisting('Enable',conf.max_authentication_failure)
		security.set_load_balancing_field(conf.blacklisting_option)
		security.configure_reauth_interval(conf.new_reauth_value,conf.reauth_intrvl_unit_hrs)
		# security.set_max_auth_failures_value(conf.max_authentication_failure)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_enterprise_both_wpa2_and_wpa_enterprise_voice_network_with_local_probe_req()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edited_values()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()		
		
	def test_ath_9293_edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_authentication(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.create_external_radiuds_server('1')
		security.configure_security_radio_fields(mac_authentication=True,mac_authentication_fail_thru=True)
		security.set_uppercase_support_dropdown()
		security.configure_security_radio_fields(okc = True)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		edit_network.set_mac_authentication_options()
		edit_network.configure_okc()
		edit_network.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		self.browser.assert_check_box_value(edit_network.mac_authentication_enterprise, 'Mac authentication enterprise is not unchecked', check = True)
		self.browser.assert_check_box_value(edit_network.auth_failthru_enterprise, 'auth fail through is not unchecked', check = True)
		self.browser.assert_check_box_value(edit_network.auth_failthru_enterprise, 'okc is not unchecked', check = True)
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9292_edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_local_probe(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.edit_advance_options(local_probe = True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise = True)
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.configure_blacklisting('Enable',conf.max_authentication_failure)
		security.set_load_balancing_field(conf.blacklisting_option)
		security.configure_reauth_interval(conf.new_reauth_value,conf.reauth_intrvl_unit_hrs)
		# security.set_max_auth_failures_value(conf.max_authentication_failure)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_enterprise_both_wpa2_and_wpa_enterprise_voice_network_with_local_probe_req()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options()
		edit_network.assert_edited_values()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9282_edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_inactive_timeout(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.edit_advance_options(inactivity_timeout = True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.configure_auth_server_settings(roaming = True)
		security.set_authentication_server(conf.InternalServer)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_inactive_timeout()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_inactive_timeout()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9280_edit_enterprise_wpa_enterprise_employee_network_with_authentication_server2(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_wpa_enterprise()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.enable_accounting_interval('1')
		security.enable_authentication_survivability()
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		edit_network.select_internal_server_in_auth_server_2()
		edit_network.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		self.browser.assert_drop_down_value(edit_network.authentication_server_2, conf.edit_Authentication_server, 'authentication server2 is not set to internal server')
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9262_edit_enterprise_wpa_2_enterprise_employee_network_with_local_probe_request(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.edit_advance_options(local_probe = True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.configure_blacklisting('Enable',conf.max_authentication_failure)
		security.set_load_balancing_field(conf.blacklisting_option)
		security.configure_reauth_interval(conf.new_reauth_value,conf.reauth_intrvl_unit_hrs)
		# security.set_max_auth_failures_value(conf.max_authentication_failure)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_enterprise_both_wpa2_and_wpa_enterprise_voice_network_with_local_probe_req()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edited_values()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9277_edit_enterprise_wpa_enterprise_employee_network_with_local_probe_request(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.edit_advance_options(local_probe = True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_wpa_enterprise()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.configure_blacklisting('Enabled',conf.max_authentication_failure)
		security.set_load_balancing_field(conf.blacklisting_option)
		security.configure_reauth_interval(conf.new_reauth_value,conf.reauth_intrvl_unit_hrs)
		security.set_max_auth_failures_value(conf.max_authentication_failure)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_enterprise_both_wpa2_and_wpa_enterprise_voice_network_with_local_probe_req()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edited_values()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9278_edit_enterprise_wpa_enterprise_employee_network_with_mac_authentication_request_threshold(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_wpa_enterprise()
		security.configure_security_radio_fields(mac_authentication=True,mac_authentication_fail_thru=True)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		edit_network.set_mac_authentication_options()
		edit_network.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		self.browser.assert_check_box_value(edit_network.mac_authentication_enterprise, 'Mac authentication enterprise is not unchecked', check = True)
		self.browser.assert_check_box_value(edit_network.auth_failthru_enterprise, 'auth fail through is not unchecked', check = True)	
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9310_edit_enterprise_dynamic_WEP_employee_network_with_authentication_server2_accounting(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_dynamic_wep_option()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.enable_accounting_interval('1')
		security.enable_authentication_survivability()
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		edit_network.select_internal_server_in_auth_server_2()
		edit_network.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		self.browser.assert_drop_down_value(edit_network.authentication_server_2, conf.edit_Authentication_server, 'authentication server2 is not set to internal server')
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11847_create_enterprise_employee_network_with_inactive_timeout(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(inactivity_timeout=True)
		security = virtual_lan.select_virtual_controller()
		security.security_level_enterprise()
		security.configure_80211r_romaing()
		security.assert_auth_server_one_defaults()
		access = security.click_on_next()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level_enterprise()
		edit_network.assert_802_roaming_options()  
		self.LeftPanel.go_to_network_page()      
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11848_edit_enterprise_wpa_2_enterprise_employee_network_with_inactive_timeout_authention(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.edit_advance_options(inactivity_timeout=True)
		security = virtual_lan.select_virtual_controller()
		security.security_level_enterprise()
		security.configure_80211r_romaing()
		security.assert_auth_server_one_defaults()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(timeout=True)
		edit_network.open_security_accordion()
		edit_network.create_external_radius_server_in_auth_server_one()
		edit_network.select_auth_server_internalserver('2')
		edit_network.configure_auth_server_settings(roaming=True)
		#edit_network.save_settings.click()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_page_value()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11849_edit_enterprise_employee_network_with_hide_ssid_okc_termination(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(hide_ssid=True)
		edit_network.open_security_accordion()
		import time
		time.sleep(10)
		#edit_network.configure_mac_authentication(enable=True)
		edit_network.create_external_radius_server_in_auth_server_one()
		time.sleep(10)
		edit_network.edit_security_settings(okc=False)
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		edit_network.configure_auth_server_settings(termination_enable=True)
		# edit_network.save_settings.click()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.check_hide_ssid_checkbox('check')
		edit_network.open_security_accordion()
		edit_network.assert_okc_checkbox(True)
		edit_network.assert_termination_dropdown('Enabled')
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11850_edit_enterprise_wpa_2_enterprise_employee_network_with_hide_ssid_authentication(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(hide_ssid=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.configure_auth_server_settings(termination=True)
		security.create_external_radius_server_in_auth_server_one()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(hide_ssid_uncheck=True)
		edit_network.open_security_accordion()
		edit_network.setting_termination_option(False)
		edit_network.enable_auth_server_settings(auth_survivability=True)
		edit_network.set_auth_cache_timeout(19)
		edit_network.save_settings.click()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.check_hide_ssid_checkbox('uncheck')
		edit_network.open_security_accordion()
		edit_network.assert_auth_server_settings(auth_survivability=True)
		edit_network.assert_cache_timeout(19)
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11851_edit_enterprise_wpa_2_enterprise_employee_network_with_disable_ssid_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.configure_auth_server_settings(termination=True)
		security.create_external_radius_server_in_auth_server_one()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(hide_ssid=True)        
		edit_network.open_security_accordion()
		edit_network.configure_auth_server_settings(termination_disable=True,accounting_enable=True)
		# edit_network.save_configuration()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.check_hide_ssid_checkbox('check')
		edit_network.open_security_accordion()
		edit_network.assert_termination_dropdown('Disabled')
		edit_network.assert_auth_server_settings(accounting_enable=True)
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11852_edit_enterprise_wpa_2_enterprise_employee_network_with_disable_ssid_authentication(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(hide_ssid=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.create_external_radius_server_in_auth_server_one()   
		security.configure_auth_server_settings(auth_survivability=True,accounting_enable=True,acc_interval=True,)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(hide_ssid=True)        
		edit_network.open_security_accordion()
		edit_network.create_external_radius_server_in_auth_server_two()
		edit_network.configure_auth_server_settings(termination_enable=True)
		#edit_network.save_settings.click()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.check_hide_ssid_checkbox('uncheck')

		edit_network.open_security_accordion()
		edit_network.assert_termination_dropdown('Enabled')
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11853_create_enterprise_employee_network_without_uplink_security_level(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(uplink=True)
		security = virtual_lan.select_virtual_controller()
		security.security_level_enterprise()
		security.set_auth_interval_time('10')
		#security.okc_checkbox.click()
		access = security.click_on_next()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level_enterprise()
		edit_network.assert_okc_checkbox(True)
		edit_network.assert_reauth_interval_reauth_unit('10','min.')
		self.LeftPanel.go_to_network_page()      
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11854_edit_enterprise_employee_network_without_uplink_security_level(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(uplink=True)
		security = virtual_lan.select_virtual_controller()
		security.security_level_enterprise()
		security.set_auth_interval_time('10')
		# security.okc_checkbox.click()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_settings_and_reauth_interval()
		# edit_network.save_settings.click()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_can_be_used_without_uplink_okc_reauth_interval()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_11855_edit_enterprise_employee_network_max_client_threshold(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.security_level_enterprise()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_max_client_threshold_and_mac_authentication()
		# edit_network.save_settings.click()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_delimiter_uppercase_support_mac_auth_options_check()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_11856_edit_enterprise_employee_network_blacklisting_enabled(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(max_threshold=True)
		security = virtual_lan.select_virtual_controller()
		access = security.create_network_mac_authentication_enabled(enterprise=True)
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_enterprise_employee_network_blacklisting_enabled()
		#edit_network.save_settings.click()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_blacklisting_uppercase_support_delimiter_changes()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()		
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11857_edit_enterprise_wpa_2_enterprise_employee_network_with_local_probe_request_threshold(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(local_probe=True)        
		edit_network.open_security_accordion()
		edit_network.create_external_radius_server_in_auth_server_one()
		edit_network.create_external_radius_server_in_auth_server_two()
		edit_network.configure_blacklisting(blacklisting_enable=True,max_authentication_failure = True)
		edit_network.configure_auth_server_settings(balancing_enable=True)
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		edit_network.assert_auth_server_settings(balancing = True, blacklisting=True)
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11858_edit_enterprise_wpa_2_enterprise_employee_network_with_local_probe_request(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.edit_advance_options(local_probe = True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.configure_blacklisting('Enable',conf.max_authentication_failure)
		security.set_load_balancing_field(conf.blacklisting_option)
		security.configure_reauth_interval(conf.new_reauth_value,conf.reauth_intrvl_unit_hrs)
		# security.set_max_auth_failures_value(conf.max_authentication_failure)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_enterprise_both_wpa2_and_wpa_enterprise_voice_network_with_local_probe_req()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edited_values()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11859_edit_enterprise_employee_network_with_mac_authentication(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.select_virtual_controller()
		security.security_level_enterprise()
		security.set_mac_authentication_enabled()        
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.disable_mac_authentication()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		edit_network.assert_configure_security_radio_fields()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present() 
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11860_create_enterprise_wpa_2_enterprise_employee_network_with_key_management_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level(enterprise=True)
		edit_network.assert_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		edit_network.assert_external_radius_auth_server_one()
		edit_network.assert_external_radius_auth_server_two()
		self.LeftPanel.go_to_network_page()     
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11861_edit_enterprise_wpa_2_enterprise_employee_network_with_authentication_server_2(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,auth_survivability=True)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		edit_network.select_internal_server_in_auth_server_2()
		edit_network.save_configuration()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		edit_network.assert_auth_server_2_internal()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()     
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_11862_create_enterprise_wpa_enterprise_employee_network_with_inactive_timeout_interval(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(inactivity_timeout=True)
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)        
		security.assert_default_fields_security_enterprise(wpa=True,skip_roaming_okc=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.click_on_advanced_settings_accordion()
		edit_network.assert_inactive_timeout(3600)
		edit_network.assert_security_level(enterprise=True)
		edit_network.checking_for_authentication_server()
		self.LeftPanel.go_to_network_page()                       
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11863_edit_enterprise_WPA_enterprise_employee_network_with_inactive_timeout_authentication(self):

		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()						
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_inactive_timeout('3600')
		security = virtual_lan.select_virtual_controller()
		security.click_on_enterprise_radio_button()
		security.set_security_enterprise_dropdown(wpa=True)
		security.select_auth_server_internalserver('1')
 		access = security.move_to_next_page()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.set_inactive_timeout_option('1000')
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_external_radius_server_1()				
		edit_network_page.select_auth_server_internalserver('2')
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()		
		edit_network_page.assert_inactive_timeout('1000')
		edit_network_page.click_on_security_accordion()
		edit_network_page.assert_auth_server_2_internal_auth_server_1_external_server()
		edit_network_page.click_on_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()	
		
	def test_ath_11864_edit_enterprise_WPA_enterprise_employee_network_with_hide_SSID_termination(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()					
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
 		access = security.move_to_next_page()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()					
		edit_network_page.click_on_hide_ssid()
		edit_network_page.click_on_security_accordion()
		edit_network_page.setting_termination_option(True)
		edit_network_page.set_external_radius_server_1()
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.assert_hide_ssid_enabled()
		edit_network_page.click_on_security_accordion()
		edit_network_page.assert_termination_dropdown('Enabled')		
		edit_network_page.click_on_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11865_edit_enterprise_WPA_enterprise_employee_network_with_hide_SSID_authentication_survivability_cache_timeout(self):

		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_hide_ssid()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		security.set_external_radius_server_1()
		security.set_external_radius_server_2()
		security.setting_termination_option(True)	
		access = security.move_to_next_page()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()				
		edit_network_page.click_on_hide_ssid()
		edit_network_page.click_on_security_accordion()
		edit_network_page.setting_termination_option(False)
		edit_network_page.enable_authentication_survivability()
		edit_network_page.set_auth_cache_timeout('19')
		edit_network_page._save_settings()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()				
		edit_network_page.check_hide_ssid_checkbox('uncheck')
		edit_network_page.click_on_security_accordion()
		edit_network_page.assert_auth_survivability_cache_timeout_enable()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.assert_hide_ssid_disabled()
		edit_network_page.click_on_network()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11866_edit_enterprise_wpa_enterprise_employee_network_with_disable_ssid_accounting_int(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa=True)
		security.create_external_radius_server_in_auth_server_one()
		security.setting_termination_option(True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options(disable_ssid=True)
		edit_network_page.click_security_accordion()
		edit_network_page.configure_auth_server_settings(termination_disable=True)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.setting_accounting_interval_option(True,self.config.config_vars.edit_accounting_interval60)
		edit_network_page._save_settings()
		self.LeftPanel.assert_delta_config_icon()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.open_security_accordion()        
		self.browser.assert_check_box_value(edit_network_page.mac_authentication_enterprise, 'Mac authentication enterprise is not unchecked', check = False)
		self.browser.assert_check_box_value(edit_network_page.auth_failthru_enterprise, 'auth fail through is not unchecked', check = False) 
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11867_edit_enterprise_wpa_enterprise_employee_network_with_disable_ssid_authentication(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_enable_disable_ssid()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa=True)
		security.create_external_radiuds_server('1')
		security.configure_auth_server_settings(accounting_enable= True,acc_interval = True, auth_survivability= True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.uncheck_disable_ssid()
		edit_network_page.click_security_accordion()
		edit_network_page.create_external_radiuds_server('2')
		edit_network_page.enable_auth_server_settings(termination = True)
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_disable_ssid_checkbox('uncheck')
		edit_network_page.click_security_accordion()
		edit_network_page.assert_external_radius_auth_server_two()
		edit_network_page.assert_auth_server_settings(termination_enable = True)
		self.LeftPanel.go_to_network_page()     
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11868_create_enterprise_wpa_enterprise_employee_network_with_can_be_used_without_uplink(self):
		self.NetworkPage.delete_network_if_present()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(uplink=True)
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)        
		security.assert_default_fields_security_enterprise(wpa=True,skip_roaming_okc=True)
		security.set_auth_interval_time('10')
		access = security.click_on_next()
		access.finish_network_setup() 
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_edited_advance_options(uplink=True)
		edit_network_page.click_security_accordion()
		self.browser.assert_text(edit_network_page.reauth_interval, conf.reauth_interval_value, 'Reauth interval not set to "10"','value')
		self.LeftPanel.go_to_network_page()                      
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11869_edit_enterprise_wpa_enterprise_employee_network_with_can_be_used_without_uplink(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj   = basic_info.edit_advance_options(uplink=True)
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)        
		security.set_security_enterprise_dropdown(wpa=True)
		security.set_auth_interval_time('10')
		access = security.click_on_next()
		access.finish_network_setup() 
		edit_network_page = self.NetworkPage.edit_network()    
		edit_network_page.set_advance_settings_and_reauth_interval()		
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_advance_settings_and_reauth_interval()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11870_edit_enterprise_WPA_enterprise_employee_network_with_max_client_threshold_delimiter(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()	
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
 		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.set_max_client_threshold(255)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_mac_authentication_options()
		edit_network_page.set_delimiter_option()
		edit_network_page.set_uppercase_support_option('Enabled')
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_delimiter_uppercase_support_mac_auth_options_check()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_11871_edit_enterprise_WPA_enterprise_employee_network_with_max_client_threshold_blacklisting(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_max_client_threshold()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		security.set_mac_authentication_options()
		security.set_uppercase_support_dropdown()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.set_max_client_threshold(0)				
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_blacklisting_option('Enabled')
		edit_network_page.set_uppercase_support_option('Disabled')
		edit_network_page.set_delimiter_option_empty()
		edit_network_page._save_settings()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_blacklisting_uppercase_support_delimiter_changes()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear() 
		
		
	def test_ath_11872_edit_enterprise_WPA_enterprise_employee_network_with_local_probe_request_threshold(self):

		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()					
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
 		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_local_probe_request(100)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()		
		edit_network_page.set_external_radius_server_1()
		edit_network_page.set_external_radius_server_2()
		edit_network_page.set_blacklisting_option('Enabled')
		edit_network_page.set_max_authentication_option(10)
		edit_network_page.set_load_balancing_option('Enabled')
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_auth_server_loadbalancing_max_auth_failure()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11873_edit_enterprise_wpa_enterprise_employee_network_with_local_probe_request(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.edit_advance_options(local_probe = True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_wpa_enterprise()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.configure_blacklisting('Enabled',conf.max_authentication_failure)
		security.set_load_balancing_field(conf.blacklisting_option)
		security.configure_reauth_interval(conf.new_reauth_value,conf.reauth_intrvl_unit_hrs)
		security.set_max_auth_failures_value(conf.max_authentication_failure)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_enterprise_both_wpa2_and_wpa_enterprise_voice_network_with_local_probe_req()
		# edit_network = self.NetworkPage.edit_network()
		# edit_network.click_on_security_accordion()
		# self.set_load_balancing_option(conf.load_balancing_enabled)
		# edit_network._save_settings()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edited_values()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11874_edit_enterprise_wpa_enterprise_employee_network_with_mac_authentication_request_threshold(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_wpa_enterprise()
		security.configure_security_radio_fields(mac_authentication=True,mac_authentication_fail_thru=True)
		security.set_uppercase_support_dropdown()
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		edit_network.set_mac_authentication_options()
		edit_network.save_configuration()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()  
		self.browser.assert_check_box_value(edit_network.mac_authentication_enterprise, 'Mac authentication enterprise is not unchecked', check = True)
		self.browser.assert_check_box_value(edit_network.auth_failthru_enterprise, 'auth fail through is not unchecked', check = True)	
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11875_create_enterprise_wpa_enterprise_employee_network_with_key_management_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(wpa=True,skip_roaming_okc=True)        
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level(enterprise=True)
		edit_network.assert_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		edit_network.assert_external_radius_auth_server_one()
		edit_network.assert_external_radius_auth_server_two()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11876_edit_enterprise_wpa_enterprise_employee_network_with_authentication_server2(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_wpa_enterprise()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.enable_accounting_interval('1')
		security.enable_authentication_survivability()
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		edit_network.select_internal_server_in_auth_server_2()
		edit_network.save_configuration()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		self.browser.assert_drop_down_value(edit_network.authentication_server_2, conf.edit_Authentication_server, 'authentication server2 is not set to internal server')
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11877_create_enterprise_wpa_wpa2_enterprise_employee_network_with_inactive_timeout_interval(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(max_threshold=True)
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(wpa_wpa2=True)
		security.configure_auth_server_settings(roaming=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edited_advance_options(max_threshold=True)
		edit_network.click_security_accordion()
		edit_network.check_security_configurations()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11878_edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_inactive_timeout(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.edit_advance_options(inactivity_timeout = True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.configure_auth_server_settings(roaming = True)
		security.set_authentication_server(conf.internal_server)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_inactive_timeout()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_inactive_timeout()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	
	def test_ath_11879_edit_enterprise_both_WPA_2_and_WPA_enterprise_employee_network_with_hide_ssid_okc_termination(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()						
		security.click_on_enterprise_radio_button()		
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.set_external_radius_server_1()
		security.set_external_radius_server_2()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()					
		edit_network_page.click_on_hide_ssid()
		edit_network_page.click_on_security_accordion()
		edit_network_page.click_on_okc('Disable')
		edit_network_page.setting_termination_option(True)
		edit_network_page.assert_auth_server_2(True)
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()			
		edit_network_page.assert_hide_ssid_enabled()
		edit_network_page.click_on_security_accordion()		
		edit_network_page.assert_okc_checkbox(False)
		edit_network_page.assert_termination_dropdown('Enabled')
		edit_network_page.click_on_network()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11880_edit_enterprise_both_WPA_2_and_WPA_enterprise_employee_network_with_hide_SSID(self):

		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_hide_ssid()		
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()					 				
 		security.setting_termination_option(True)
 		security.set_external_radius_server_1()
 		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.click_on_hide_ssid()
		edit_network_page.click_on_security_accordion()
		edit_network_page.configure_auth_server_settings(termination_disable=True)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		edit_network_page.enable_authentication_survivability()
		edit_network_page.set_cache_timeout(conf.cache_timeout_19)
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.assert_hide_ssid_disabled()
		edit_network_page.click_on_security_accordion()		
		self.browser.assert_text(edit_network_page.auth_cache_timeout,conf.cache_timeout_19,'Cache time out not set to "19"','value')
		self.browser.assert_drop_down_value(edit_network_page.auth_survivability,conf.enabled_option, "Auth Survivability field is not set to 'Enable'")
		edit_network_page.click_on_network()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11881_edit_enterprise_both_wpa_2_and_wpa_enterprise_employee_network_with_disabled_ssid(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.configure_auth_server_settings(termination = True)
		security.create_external_radiuds_server('1')
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options(disable_ssid=True)
		edit_network_page.click_security_accordion()
		edit_network_page.edit_enterprise_employee_network_with_disabled_ssid()
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_disable_ssid_checkbox('check')
		edit_network_page.click_security_accordion()
		edit_network_page.assert_external_radius_auth_server_one()
		edit_network_page.assert_auth_server_settings(accounting_enable=True,termination_disable = True)
		self.LeftPanel.go_to_network_page()     
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11882_edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_disable_ssid(self):
		#self._delete_external_radius_servers()
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_with_advanced_settings_enable_disable_ssid()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.create_external_radius_server_in_auth_server_one()
		security.setting_termination_option(False)
		security.enable_accounting_interval(self.config.config_vars.edit_accounting_interval60)
		security.configure_auth_server_settings(auth_survivability=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options(disable_ssid_uncheck=True)
		edit_network_page.click_security_accordion()
		edit_network_page.set_external_radius_server_2()
		edit_network_page.setting_termination_option(True)
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_disable_ssid_checkbox('uncheck')
		edit_network_page.click_security_accordion()
		edit_network_page.assert_auth_server_settings(termination_enable=True)
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11883_create_enterprise_wpa_wpa2_enterprise_employee_network_with_can_be_used_without_uplink(self):
		self.NetworkPage.delete_network_if_present()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.edit_advance_options(uplink=True)
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(wpa_wpa2=True)
		security.configure_auth_server_settings(okc=True)
		security.configure_reauth_interval(conf.max_authentication_ten,conf.reauth_intrvl_unit_min)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edited_advance_options(uplink=True)
		edit_network.assert_security_level(enterprise=True)
		edit_network.assert_auth_server_settings(okc=True)
		edit_network.assert_reauth_interval_reauth_unit(conf.max_authentication_ten,conf.reauth_intrvl_unit_min)
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9286_edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_disable_ssid(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_with_advanced_settings_enable_disable_ssid()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.create_external_radius_server_in_auth_server_one()
		security.setting_termination_option(False)
		security.enable_accounting_interval(self.config.config_vars.edit_accounting_interval60)
		security.configure_auth_server_settings(auth_survivability=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options(disable_ssid=True)
		edit_network_page.click_security_accordion()
		edit_network_page.set_external_radius_server_2()
		edit_network_page.setting_termination_option(True)
		edit_network_page._save_settings()
		self.LeftPanel.assert_delta_config_icon()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_disable_ssid_checkbox('uncheck')
		edit_network_page.click_security_accordion()
		edit_network_page.assert_auth_server_settings(termination_enable=True)
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11884_edit_enterprise_both_WPA_2_and_WPA_enterprise_employee_network_with_can_be_used(self):

		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_can_be_used_without_uplink()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.click_on_okc('Disable')
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.set_reauth_interval_options(10)
		access = security.move_to_next_page()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.click_on_can_be_used_without_uplink()
		edit_network_page.click_on_security_accordion()
		edit_network_page.click_on_okc('Enable')
		edit_network_page.set_reauth_interval()
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_can_be_used_without_uplink_okc_reauth_interval()
		self.take_s2_snapshot()
		# edit_network_page.networks.click()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11885_edit_enterprise_both_wpa_2_and_wpa_enterprise_employee_network_with_max_client_threshold(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_max_client_threshold_and_mac_authentication() 
		edit_network_page = self.NetworkPage.edit_network()		
		edit_network_page.assert_delimiter_uppercase_support_mac_auth_options_check()
		self.take_s2_snapshot()
		# edit_network_page.networks.click()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11886_edit_enterprise_both_wpa_2_and_wpa_enterprise_employee_network_with_max_client_blacklisting(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj   = basic_info.edit_advance_options(max_threshold=True)
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.enable_mac_authentication_enterprise()
		security.configure_auth_server_settings(uppercase_support= True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_enterprise_employee_network_blacklisting_enabled()
		edit_network_page = self.NetworkPage.edit_network()		
		edit_network_page.assert_blacklisting_uppercase_support_delimiter_changes()
		self.take_s2_snapshot()
		# edit_network_page.networks.click()
		self.NetworkPage.delete_network_if_present()  
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11887_edit_enterprise_both_wpa_2_and_wpa_enterprise_employee_network_with_local_probe(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.set_localprobe_feilds()
		edit_network_page.click_security_accordion()
		edit_network_page.create_external_radiuds_server('1')
		edit_network_page.create_external_radiuds_server('2')
		edit_network_page.enable_auth_server_settings(balancing=True,blacklisting=True,max_auth_failures=True)
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.assert_external_radius_auth_server_one()
		edit_network_page.assert_external_radius_auth_server_two()
		edit_network_page.assert_auth_server_settings(balancing=True,blacklisting=True,max_auth_failures=True)
		self.LeftPanel.go_to_network_page()     
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11888_edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_local_probe(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.edit_advance_options(local_probe = True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise = True)
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.configure_blacklisting('Enable',conf.max_authentication_failure)
		security.set_load_balancing_field(conf.blacklisting_option)
		security.configure_reauth_interval(conf.new_reauth_value,conf.reauth_intrvl_unit_hrs)
		# security.set_max_auth_failures_value(conf.max_authentication_failure)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_enterprise_both_wpa2_and_wpa_enterprise_voice_network_with_local_probe_req()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options()
		edit_network.assert_edited_values()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11889_edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_authentication(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.create_external_radiuds_server('1')
		security.configure_security_radio_fields(mac_authentication=True,mac_authentication_fail_thru=True)
		security.set_uppercase_support_dropdown()
		security.configure_security_radio_fields(okc = True)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		edit_network.set_mac_authentication_options()
		edit_network.configure_okc()
		edit_network.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		self.browser.assert_check_box_value(edit_network.mac_authentication_enterprise, 'Mac authentication enterprise is not unchecked', check = True)
		self.browser.assert_check_box_value(edit_network.auth_failthru_enterprise, 'auth fail through is not unchecked', check = True)
		self.browser.assert_check_box_value(edit_network.auth_failthru_enterprise, 'okc is not unchecked', check = True)
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11890_create_enterprise_wpa_wpa2_enterprise_employee_network_with_key_management_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()       
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level(enterprise=True)
		edit_network.assert_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		edit_network.assert_external_radius_auth_server_one()
		edit_network.assert_external_radius_auth_server_two()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11891_edit_enterprise_wpa_2_and_wpa_enterprise_employee_network_with_authentication_server_2(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,auth_survivability=False)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		edit_network.select_internal_server_in_auth_server_2()
		edit_network.save_configuration()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level(enterprise=True)
		edit_network.assert_auth_server_2_internal()
		edit_network.networks.click()
		# edit_network.assert_auth_server_settings(accounting_enable=True,acc_interval=True,auth_survivability=True)
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11892_create_enterprise_dynamic_WEP_employee_network_with_inactive_timeout_virtual_con(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_inactive_timeout(3600)
		security = virtual_lan.select_virtual_controller()
		security.click_on_enterprise_radio_button()
		security.set_key_management_dynamic_wep_option()
		security.assert_auth_server_internal_server_option()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_inactive_timeout_vlan_security_level_key_management()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()		
		
	def test_ath_11893_edit_enterprise_dynamic_WEP_employee_network_with_inactivity_timeout_authentication(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.edit_advance_options(inactivity_timeout=True)
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_dynamic_wep_option()
		security.set_authentication_server('InternalServer')
		access = security.move_to_next_page()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(timeout=True)
		edit_network.open_security_accordion() 
		edit_network.create_external_radius_server_in_auth_server_one()
		edit_network.select_internal_server_in_auth_server_2()
		edit_network.save_configuration()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11894_edit_enterprise_dynamic_WEP_employee_network_with_hide_SSID_termination_use_session_key_for_LEAP(self):
		self.take_s1_snapshot()	
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()		
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_dynamic_wep_option()
 		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.click_on_hide_ssid()		 					
		edit_network_page.click_on_security_accordion()
		edit_network_page.setting_termination_option(True)
		edit_network_page.set_session_key_for_leap()
		edit_network_page.set_external_radius_server_1()
		edit_network_page._save_settings()					
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_hide_ssid_termination_session_key_for_leap()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11895_edit_enterprise_dynamic_wep_employee_network_with_hide_ssid_authentication_survivability(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_with_advanced_settings_enable_hide_ssid()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(dynamic_wep=True)
		security.configure_auth_server_settings(termination= True)
		security.set_external_radius_server_1()
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options(hide_ssid_uncheck=True)
		edit_network_page.click_security_accordion()
		edit_network_page.setting_termination_option(False)
		edit_network_page.create_external_radius_server_in_auth_server_one()
		edit_network_page.enable_auth_server_settings(auth_survivability = True)
		edit_network_page.set_cache_timeout(self.config.config_vars.cache_timeout_value)
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_hide_ssid_checkbox('uncheck')
		edit_network_page.click_security_accordion()
		edit_network_page.assert_auth_server_settings(auth_survivability = True)
		edit_network_page.assert_external_radius_auth_server_one()
		edit_network_page.assert_cache_timeout(19)
		self.LeftPanel.go_to_network_page()     
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11896_edit_enterprise_dynamic_WEP_employee_network_with_disable_SSID_accounting_interv(self):
		self.take_s1_snapshot()	
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_dynamic_wep_option()
		security.set_external_radius_server_1()
 		security.setting_termination_option(True)
 		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.click_on_disable_ssid()
		edit_network_page._save_settings()	
		edit_network_page = self.NetworkPage.edit_network()	
		edit_network_page.click_on_security_accordion()
		edit_network_page.setting_termination_option(False)
		edit_network_page.setting_accounting_interval_option(True,60)
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()	
		edit_network_page.assert_disable_ssid_termination_accounting_option()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11897_edit_enterprise_dynamic_WEP_employee_network_with_disable_SSID_authentication(self):

		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_and_assert_employee_network_with_disable_ssid()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_auth_server_termination_accounting()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_disable_ssid_auth_server_termination()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_disable_ssid_auth_server_termination_changes()
		self.NetworkPage.delete_network_if_present()						
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11898_create_enterprise_dynamic_WEP_employee_network_with_can_be_used_without_uplink_select(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_can_be_used_without_uplink()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_reauth_interval_use_session_key()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_key_management_reauth_interval_use_session_key_changes()
		self.NetworkPage.delete_network_if_present()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_11899_edit_enterprise_dynamic_WEP_employee_network_with_can_be_used_without_uplink(self):

		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_can_be_used_without_uplink()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_reauth_interval_use_session_key()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_reauth_interval_session_key_with_advanced_settings()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()		
		edit_network_page.assert_reauth_interval_session_key_with_advanced_settings_changes()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	
	def test_ath_11900_edit_enterprise_dynamic_WEP_employee_network_with_max_client_threshold_delimiter(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_can_be_used_without_uplink()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_dynamic_wep()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_max_client_threshold(255)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_delimiter_uppercase_support_mac_auth_options()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_delimiter_uppercase_support_mac_auth_options_check()	
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_11901_edit_enterprise_dynamic_WEP_employee_network_with_max_client_threshold_blacklist(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info_with_max_client_threshold()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_dynamic_wep_with_uppercase_support_enabled()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_max_client_threshold(0)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_blacklisting_uppercase_support_delimiter_options()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_blacklisting_uppercase_support_delimiter_changes()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
 	def test_ath_11902_edit_enterprise_dynamic_WEP_employee_network_with_local_probe_request_threshold(self):
 		self.take_s1_snapshot()
		self._delete_network_auth_server()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_dynamic_wep()					
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_local_probe_request(100)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_auth_server_loadbalancing_max_auth_failure()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_auth_server_loadbalancing_max_auth_failure()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()	
		
	def test_ath_11903_edit_enterprise_dynamic_WEP_employee_network_with_local_probe_request(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.edit_advance_options(local_probe = True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(dynamic_wep=True)
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.configure_blacklisting('Enable',conf.max_authentication_failure)
		security.set_load_balancing_field(conf.blacklisting_option)
		security.configure_reauth_interval(conf.new_reauth_value,conf.reauth_intrvl_unit_hrs)
		# security.set_max_auth_failures_value(conf.max_authentication_failure)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_enterprise_both_wpa2_and_wpa_enterprise_voice_network_with_local_probe_req()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edited_values()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11904_edit_enterprise_dynamic_WEP_employee_network_with_mac_authentication_mac_authe(self):
		self.take_s1_snapshot()	
		self._delete_network_auth_server()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_dynamic_wep_option()
		security.set_mac_authentication_options()
		security.set_uppercase_support_dropdown()
		security.set_leap_use_session_key()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_mac_authentication_options()
		edit_network_page.set_leap_use_session_key(True)
		# edit_network_page.assert_uppercase_support_delimiter_options()
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_disabled_mac_authentication_options_and_session_key_for_leap()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11905_create_enterprise_dynamic_wep_employee_network_with_key_management_accounting_interval(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.set_security_level_and_key_management('Enterprise')
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.configure_auth_server_settings(accounting_enable = True,acc_interval=True, auth_survivability=True, balancing=True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.assert_auth_server_settings(accounting_enable=True,balancing=True,auth_survivability=True)
		self.LeftPanel.go_to_network_page()     
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11906_edit_enterprise_dynamic_WEP_employee_network_with_authentication_server2_accounting(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_dynamic_wep_option()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.enable_accounting_interval('1')
		security.enable_authentication_survivability()
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		edit_network.select_internal_server_in_auth_server_2()
		edit_network.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		self.browser.assert_drop_down_value(edit_network.authentication_server_2, conf.edit_Authentication_server, 'authentication server2 is not set to internal server')
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	
		