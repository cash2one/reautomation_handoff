import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class RoleBased(ConfigurationTest):
	'''
	Test class for role based test class in wireless network module.
	'''

	def test_ath_3368_check_role_assignments_rules(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.guest_network_info()
		security  = vlan.use_vlan_defaults()
		access = security.click_on_next()
		access.assert_role_assignment_options()
		self.take_s2_snapshot()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_1708_create_role(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.guest_network_info()
		security  = vlan.use_vlan_defaults()
		access = security.click_on_next()
		access.create_role_assignment_rule()
		access.create_role()
		access.finish_network_setup()
		self.take_s2_snapshot()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_new_role()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_1709_edit_role(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.guest_network_info()
		security  = vlan.use_vlan_defaults()
		access = security.click_on_next()
		access.create_role_assignment_rule()
		access.edit_role()
		access.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_1710_delete_role(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.guest_network_info()
		security  = vlan.use_vlan_defaults()
		access = security.click_on_next()
		access.create_role_assignment_rule()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.access_accordion.click()
		edit_network.select_role()
		edit_network.delete_role()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_3360_pre_auth_employee_personal_network(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()
		security.enable_mac_authentication()
		access_page = security.click_on_next()
		access_page.assert_pre_authentication_role()
		access_page.create_and_edit_role_assignment_rule()
		access_page.enable_pre_authentication_role()
		access_page.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_3361_mac_auth_employee_enterprise_network(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()
		security.enteprise.click()
		access_page = security.click_on_next()
		access_page.assert_mac_authentication_role()
		access_page.create_and_edit_role_assignment_rule()
		access_page.enforce_machine_authentication_role()
		access_page.finish_network_setup()
		self.take_s2_snapshot()        
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()



	def test_ath_3362_pre_auth_and_mac_auth_employee_enterprise_network(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()        
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()
		security.enteprise.click()
		security.mac_authentication_enterprise.click()
		access_page = security.click_on_next()
		access_page.assert_mac_authentication_role()
		access_page.assert_pre_authentication_role()
		access_page.create_and_edit_role_assignment_rule()
		access_page.enforce_machine_authentication_role()
		access_page.enable_pre_authentication_role()
		access_page.finish_network_setup()
		self.take_s2_snapshot()    
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_3363_guest_network(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()    
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.guest_network_info()
		security  = vlan.use_vlan_defaults()
		access_page = security.click_on_next()
		access_page.role_radio.click()
		access_page.enable_pre_authentication_role()
		access_page.finish_network_setup()
		self.take_s2_snapshot()    
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_3364_guest_network_mac_auth_enabled(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.guest_network_info()
		security  = vlan.use_vlan_defaults()
		security.enable_mac_authentication()
		access_page = security.click_on_next()
		access_page.role_radio.click()
		access_page.assert_pre_authentication_role()
		access_page.assert_mac_authentication_role(wireless=True)
		access_page.enable_pre_authentication_role()       
		access_page.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_3365_create_access_rules_for_role(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.guest_network_info()
		security  = vlan.use_vlan_defaults()
		access_page = security.click_on_next()
		access_page.role_radio.click()
		access_page.create_access_rule_for_role()
		access_page.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_3366_delete_access_rules_of_role(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.guest_network_info()
		security  = vlan.use_vlan_defaults()
		access_page = security.click_on_next()
		access_page.role_radio.click()
		access_page.create_access_rule_for_role()
		access_page.finish_network_setup()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.access_accordion.click()
		edit_network.delete_multiple_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_3367_move_rules_of_role(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.guest_network_info()
		security  = vlan.use_vlan_defaults()
		access_page = security.click_on_next()
		access_page.role_radio.click()
		access_page.create_access_rule_for_role()
		access_page.finish_network_setup()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.access_accordion.click()
		edit_network.move_access_rule()
		self.NetworkPage.delete_network_if_present()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_8987_check_created_roles_in_airgroup_setting(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.guest_network_info()
		security  = vlan.use_vlan_defaults()
		access_page = security.click_on_next()
		access_page.role_radio.click()
		access_page.create_multiple_roles()
		access_page.finish_network_setup()
		self.take_s2_snapshot()
		services_page = self.LeftPanel.go_to_services()
		services_page.assert_airgroup_role()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_multiple_roles()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_8989_check_valid_range_custom_udp_tcp(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.guest_network_info()
		security  = vlan.use_vlan_defaults()
		access_page = security.click_on_next()
		access_page.role_radio.click()
		access_page.create_custom_tcp_access_rule()
		access_page.create_custom_udp_access_rule()
		access_page.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_8994_check_role_available_in_role_assignment_rules(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.guest_network_info()
		security  = vlan.use_vlan_defaults()
		access_page = security.click_on_next()
		access_page.role_radio.click()
		access_page.create_multiple_roles()
		access_page.assert_role_in_role_assignment_rules()
		access_page.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_multiple_roles()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_10994_switching_from_role_based_to_network_based_access_rules(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()        
		security.enable_mac_authentication()
		access_page = security.click_on_next()
		access_page.role_radio.click()
		access_page.create_new_role_1()
		access_page.create_new_role_3()
		access_page.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page._click_access_accordion()
		edit_network_page.create_new_vlan_rule()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page._click_access_accordion()
		edit_network_page.delete_role_assignment_rules()
		edit_network_page.delete_network_based_rule()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page._click_access_accordion()
		edit_network_page.asserted_deleted_roles()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_10987_no_allow_any_to_all_destinations_if_save_is_not_applied(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()        
		security.enable_mac_authentication()
		access_page = security.click_on_next()
		access_page.role_radio.click()
		access_page.create_access_rule_for_role_based_1(conf.Service_Role1_noe,conf.action_role_deny,conf.destination_value,conf.valid_destination_ip)
		access_page.create_access_rule_for_role_based_2(conf.service_bootp,conf.action_role_deny,conf.destination_default_value)
		access_page.create_access_rule_for_role_based_3(conf.service_dhcp_value,conf.action_role_deny,conf.destination_value,conf.dest_ip)
		access_page.create_access_rule_for_role_based_4(conf.service_role_dns,conf.action_role_deny,conf.destination_value,conf.action_ip4)
		access_page.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page._click_access_accordion()
		edit_network_page.delete_access_rule_and_assert()
		edit_network_page.create_access_rule_for_role_based_3(conf.service_https,conf.action_role_deny,conf.destination_default_value)
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page._click_access_accordion()
		edit_network_page.assert_created_access_rule()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
		