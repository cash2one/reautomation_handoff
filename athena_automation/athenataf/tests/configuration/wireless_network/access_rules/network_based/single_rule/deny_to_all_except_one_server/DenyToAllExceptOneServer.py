from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class DenyToAllExceptOneServer(ConfigurationTest):
    '''
    Test class for action deny of single rule.
    '''
    def test_ath_1263_deny_lpd_udp_to_all_except_one_server(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.service_ldp_udp, conf.action_role_deny, conf.Destination_Role1_Except_to_a_particular_server)
        access.set_destination_ip_mask_domain(conf.ip_valid_value,'','')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.service_ldp_udp, conf.Destination_Role1_Except_to_a_particular_server)
        edit_network_page.assert_new_rule_deny()
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()

    def test_ath_1264_deny_msrpc_tcp_to_all_except_one_server(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.Service_Role1_msrpc_tcp, conf.action_role_deny, conf.Destination_Role1_Except_to_a_particular_server)
        access.set_destination_ip_mask_domain(conf.ip_valid_value,'','')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.Service_Role1_msrpc_tcp, conf.Destination_Role1_Except_to_a_particular_server)
        edit_network_page.assert_new_rule_deny()
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1265_deny_natt_to_all_except_one_server(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.action_natt, conf.action_role_deny, conf.Destination_Role1_Except_to_a_particular_server)
        access.set_destination_ip_mask_domain(conf.ip_valid_value,'','')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.action_natt, conf.Destination_Role1_Except_to_a_particular_server)
        edit_network_page.assert_new_rule_deny()
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1266_deny_netbios_dgm_to_all_except_one_server(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.Service_Role1_netbios_dgm, conf.action_role_deny, conf.Destination_Role1_Except_to_a_particular_server)
        access.set_destination_ip_mask_domain(conf.ip_valid_value,'','')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.Service_Role1_netbios_dgm, conf.Destination_Role1_Except_to_a_particular_server)
        edit_network_page.assert_new_rule_deny()
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()        
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()  

    def test_ath_1267_deny_netbios_ns_to_all_except_one_server(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.service_netbios, conf.action_role_deny, conf.Destination_Role1_Except_to_a_particular_server)
        access.set_destination_ip_mask_domain(conf.ip_valid_value,'','')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.service_netbios, conf.Destination_Role1_Except_to_a_particular_server)
        edit_network_page.assert_new_rule_deny()
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()        
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()

    def test_ath_1268_deny_noe_to_all_except_one_server(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.Service_Role1_noe, conf.action_role_deny, conf.Destination_Role1_Except_to_a_particular_server)
        access.set_destination_ip_mask_domain(conf.ip_valid_value,'','')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.Service_Role1_noe, conf.Destination_Role1_Except_to_a_particular_server)
        edit_network_page.assert_new_rule_deny()
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()        
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1269_deny_noe_oxo_to_all_except_one_server(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.action_noe_oxo, conf.action_role_deny, conf.Destination_Role1_Except_to_a_particular_server)
        access.set_destination_ip_mask_domain(conf.ip_valid_value,'','')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.action_noe_oxo, conf.Destination_Role1_Except_to_a_particular_server)
        edit_network_page.assert_new_rule_deny()
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()        
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1270_deny_netbios_ssn_to_all_except_one_server(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.Service_Role1_netbios_ssn, conf.action_role_deny, conf.Destination_Role1_Except_to_a_particular_server)
        access.set_destination_ip_mask_domain(conf.ip_valid_value,'','')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.Service_Role1_netbios_ssn, conf.Destination_Role1_Except_to_a_particular_server)
        edit_network_page.assert_new_rule_deny()
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()        
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1271_deny_nterm_to_all_except_one_server(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.service_nterm, conf.action_role_deny, conf.Destination_Role1_Except_to_a_particular_server)
        access.set_destination_ip_mask_domain(conf.ip_valid_value,'','')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.service_nterm, conf.Destination_Role1_Except_to_a_particular_server)
        edit_network_page.assert_new_rule_deny()
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()        
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1272_deny_ntp_to_all_except_one_server(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.Service_Role1_ntp, conf.action_role_deny, conf.Destination_Role1_Except_to_a_particular_server)
        access.set_destination_ip_mask_domain(conf.ip_valid_value,'','')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.Service_Role1_ntp, conf.Destination_Role1_Except_to_a_particular_server)
        edit_network_page.assert_new_rule_deny()
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()        
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
  
