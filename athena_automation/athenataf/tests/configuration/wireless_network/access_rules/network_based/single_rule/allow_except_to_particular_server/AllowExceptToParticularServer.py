import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class AllowExceptToParticularServer(ConfigurationTest):
	'''
	Test class for action allow of single rule.
	'''

	def test_ath_1584_allow_l2tp_except_to_a_particular_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.action_l2tp, conf.action_default_value, conf.Destination_Role1_Except_to_a_particular_server)		
		access.set_destination_ip_mask_domain(conf.valid_destination_ip,'','')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('l2tp', 'Except to a particular server')
		edit_network_page.assert_on_action('Allow')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()		
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1585_allow_lpd_tcp_except_to_a_particular_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.Service_Role1_lpd_tcp, conf.action_default_value, conf.Destination_Role1_Except_to_a_particular_server)		
		access.set_destination_ip_mask_domain(conf.valid_destination_ip,'','')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('lpd-tcp', 'Except to a particular server')
		edit_network_page.assert_on_action('Allow')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()		
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1586_allow_lpd_udp_except_to_a_particular_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.service_ldp_udp, conf.action_default_value, conf.Destination_Role1_Except_to_a_particular_server)				
		access.set_destination_ip_mask_domain(conf.valid_destination_ip,'','')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('lpd-udp', 'Except to a particular server')
		edit_network_page.assert_on_action('Allow')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()		
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1587_allow_msrpc_tcp_except_to_a_particular_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.Service_Role1_msrpc_tcp, conf.action_default_value, conf.Destination_Role1_Except_to_a_particular_server)		
		access.set_destination_ip_mask_domain(conf.valid_destination_ip,'','')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('msrpc-tcp', 'Except to a particular server')
		edit_network_page.assert_on_action('Allow')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()		
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1588_allow_msrpc_udp_except_to_a_particular_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.service_mspsc_udp, conf.action_default_value, conf.Destination_Role1_Except_to_a_particular_server)		
		access.set_destination_ip_mask_domain(conf.valid_destination_ip,'','')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('msrpc-udp', 'Except to a particular server')
		edit_network_page.assert_on_action('Allow')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()		
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1589_natt_tcp_except_to_a_particular_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.action_natt, conf.action_default_value, conf.Destination_Role1_Except_to_a_particular_server)		
		access.set_destination_ip_mask_domain(conf.valid_destination_ip,'','')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('natt', 'Except to a particular server')
		edit_network_page.assert_on_action('Allow')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()		
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1590_allow_netbios_dgm_except_to_a_particular_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.Service_Role1_netbios_dgm, conf.action_default_value, conf.Destination_Role1_Except_to_a_particular_server)		
		access.set_destination_ip_mask_domain(conf.valid_destination_ip,'','')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('netbios-dgm', 'Except to a particular server')
		edit_network_page.assert_on_action('Allow')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()		
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1591_allow_netbios_ns_except_to_a_particular_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.service_netbios, conf.action_default_value, conf.Destination_Role1_Except_to_a_particular_server)		
		access.set_destination_ip_mask_domain(conf.valid_destination_ip,'','')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('netbios-ns', 'Except to a particular server')
		edit_network_page.assert_on_action('Allow')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()		
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1592_allow_noe_except_to_a_particular_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.Service_Role1_noe, conf.action_default_value, conf.Destination_Role1_Except_to_a_particular_server)		
		access.set_destination_ip_mask_domain(conf.valid_destination_ip,'','')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('noe', 'Except to a particular server')
		edit_network_page.assert_on_action('Allow')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()		
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1593_allow_noe_oxo_except_to_a_particular_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.action_noe_oxo, conf.action_default_value, conf.Destination_Role1_Except_to_a_particular_server)
		access.set_destination_ip_mask_domain(conf.valid_destination_ip,'','')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('noe-oxo', 'Except to a particular server')
		edit_network_page.assert_on_action('Allow')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()		
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()