from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class SourceNatToANetwork(ConfigurationTest):
	'''
	Test class for Source-Nat To All Destinations
	'''
	def test_ath_1480_source_nat_netbios_ssn_to_a_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.Service_Role1_netbios_ssn, conf.service_action_value, conf.Destination_Role1_To_a_network)
		access.set_destination_ip_mask_domain(conf.valid_destination_ip_2,conf.dest3_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.Service_Role1_netbios_ssn, conf.Destination_Role1_To_a_network)
		edit_network_page.assert_on_action(conf.edit_service_action_value)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1481_source_nat_nterm_to_a_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.service_nterm, conf.service_action_value, conf.Destination_Role1_To_a_network)
		access.set_destination_ip_mask_domain(conf.valid_destination_ip_2,conf.dest3_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.service_nterm, conf.Destination_Role1_To_a_network)
		edit_network_page.assert_on_action(conf.edit_service_action_value)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1482_source_nat_ntp_to_a_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.Service_Role1_ntp, conf.service_action_value, conf.Destination_Role1_To_a_network)
		access.set_destination_ip_mask_domain(conf.valid_destination_ip_2,conf.dest3_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.Service_Role1_ntp, conf.Destination_Role1_To_a_network)
		edit_network_page.assert_on_action(conf.edit_service_action_value)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1483_source_nat_papi_to_a_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.action_papi, conf.service_action_value, conf.Destination_Role1_To_a_network)
		access.set_destination_ip_mask_domain(conf.valid_destination_ip_2,conf.dest3_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.action_papi, conf.Destination_Role1_To_a_network)
		edit_network_page.assert_on_action(conf.edit_service_action_value)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1484_source_nat_pop3_to_a_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.Service_Role1_pop3, conf.service_action_value, conf.Destination_Role1_To_a_network)
		access.set_destination_ip_mask_domain(conf.valid_destination_ip_2,conf.dest3_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.Service_Role1_pop3, conf.Destination_Role1_To_a_network)
		edit_network_page.assert_on_action(conf.edit_service_action_value)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1485_source_nat_pptp_to_a_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.service_pptp, conf.service_action_value, conf.Destination_Role1_To_a_network)
		access.set_destination_ip_mask_domain(conf.valid_destination_ip_2,conf.dest3_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.service_pptp, conf.Destination_Role1_To_a_network)
		edit_network_page.assert_on_action(conf.edit_service_action_value)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1486_source_nat_rtsp_to_a_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.Service_Role1_rtsp, conf.service_action_value, conf.Destination_Role1_To_a_network)
		access.set_destination_ip_mask_domain(conf.valid_destination_ip_2,conf.dest3_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.Service_Role1_rtsp, conf.Destination_Role1_To_a_network)
		edit_network_page.assert_on_action(conf.edit_service_action_value)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1487_source_nat_sccp_to_a_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.action_sccp, conf.service_action_value, conf.Destination_Role1_To_a_network)
		access.set_destination_ip_mask_domain(conf.valid_destination_ip_2,conf.dest3_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.action_sccp, conf.Destination_Role1_To_a_network)
		edit_network_page.assert_on_action(conf.edit_service_action_value)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1488_source_nat_sips_to_a_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.Service_Role1_sips, conf.service_action_value, conf.Destination_Role1_To_a_network)
		access.set_destination_ip_mask_domain(conf.valid_destination_ip_2,conf.dest3_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.Service_Role1_sips, conf.Destination_Role1_To_a_network)
		edit_network_page.assert_on_action(conf.edit_service_action_value)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1489_source_nat_sip_tcp_to_a_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.service_sip_tcp, conf.service_action_value, conf.Destination_Role1_To_a_network)
		access.set_destination_ip_mask_domain(conf.valid_destination_ip_2,conf.dest3_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.service_sip_tcp, conf.Destination_Role1_To_a_network)
		edit_network_page.assert_on_action(conf.edit_service_action_value)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1490_source_nat_sip_udp_to_a_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.action_sip_udp, conf.service_action_value, conf.Destination_Role1_To_a_network)
		access.set_destination_ip_mask_domain(conf.valid_destination_ip_2,conf.dest3_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.action_sip_udp, conf.Destination_Role1_To_a_network)
		edit_network_page.assert_on_action(conf.edit_service_action_value)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
		