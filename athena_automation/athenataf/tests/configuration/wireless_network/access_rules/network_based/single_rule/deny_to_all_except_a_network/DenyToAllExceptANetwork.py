from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class DenyToAllExceptANetwork(ConfigurationTest):
	'''
	Test class for action deny of single rule.
	'''
	def test_ath_1409_deny_to_ftp_to_all_except_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.action_ftp, conf.action_role_deny, conf.dest_except_ntwrk)
		access.set_destination_ip_mask_domain(conf.pop3_destination_ip_1,conf.dest2_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.action_ftp, conf.dest_except_ntwrk)
		edit_network_page.assert_new_rule_action(conf.action_role_deny)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_1410_deny_gre_to_all_except_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.service_role_gre, conf.action_role_deny, conf.dest_except_ntwrk)
		access.set_destination_ip_mask_domain(conf.pop3_destination_ip_1,conf.dest2_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.service_role_gre, conf.dest_except_ntwrk)
		edit_network_page.assert_new_rule_action(conf.action_role_deny)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_1411_deny_to_h323_tcp_to_all_except_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.service_role_h323_tcp, conf.action_role_deny, conf.dest_except_ntwrk)
		access.set_destination_ip_mask_domain(conf.pop3_destination_ip_1,conf.dest2_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.service_role_h323_tcp, conf.dest_except_ntwrk)
		edit_network_page.assert_new_rule_action(conf.action_role_deny)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_7175_deny_to_adp_to_all_except_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.service_dropdown_adp, conf.action_role_deny, conf.dest_except_ntwrk)
		access.set_destination_ip_mask_domain(conf.pop3_destination_ip_1,conf.dest2_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.service_dropdown_adp, conf.dest_except_ntwrk)
		edit_network_page.assert_new_rule_action(conf.action_role_deny)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_7176_deny_to_dns_to_all_except_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.Service_Role1_dns, conf.action_role_deny, conf.dest_except_ntwrk)
		access.set_destination_ip_mask_domain(conf.pop3_destination_ip_1,conf.dest2_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.Service_Role1_dns, conf.dest_except_ntwrk)
		edit_network_page.assert_new_rule_action(conf.action_role_deny)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_7177_deny_to_esp_to_all_except_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.Service_Role1_esp, conf.action_role_deny, conf.dest_except_ntwrk)
		access.set_destination_ip_mask_domain(conf.pop3_destination_ip_1,conf.dest2_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.Service_Role1_esp, conf.dest_except_ntwrk)
		edit_network_page.assert_new_rule_action(conf.action_role_deny)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_7178_deny_to_ike_to_all_except_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.Service_Role1_ike, conf.action_role_deny, conf.dest_except_ntwrk)
		access.set_destination_ip_mask_domain(conf.pop3_destination_ip_1,conf.dest2_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.Service_Role1_ike, conf.dest_except_ntwrk)
		edit_network_page.assert_new_rule_action(conf.action_role_deny)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_7179_deny_to_msrpc_udp_to_all_except_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.Service_Role1_msrpc_tcp, conf.action_role_deny, conf.dest_except_ntwrk)
		access.set_destination_ip_mask_domain(conf.pop3_destination_ip_1,conf.dest2_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.Service_Role1_msrpc_tcp, conf.dest_except_ntwrk)
		edit_network_page.assert_new_rule_action(conf.action_role_deny)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_7180_deny_to_sccp_to_all_except_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.action_sccp, conf.action_role_deny, conf.dest_except_ntwrk)
		access.set_destination_ip_mask_domain(conf.pop3_destination_ip_1,conf.dest2_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.action_sccp, conf.dest_except_ntwrk)
		edit_network_page.assert_new_rule_action(conf.action_role_deny)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_7181_deny_to_sips_to_all_except_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.configure_employee_security()
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.set_rule_service_action_and_destination(conf.Service_Role1_sips, conf.action_role_deny, conf.dest_except_ntwrk)
		access.set_destination_ip_mask_domain(conf.pop3_destination_ip_1,conf.dest2_net_mask,'')
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.Service_Role1_sips, conf.dest_except_ntwrk)
		edit_network_page.assert_new_rule_action(conf.action_role_deny)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
        
