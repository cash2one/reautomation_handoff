from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest
import time
class CaptivePortal(ConfigurationTest):
	'''
	Test class for action allow of Captive Portal.
	'''

	def test_ath_2135_create_internal_captive_portal(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()
		security.enable_mac_authentication()
		access_page = security.click_on_next()
		access_page.network_based.click()
		access_page.create_captive_portal()
		access_page.save_settings.click()
		access_page.finish_network_setup()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.access_accordion.click()
		edit_network.assert_captive_portal()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_2136_create_external_captive_portal(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()		
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()
		security.enable_mac_authentication()
		access_page = security.click_on_next()
		access_page.network_based.click()
		access_page.create_captive_portal(external=True)
		access_page.save_settings.click()
		access_page.finish_network_setup()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.access_accordion.click()
		edit_network.assert_captive_portal()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8825_internal_captive_portal_exclude_3g_4g_wifi_exit(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()	
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.guest_network_info()
		security  = vlan.use_vlan_defaults()
		security.set_splash_page_type_value(conf.Splash_page_Acknowledged)
		security.enable_mac_authentication()
		security.set_disable_if_uplink_type_is(True,True,False)
		access_page = security.click_on_next()
		access_page.click_role_access()
		access_page.create_new_roles_with_different_rules()
		access_page.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network._click_access_accordion()
		edit_network.move_rules()
		edit_network.delete_access_role()
		edit_network.networks.click()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_3358_change_internal_splash_page_settings(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()	
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()
		security.enable_mac_authentication()
		access_page = security.click_on_next()
		access_page.network_based.click()
		access_page.create_captive_portal()
		access_page.splash_page_settings()
		access_page.finish_network_setup()       
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.access_accordion.click()
		edit_network.assert_captive_portal()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_3359_change_external_splash_page_settings(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()	
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()
		security.enable_mac_authentication()
		access_page = security.click_on_next()
		access_page.network_based.click()
		access_page.create_captive_portal(external=True)
		access_page.create_new_external_captive_portal()
		time.sleep(10)
		access_page.save_settings.click()
		time.sleep(10)
		access_page.finish_network_setup()
		time.sleep(10)
		self.take_s2_snapshot()
		time.sleep(5)
		edit_network = self.NetworkPage.edit_network()
		edit_network.access_accordion.click()
		edit_network.assert_captive_portal()
		self.LeftPanel.go_to_network_page()
		time.sleep(5)
		security_page = self.LeftPanel.go_to_security()
		time.sleep(5)
		security_page.go_to_roles()
		security_page.external_captive_profile.click()
		security_page.delete_captive_portal()
		self.LeftPanel.go_to_network_page()		
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

