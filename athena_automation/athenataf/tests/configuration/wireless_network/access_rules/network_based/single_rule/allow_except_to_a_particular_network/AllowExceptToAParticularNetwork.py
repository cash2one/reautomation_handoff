import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class AllowExceptToAParticularNetwork(ConfigurationTest):
    '''
        
    '''
    
    def test_ath_1605_allow_smb_tcp_except_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.Service_Role1_smb_tcp, conf.action_default_value, conf.dest_except_ntwrk)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created('smb-tcp', 'Except to a network')
        edit_network_page.assert_on_action('Allow')
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1606_allow_smb_udp_except_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.Service_Role1_smb_udp, conf.action_default_value, conf.dest_except_ntwrk)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        #self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created('smb-udp', 'Except to a network')
        edit_network_page.assert_on_action('Allow')
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1607_allow_smtp_except_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.Service_Role1_smtp, conf.action_default_value, conf.dest_except_ntwrk)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created('smtp', 'Except to a network')
        edit_network_page.assert_on_action('Allow')
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1608_allow_snmp_except_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.service_snmp, conf.action_default_value, conf.dest_except_ntwrk)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created('snmp', 'Except to a network')
        edit_network_page.assert_on_action('Allow')
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()                
        
    def test_ath_1609_allow_snmp_trap_except_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.Service_Role1_snmp_trap, conf.action_default_value, conf.dest_except_ntwrk)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created('snmp-trap', 'Except to a network')
        edit_network_page.assert_on_action('Allow')
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1610_allow_ssh_except_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.action_ssh, conf.action_default_value, conf.dest_except_ntwrk)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created('ssh', 'Except to a network')
        edit_network_page.assert_on_action('Allow')
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1611_allow_svp_except_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.Service_Role1_svp, conf.action_default_value, conf.dest_except_ntwrk)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created('svp', 'Except to a network')
        edit_network_page.assert_on_action('Allow')
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()                
        
    def test_ath_1612_allow_syslog_except_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.service_syslog, conf.action_default_value, conf.dest_except_ntwrk)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created('syslog', 'Except to a network')
        edit_network_page.assert_on_action('Allow')
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1613_allow_telnet_except_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.Service_Role1_telnet, conf.action_default_value, conf.dest_except_ntwrk)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created('telnet', 'Except to a network')
        edit_network_page.assert_on_action('Allow')
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()        
        
    def test_ath_1614_allow_tftp_except_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.action_tftp, conf.action_default_value, conf.dest_except_ntwrk)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created('tftp', 'Except to a network')
        edit_network_page.assert_on_action('Allow')
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1615_allow_vocera_except_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.Service_Role1_vocera, conf.action_default_value, conf.dest_except_ntwrk)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created('vocera', 'Except to a network')
        edit_network_page.assert_on_action('Allow')
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()        
        
        
                