from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class AllowToANetwork(ConfigurationTest):
    '''
    Test class for action deny of single rule.
    '''
    def test_ath_1594_allow_netbios_ssn_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.Service_Role1_netbios_ssn, conf.action_default_value, conf.destination2)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.Service_Role1_netbios_ssn, conf.destination2)
        edit_network_page.assert_new_rule_action(conf.action_default_value)
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1595_allow_nterm_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.service_nterm, conf.action_default_value, conf.destination2)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.service_nterm, conf.destination2)
        edit_network_page.assert_new_rule_action(conf.action_default_value)
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1596_allow_ntp_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.Service_Role1_ntp, conf.action_default_value, conf.destination2)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.Service_Role1_ntp, conf.destination2)
        edit_network_page.assert_new_rule_action(conf.action_default_value)
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()

    def test_ath_1597_allow_papi_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.action_papi, conf.action_default_value, conf.destination2)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.action_papi, conf.destination2)
        edit_network_page.assert_new_rule_action(conf.action_default_value)
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1598_allow_pop3_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.Service_Role1_pop3, conf.action_default_value, conf.destination2)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.Service_Role1_pop3, conf.destination2)
        edit_network_page.assert_new_rule_action(conf.action_default_value)
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1599_allow_pptp_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.service_pptp, conf.action_default_value, conf.destination2)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.service_pptp, conf.destination2)
        edit_network_page.assert_new_rule_action(conf.action_default_value)
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1600_allow_rtsp_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.Service_Role1_rtsp, conf.action_default_value, conf.destination2)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.Service_Role1_rtsp, conf.destination2)
        edit_network_page.assert_new_rule_action(conf.action_default_value)
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1601_allow_sccp_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.action_sccp, conf.action_default_value, conf.destination2)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.action_sccp, conf.destination2)
        edit_network_page.assert_new_rule_action(conf.action_default_value)
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1602_allow_sips_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.Service_Role1_sips, conf.action_default_value, conf.destination2)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.Service_Role1_sips, conf.destination2)
        edit_network_page.assert_new_rule_action(conf.action_default_value)
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_1603_allow_sip_tcp_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.service_sip_tcp, conf.action_default_value, conf.destination2)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.service_sip_tcp, conf.destination2)
        edit_network_page.assert_new_rule_action(conf.action_default_value)
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
		
    def test_ath_1604_allow_sip_udp_to_a_network(self):
        conf = self.config.config_vars
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.employee_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.configure_employee_security()
        access.click_network_access()
        access.delete_default_rule_if_present()
        access.set_rule_service_action_and_destination(conf.action_sip_udp, conf.action_default_value, conf.destination2)
        access.set_destination_ip_mask_domain(conf.valid_destination_ip_1,conf.dest2_net_mask,'')
        access.finish_network_setup()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.assert_new_rule_created(conf.action_sip_udp, conf.destination2)
        edit_network_page.assert_new_rule_action(conf.action_default_value)
        self.take_s2_snapshot()
        edit_network_page.delete_access_rule()
        self.LeftPanel.assert_delta_config_icon()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()