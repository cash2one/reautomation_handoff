import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class InternalAcknowledged(ConfigurationTest):
	'''
	Test class for External IAP Version 4
	'''

	def _delete_network_auth_server(self):
		'''
		Delete wireless and auth servers 
		'''
		self.NetworkPage.delete_network_if_present()
		self.NetworkPage.delete_wired_network_if_present()
		security_page = self.LeftPanel.go_to_security() 
		security_page.delete_authentication_server()
		security_page.delete_authentication_server2()
		security_page.click_walled_garden_accordion()
		security_page.click_walled_garden_link()
		if 	security_page.blacklist_delete_domain:
			security_page.blacklist_delete_domain.click()
		if security_page.whitelist_delete:
			security_page.whitelist_delete.click()
		if security_page.walled_save:
			security_page.walled_save.click()
		time.sleep(5)	
		self.LeftPanel.go_to_network_page()

	def test_ath_1711_edit_the_default_splash_page(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.guest_network_info()
		security = virtual_lan.select_virtual_controller()
		security.configure_splash_page_type(conf.Splash_page_Acknowledged)
		security.configure_encryption('Disabled','False',conf.Authentication_wpa2)
		security.edit_save_splash_page_details()
		access = security.click_on_next()
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.click_security_accordion()
		edit_network.set_guest_network_security_level_Splash_page_visuals_defaults()
		self.take_s2_snapshot()
		self.NetworkPage.assert_new_network()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_10995_switching_splash_page_from_internal_acknowledged_to_none(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.guest_network_info()
		security = virtual_lan.click_on_next()
		security.configure_splash_page_type(conf.Splash_page_Acknowledged)
		security.enable_mac_authentication1()
		access_page = security.move_to_next_page()
		access_page.click_role_access()
		access_page.enable_pre_authentication_role()
		access_page.enable_mac_authentication_role1(conf.Network_name)
		access_page.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.setting_splash_page_type_internal_acknowledge(conf.Splash_page_none)
		edit_network.save_configuration()
		edit_network = self.NetworkPage.edit_network()
		edit_network._click_access_accordion()
		edit_network.assert_ng_wired_pre_and_mac_auth_role()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_588_both_wpa_and_wpa2_two_external_authservers(self): 
		self.take_s1_snapshot()
		conf = self.config.config_vars
		self._delete_network_auth_server()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.guest_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.splash_page_type.set(conf.Splash_page_Acknowledged)
		security.enable_mac_authentication1()
		security.create_external_radius_server_in_auth_server_one()	
		security.create_external_radius_server_in_auth_server_two()	
		security.assert_load_balancing()	
		logger.debug('Network :SecurityPage : asserting blacklisting : disabled')	
		self.browser.assert_drop_down_value(security.blacklisting, conf.disable_option, "blacklisting not set to default value")
		security.configure_encryption('Enabled',False,conf.Authentication_wpa2)
		security.set_splash_page_visulas()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_604_mac_auth_enabled_internal_auth_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.go_to_user_for_internal_server()
		if security_page.if_internal_server_guest_present():
			security_page.delete_internal_server()
		self.LeftPanel.go_to_network_page()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.guest_network_info()
		security = virtual_lan.click_on_next()
		security.configure_splash_page_type(conf.Splash_page_Acknowledged)
		security.enable_mac_authentication1()
		security.assert_splash_page_internal_authenticated_mac_enabled_field()
		security.set_reauth_interval_options(conf.reauth_30)
		security.add_internal_sever_user()
		security.configure_auth_server_settings(blacklisting=True)
		security.set_max_auth_failures_value(conf.default_dead_time)
		security.set_disable_if_uplink_type_is(True,True,True)
		security.configure_encryption(conf.wispr_enable,'False',conf.Authentication_wpa_wpa2)
		access = security.click_on_next()
		access.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.go_to_user_for_internal_server()
		if security_page.if_internal_server_guest_present():
			security_page.delete_internal_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_910_mac_auth_enabled_external_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.guest_network_info()
		security = virtual_lan.select_virtual_controller()
		security.configure_splash_page_type(conf.Splash_page_Acknowledged)
		security.set_mac_authentication_value(conf.wispr_enable)
		security.configure_reauth_interval(conf.valid_accounting,conf.reauth_intrvl_unit_min)
		security.create_external_radius_server_in_auth_server_one()
		security.enable_accounting_interval(conf.valid_accounting)
		security.set_accounting_mode(False)
		security.configure_encryption(conf.wispr_enable,'False',conf.Authentication_wpa2)
		security.set_passphrase_retype(conf.passphrase_invalid_hex_value,conf.passphrase_invalid_hex_value)
		access = security.click_on_next()
		access.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.assert_new_network()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_1894_mac_auth_enabled_external_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.NetworkPage.delete_wired_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.guest_network_info()
		security = virtual_lan.select_virtual_controller()
		security.configure_splash_page_type(conf.splash_page_external_auth_text)
		security.set_mac_authentication_value('Enabled')
		security.create_authentication_server(name=conf.auth_server_name, ip=conf.auth_ipaddr, sharedkey=conf.auth_shared_key,retypekey=conf.auth_shared_key,rfc=True,nas_ip=conf.external_captive_ip,nas_identifier_value=conf.external_captive_ip)
		security.configure_reauth_interval(conf.reauth_2,conf.reauth_intrvl_unit_hrs)
		security.enable_accounting_interval(conf.default_time_out)
		security.set_accounting_mode()
		security.configure_blacklisting(conf.termination_disabled)
		security.create_blacklist_whitelist_walled_garden(blacklist = True,whitelist =True)
		security.configure_encryption(conf.wispr_enable,'False',conf.Authentication_wpa2)
		security.set_passphrase_retype(conf.passphrase_invalid_hex_value,conf.passphrase_invalid_hex_value)
		security.create_external_captive_portal_1(portal_failure = False,whitelisting=True)
		security.set_captive_portal_failure(allow = True)
		security.set_automatic_url_whitelisting(url = True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.take_s2_snapshot()
		self.NetworkPage.assert_new_network()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		