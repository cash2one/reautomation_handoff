import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest
import time
class ExternalAuthenticationText(ConfigurationTest):
	'''
	Test class for External IAP Version 4
	'''

		
	def _delete_network_auth_server(self):
		'''
		Delete wireless and auth servers 
		'''
		self.NetworkPage.delete_network_if_present()
		self.NetworkPage.delete_wired_network_if_present()
		self.NetworkPage.delete_custom_guest_network_if_present()
		security_page = self.LeftPanel.go_to_security() 
		security_page.delete_authentication_server()
		security_page.delete_authentication_server2()
		security_page.delete_internal_server()
		security_page.click_walled_garden_accordion()
		security_page.click_walled_garden_link()
		if 	security_page.blacklist_delete_domain:
			security_page.blacklist_delete_domain.click()
		if security_page.whitelist_delete:
			security_page.whitelist_delete.click()
		if security_page.walled_save:
			security_page.walled_save.click()
		time.sleep(5)	
		security_page.click_on_external_captive_accordion()
		security_page.delete_external_captive_portal_2()
		security_page.delete_captive_portal()
		time.sleep(5)	
		self.LeftPanel.go_to_network_page()
	
	def test_ath_600_wpa2_personal(self):
		conf = self.config.config_vars
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.guest_network_info()
		security = virtual_lan.select_virtual_controller()
		security.configure_splash_page_type(conf.Splash_page_external)
		security.create_captive_portal_profile(text = True,ret = False )
		security.configure_encryption('Enabled','Static WEP','False')
		access = security.click_on_next()
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s2_snapshot()
		self.NetworkPage.assert_new_network()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_602_both_wpa_and_wpa2(self):
		conf = self.config.config_vars
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.guest_network_info()
		security = virtual_lan.select_virtual_controller()
		security.configure_splash_page_type(conf.Splash_page_external)
		security.configure_encryption('Enabled','False',conf.Authentication_Wpa2_WPA_Enterprise)
		security.configure_blacklisting('Enable','10')
		security.set_captive_portal_profile(conf.Wired_Captive_Profile_New)
		security.set_captive_name(conf.userTxt)
		security.set_captive_ip(conf.valid_auth_server_ip)
		security.set_captive_url(conf.blacklist_name)
		security.set_captive_port(conf.external_captive_port)
		security.set_secuirty_auto_url_whitelisting('uncheck')
		security.set_captive_portal_failure(conf.allow_internet)
		security.set_redirect_url(conf.captive_url)
		security.click_on_captive_portal_profile_save()
		access = security.click_on_next()
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s2_snapshot()
		self.NetworkPage.assert_new_network()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_603_both_wpa_and_wpa2(self):
		conf = self.config.config_vars
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.guest_network_info()
		security = virtual_lan.select_virtual_controller()
		security.configure_splash_page_type(conf.Splash_page_external)
		security.configure_encryption('Enabled','Static WEP','False')
		security.set_captive_portal_profile(conf.Wired_Captive_Profile_New)
		security.set_captive_name(conf.userTxt)
		security.set_captive_ip(conf.valid_auth_server_ip)
		security.set_captive_url(conf.blacklist_name)
		security.set_captive_port(conf.external_captive_port)
		security.set_secuirty_auto_url_whitelisting('check')
		security.set_captive_portal_failure(conf.deny_internet)
		security.set_redirect_url(conf.captive_url)
		security.click_on_captive_portal_profile_save()
		access = security.click_on_next()
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s2_snapshot()
		self.NetworkPage.assert_new_network()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_1895_group_with_iap_version_3_4_and_below(self):
		conf = self.config.config_vars
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.guest_network_info()
		security = virtual_lan.select_virtual_controller()
		security.configure_splash_page_type(conf.Splash_page_external)
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.set_load_balancing_field(conf.blacklisting_option)
		security.configure_reauth_interval(conf.ninety,conf.reauth_intrvl_unit_min)
		security.enable_accounting_interval(conf.two)
		security.configure_blacklisting('Disabled','')
		security.create_blacklist_whitelist_walled_garden()
		security.configure_encryption('Enabled','False',conf.Authentication_wpa2)
		security.set_captive_portal_profile(conf.Wired_Captive_Profile_New)
		security.set_captive_name(conf.userTxt)
		security.set_captive_ip(conf.valid_auth_server_ip)
		security.set_captive_url(conf.blacklist_name)
		security.set_captive_port(conf.external_captive_port)
		security.set_secuirty_auto_url_whitelisting('check')
		security.set_captive_portal_failure(conf.allow_internet)
		security.click_on_captive_portal_profile_save()
		access = security.click_on_next()
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s2_snapshot()
		self.NetworkPage.assert_new_network()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_599_encryption_none(self):
		conf = self.config.config_vars
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.guest_network_info()
		security = virtual_lan.select_virtual_controller()
		security.configure_splash_page_type(conf.Splash_page_external)
		security.create_external_captive_portal_2()
		access = security.click_on_next()
		access.finish_network_setup()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()	
		
	def test_ath_606_mac_auth_internal_auth_server(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.go_to_user_for_internal_server()
		if security_page.if_internal_server_guest_present():  
			security_page.delete_internal_server()
		self.LeftPanel.go_to_network_page()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.guest_network_info()
		security = virtual_lan.click_on_next()
		security.configure_splash_page_type(conf.Splash_page_external)
		security.create_external_captive_portal_2()
		security.enable_mac_authentication1()
		security.set_authentication_server('InternalServer')
		security.add_internal_sever_user()
		security.set_reauth_interval_options(conf.reauth_30)
		security.enable_blacklisting()
		security.set_max_auth_failures_value(conf.default_time_out)
		security.create_blacklist_whitelist_walled_garden(blacklist = True, whitelist = True)
		security.set_disable_if_uplink_type_is(True,True,True)
		security.configure_encryption(conf.wispr_enable,'False',conf.Authentication_wpa2)
		access = security.click_on_next()
		access.finish_network_setup()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		security_page = self.LeftPanel.go_to_security()
		security_page.go_to_user_for_internal_server()
		if security_page.if_internal_server_guest_present():  
			security_page.delete_internal_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()