import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class VoiceEnterpriseSecurity(ConfigurationTest):
	'''
	Test class for  Voice Enterprise Security testcases.
	'''
	
	def test_ath_9403_create_enterprise_dynamic_wep_voice_network_with_key_management_accounting_interval(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.voice_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.set_security_level_and_key_management('Enterprise')
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.configure_auth_server_settings(accounting_enable = True,acc_interval=True, auth_survivability=True, balancing=True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.assert_auth_server_settings(accounting_enable=True,balancing=True,auth_survivability=True)
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page() 
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_9385_edit_enterprise_both_wpa_2_and_wpa_enterprise_voice_network_with_local_probe(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.voice_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.set_localprobe_feilds()
		edit_network_page.click_security_accordion()
		edit_network_page.create_external_radiuds_server('1')
		edit_network_page.create_external_radiuds_server('2')
		edit_network_page.enable_auth_server_settings(balancing=True,blacklisting=True,max_auth_failures=True)
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.assert_external_radius_auth_server_one()
		edit_network_page.assert_external_radius_auth_server_two()
		edit_network_page.assert_auth_server_settings(balancing=True,blacklisting=True,max_auth_failures=True)
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page() 
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_9379_edit_enterprise_both_wpa_2_and_wpa_enterprise_voice_network_with_disabled_ssid(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.voice_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.configure_auth_server_settings(termination = True)
		security.create_external_radiuds_server('1')
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options(disable_ssid=True)
		edit_network_page.click_security_accordion()
		edit_network_page.edit_enterprise_employee_network_with_disabled_ssid()
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_disable_ssid_checkbox('check')
		edit_network_page.click_security_accordion()
		edit_network_page.assert_external_radius_auth_server_one()
		edit_network_page.assert_auth_server_settings(accounting_enable=True,termination_disable = True)
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()     
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9365_edit_enterprise_wpa_enterprise_voice_network_with_disable_ssid_authentication(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.voice_network_with_advanced_settings_enable_disable_ssid()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa=True)
		security.create_external_radiuds_server('1')
		security.configure_auth_server_settings(accounting_enable= True,acc_interval = True, auth_survivability= True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.uncheck_disable_ssid()
		edit_network_page.click_security_accordion()
		edit_network_page.create_external_radiuds_server('2')
		edit_network_page.enable_auth_server_settings(termination = True)
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_disable_ssid_checkbox('uncheck')
		edit_network_page.click_security_accordion()
		edit_network_page.assert_external_radius_auth_server_one()
		edit_network_page.assert_auth_server_settings(termination_enable = True)
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()     
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9367_edit_enterprise_wpa_enterprise_voice_network_with_can_be_used_without_uplink(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj   = basic_info.set_advance_options(uplink=True)
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)        
		security.set_security_enterprise_dropdown(wpa=True)
		security.set_auth_interval_time('10')
		access = security.click_on_next()
		access.finish_network_setup() 
		edit_network_page = self.NetworkPage.edit_network()    
		edit_network_page.set_advance_settings_and_reauth_interval()		
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_advance_settings_and_reauth_interval()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9383_edit_enterprise_both_wpa_2_and_wpa_enterprise_voice_network_with_max_client_threshold(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.voice_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_max_client_threshold_and_mac_authentication()  
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9384_edit_enterprise_both_wpa_2_and_wpa_enterprise_voice_network_with_max_client_blacklisting(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj   = basic_info.set_advance_options(max_threshold=True)
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.enable_mac_authentication_enterprise()
		security.configure_auth_server_settings(uppercase_support= True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_enterprise_employee_network_blacklisting_enabled()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()       
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9393_edit_enterprise_dynamic_wep_voice_network_with_hide_ssid_authentication_survivability(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.voice_network_with_advanced_settings_enable_hide_ssid()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(dynamic_wep=True)
		security.configure_auth_server_settings(termination= True)
		security.create_external_radiuds_server('1')
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options(hide_ssid_uncheck=True)
		edit_network_page.click_security_accordion()
		edit_network_page.enable_auth_server_settings(auth_survivability=True)
		edit_network_page.set_auth_cache_timeout('19')
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_hide_ssid_checkbox('uncheck')
		edit_network_page.click_security_accordion()
		edit_network_page.assert_auth_survivability('Enabled')
		edit_network_page.assert_cache_timeout('19')
		edit_network_page.assert_auth_server_settings(termination_disable = True)
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()     
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def _delete_network_auth_server(self):
		'''
		Delete wireless and auth servers 
		'''
		self.NetworkPage.delete_network_if_present()
		self.NetworkPage.delete_wired_network_if_present()
		security_page = self.LeftPanel.go_to_security() 
		security_page.delete_authentication_server()
		security_page.delete_authentication_server2()
		self.LeftPanel.go_to_network_page()
		
	def test_ath_9395_edit_enterprise_dynamic_WEP_voice_network_with_disable_SSID_authentication(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_and_assert_voice_network_with_disable_ssid()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_auth_server_termination_accounting()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_disable_ssid_auth_server_termination()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_disable_ssid_auth_server_termination_changes()
		self.NetworkPage.delete_network_if_present()						
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9396_create_enterprise_dynamic_WEP_voice_network_with_can_be_used_without_uplink_select(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_can_be_used_without_uplink()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_reauth_interval_use_session_key()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_key_management_reauth_interval_use_session_key_changes()
		self.NetworkPage.delete_network_if_present()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9397_edit_enterprise_dynamic_WEP_voice_network_with_can_be_used_without_uplink(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_can_be_used_without_uplink()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_reauth_interval_use_session_key()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_reauth_interval_session_key_with_advanced_settings()	
		edit_network_page = self.NetworkPage.edit_network()		
		edit_network_page.assert_reauth_interval_session_key_with_advanced_settings_changes()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9398_edit_enterprise_dynamic_WEP_voice_network_with_max_client_threshold_delimiter(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_can_be_used_without_uplink()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_dynamic_wep()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_max_client_threshold(255)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_delimiter_uppercase_support_mac_auth_options()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_delimiter_uppercase_support_mac_auth_options_check()	
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9399_edit_enterprise_dynamic_WEP_voice_network_with_max_client_threshold_blacklist(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_max_client_threshold()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_dynamic_wep_with_uppercase_support_enabled()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_max_client_threshold(0)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_blacklisting_uppercase_support_delimiter_options()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_blacklisting_uppercase_support_delimiter_changes()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9400_edit_enterprise_dynamic_WEP_voice_network_with_local_probe_request_threshold(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_dynamic_wep()					
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_local_probe_request(100)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_auth_server_loadbalancing_max_auth_failure()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_auth_server_loadbalancing_max_auth_failure()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9402_edit_enterprise_dynamic_WEP_voice_network_with_mac_authentication_mac_authe(self):
		self.take_s1_snapshot()	
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_dynamic_wep_option()
		security.set_mac_authentication_options()
		security.set_uppercase_support_dropdown()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_mac_authentication_options()
		edit_network_page.set_session_key_for_leap()
		edit_network_page.assert_uppercase_support_delimiter_options()
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_disabled_mac_authentication_options_and_session_key_for_leap()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()		
	
	def test_ath_9394_edit_enterprise_dynamic_WEP_voice_network_with_disable_SSID_accounting_interv(self):
		self.take_s1_snapshot()	
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_dynamic_wep_option()
		security.set_external_radius_server_1()
		security.setting_termination_option(True)
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.click_on_disable_ssid()
		edit_network_page._save_settings()	
		edit_network_page = self.NetworkPage.edit_network()	
		edit_network_page.click_on_security_accordion()
		edit_network_page.setting_termination_option(False)
		edit_network_page.setting_accounting_interval_option(True,60)
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()	
		edit_network_page.assert_disable_ssid_termination_accounting_option()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9392_edit_enterprise_dynamic_WEP_voice_network_with_hide_SSID_termination_use_session_key_for_LEAP(self):
		self.take_s1_snapshot()	
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()		
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_dynamic_wep_option()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.click_on_hide_ssid()		 					
		edit_network_page.click_on_security_accordion()
		edit_network_page.setting_termination_option(True)
		edit_network_page.set_session_key_for_leap()
		edit_network_page.set_external_radius_server_1()
		edit_network_page._save_settings()					
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_hide_ssid_termination_session_key_for_leap()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9390_create_enterprise_dynamic_WEP_voice_network_with_inactive_timeout_virtual_con(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_inactive_timeout(3600)
		security = virtual_lan.select_virtual_controller()
		security.click_on_enterprise_radio_button()
		security.set_key_management_dynamic_wep_option()
		security.assert_auth_server_internal_server_option()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_inactive_timeout_vlan_security_level_key_management()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9382_edit_enterprise_both_WPA_2_and_WPA_enterprise_voice_network_with_can_be_used(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_can_be_used_without_uplink()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.click_on_okc('Disable')
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.set_reauth_interval_options(10)
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.click_on_can_be_used_without_uplink()
		edit_network_page.click_on_security_accordion()
		edit_network_page.click_on_okc('Enable')
		edit_network_page.set_reauth_interval()
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_can_be_used_without_uplink_okc_reauth_interval()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9378_edit_enterprise_both_WPA_2_and_WPA_enterprise_voice_network_with_hide_SSID(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()				
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_hide_ssid()		
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()					 				
		security.setting_termination_option(True)
		security.set_external_radius_server_1()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.click_on_hide_ssid()
		edit_network_page.click_on_security_accordion()
		edit_network_page.assert_auth_survivability_cache_timeout()
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.assert_hide_ssid_disabled()
		edit_network_page.click_on_network()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9377_edit_enterprise_both_WPA_2_and_WPA_enterprise_voice_network_with_hide_ssid_okc_termination(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()						
		security.click_on_enterprise_radio_button()		
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.set_external_radius_server_1()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s1_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()					
		edit_network_page.click_on_hide_ssid()
		edit_network_page.click_on_security_accordion()
		edit_network_page.click_on_okc('Disable')
		edit_network_page.setting_termination_option(True)
		edit_network_page.assert_auth_server_2(True)
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()			
		edit_network_page.assert_hide_ssid_enabled()
		edit_network_page.click_on_security_accordion()		
		edit_network_page.assert_okc_checkbox(False)
		edit_network_page.assert_termination_dropdown('Enabled')
		edit_network_page.click_on_network()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9368_edit_enterprise_WPA_enterprise_voice_network_with_max_client_threshold_delimiter(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()	
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.set_max_client_threshold(255)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_mac_authentication_options()
		edit_network_page.set_delimiter_option()
		edit_network_page.set_uppercase_support_option('Enabled')
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_delimiter_uppercase_support_mac_auth_options_check()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_9369_edit_enterprise_WPA_enterprise_voice_network_with_max_client_threshold_blacklisting(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_max_client_threshold()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		security.set_mac_authentication_options()
		security.set_uppercase_support_dropdown()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.set_max_client_threshold(0)				
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_blacklisting_option('Enabled')
		edit_network_page.set_uppercase_support_option('Disabled')
		edit_network_page.set_delimiter_option_empty()
		edit_network_page._save_settings()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_blacklisting_uppercase_support_delimiter_changes()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9370_edit_enterprise_WPA_enterprise_voice_network_with_local_probe_request_threshold(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()					
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		access = security.move_to_next_page()
		access.finish_network_setup()						
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_local_probe_request(100)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()		
		edit_network_page.set_external_radius_server_1()
		edit_network_page.set_external_radius_server_2()
		edit_network_page.set_blacklisting_option('Enabled')
		edit_network_page.set_max_authentication_option(10)
		edit_network_page.set_load_balancing_option('Enabled')
		edit_network_page._save_settings()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_auth_server_loadbalancing_max_auth_failure()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()	

	def test_ath_9362_edit_enterprise_WPA_enterprise_voice_network_with_hide_SSID_termination(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()					
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()					
		edit_network_page.click_on_hide_ssid()
		edit_network_page.click_on_security_accordion()
		edit_network_page.setting_termination_option(True)
		edit_network_page.set_external_radius_server_1()
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.assert_hide_ssid_enabled()
		edit_network_page.click_on_security_accordion()
		edit_network_page.assert_termination_dropdown('Enabled')		
		edit_network_page.click_on_network()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9361_edit_enterprise_WPA_enterprise_voice_network_with_inactive_timeout_authentication(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()						
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_inactive_timeout(3600)
		security = virtual_lan.select_virtual_controller()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		security.select_auth_server_internalserver(1)
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.set_inactive_timeout_option(1000)
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_external_radius_server_1()
		edit_network_page.select_auth_server_internalserver('2')
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()		
		edit_network_page.assert_inactive_timeout(1000)
		edit_network_page.click_on_security_accordion()
		edit_network_page.assert_auth_server_2_internal_auth_server_1_external_server()
		edit_network_page.click_on_network()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9363_edit_enterprise_WPA_enterprise_voice_network_with_hide_SSID_authentication_survivability_cache_timeout(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_hide_ssid()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		security.set_external_radius_server_1()
		security.set_external_radius_server_2()
		security.setting_termination_option(True)	
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()				
		edit_network_page.click_on_hide_ssid()
		edit_network_page._save_settings()	
		edit_network_page = self.NetworkPage.edit_network()	
		edit_network_page.click_on_security_accordion()
		edit_network_page.assert_auth_survivability_cache_timeout()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.assert_hide_ssid_disabled()
		edit_network_page.click_on_network()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9353_edit_enterprise_voice_network_max_client_threshold(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.security_level_enterprise()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_max_client_threshold_and_mac_authentication()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9357_edit_enterprise_voice_network_with_mac_authentication(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.security_level_enterprise()
		security.set_mac_authentication_enabled()        
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.disable_mac_authentication()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9347_edit_enterprise_voice_network_with_hide_ssid_okc_termination(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(hide_ssid=True)
		edit_network.open_security_accordion()
		edit_network.configure_mac_authentication(enable=True)
		edit_network.create_external_radius_server_in_auth_server_one()
		edit_network.enable_auth_server_settings(termination = True)
		edit_network.edit_security_settings(okc=True)
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9358_create_enterprise_wpa_2_enterprise_voice_network_with_key_management_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level(enterprise=True)
		edit_network.assert_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		edit_network.assert_external_radius_auth_server_one()
		edit_network.assert_external_radius_auth_server_two()
		self.LeftPanel.go_to_network_page()     
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9373_create_enterprise_wpa_enterprise_voice_network_with_key_management_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa=True)        
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level(enterprise=True)
		edit_network.assert_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		edit_network.assert_external_radius_auth_server_one()
		edit_network.assert_external_radius_auth_server_two()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9388_create_enterprise_wpa_wpa2_enterprise_voice_network_with_key_management_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(wpa_wpa2=True)       
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level(enterprise=True)
		edit_network.assert_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		edit_network.assert_external_radius_auth_server_one()
		edit_network.assert_external_radius_auth_server_two()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_9345_create_enterprise_voice_network_with_inactive_timeout(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(inactivity_timeout=True)
		security = virtual_lan.select_virtual_controller()
		security.security_level_enterprise()
		security.configure_80211r_romaing()
		security.assert_auth_server_one_defaults()
		access = security.click_on_next()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level_enterprise()
		edit_network.assert_802_roaming_options()  
		self.LeftPanel.go_to_network_page()      
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9351_create_enterprise_voice_network_without_uplink_security_level(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(uplink=True)
		security = virtual_lan.use_vlan_defaults()
		security.security_level_enterprise()
		security.set_auth_interval_time('10')
		security.okc_checkbox.click()
		access = security.click_on_next()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level_enterprise()
		self.LeftPanel.go_to_network_page()      
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_9352_edit_enterprise_voice_network_without_uplink_security_level(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(uplink=True)
		security = virtual_lan.use_vlan_defaults()
		security.security_level_enterprise()
		security.set_auth_interval_time('10')
		security.okc_checkbox.click()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_settings_and_reauth_interval()
		self.take_s2_snapshot()		
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_9354_edit_enterprise_voice_network_blacklisting_enabled(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(max_threshold=True)
		security = virtual_lan.use_vlan_defaults()
		security.security_level_enterprise()
		security.enable_mac_authentication_enterprise()
		security.configure_auth_server_settings(uppercase_support=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_enterprise_employee_network_blacklisting_enabled()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()  
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_9360_create_enterprise_wpa_enterprise_voice_network_with_inactive_timeout_interval(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(inactivity_timeout=True)
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)        
		security.assert_default_fields_security_enterprise(wpa=True,skip_roaming_okc=True)
		security.assert_auth_server_one_defaults()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level(enterprise=True)
		self.LeftPanel.go_to_network_page()                       
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9366_create_enterprise_wpa_enterprise_voice_network_with_can_be_used_without_uplink(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(uplink=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)        
		security.assert_default_fields_security_enterprise(wpa=True,skip_roaming_okc=True)
		security.set_auth_interval_time(10)
		access = security.click_on_next()
		access.finish_network_setup() 
		edit_network = self.NetworkPage.edit_network()        
		edit_network.assert_edited_advance_options(uplink=True)
		self.LeftPanel.go_to_network_page()                      
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9375_create_enterprise_wpa_wpa2_enterprise_voice_network_with_inactive_timeout_interval(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(inactivity_timeout=True)
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.configure_auth_server_settings(roaming=True)
		security.assert_auth_server_one_defaults()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edited_advance_options()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9381_create_enterprise_wpa_wpa2_enterprise_voice_network_with_can_be_used_without_uplink(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(uplink=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.set_auth_interval_time(10)
		security.configure_auth_server_settings()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edited_advance_options(uplink=True)
		edit_network.assert_security_level(enterprise=True)
		edit_network.assert_auth_server_settings(okc=True)
		self.LeftPanel.go_to_network_page()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9348_edit_enterprise_wpa_2_enterprise_voice_network_with_hide_ssid_authentication(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(hide_ssid=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.configure_auth_server_settings(termination=True)
		security.create_external_radius_server_in_auth_server_one()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(hide_ssid_uncheck=True)
		edit_network.open_security_accordion()
		edit_network.setting_termination_option(False)
		edit_network.enable_auth_server_settings(auth_survivability=True)
		edit_network.set_auth_cache_timeout('19')
		edit_network.save_settings.click()
		self.LeftPanel.go_to_network_page()  
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9349_edit_enterprise_wpa_2_enterprise_voice_network_with_disable_ssid_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.configure_auth_server_settings(termination=True)
		security.create_external_radius_server_in_auth_server_one()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(hide_ssid=True)        
		edit_network.open_security_accordion()
		edit_network.configure_auth_server_settings(termination_disable=True,accounting_enable=True)
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9350_edit_enterprise_wpa_2_enterprise_voice_network_with_disable_ssid_authentication(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(disable_ssid=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.create_external_radius_server_in_auth_server_one()   
		security.configure_auth_server_settings(auth_survivability=True,accounting_enable=True,acc_interval=True,)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(hide_ssid_uncheck=True)        
		edit_network.open_security_accordion()
		edit_network.create_external_radius_server_in_auth_server_two()
		edit_network.configure_auth_server_settings(termination_enable=True)
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9355_edit_enterprise_wpa_2_enterprise_voice_network_with_local_probe_request_threshold(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(local_probe=True)        
		edit_network.open_security_accordion()
		edit_network.create_external_radius_server_in_auth_server_one()
		edit_network.create_external_radius_server_in_auth_server_two()
		edit_network.configure_blacklisting(blacklisting_enable=True)
		edit_network.configure_auth_server_settings(balancing=True)
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9359_edit_enterprise_wpa_2_enterprise_voice_network_with_authentication_server_2(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,auth_survivability=False)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		edit_network.select_internal_server_in_auth_server_2()
		edit_network.save_configuration()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9346_edit_enterprise_wpa_2_enterprise_voice_network_with_inactive_timeout_authenticat(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(inactivity_timeout=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_wpa_2_enterprise_option()
		security.configure_auth_server_settings(roaming=True)
		security.create_external_radius_server_in_auth_server_one()
		security.set_authentication_server_to_internalserver()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.click_on_advanced_settings_accordion()
		edit_network.set_inactive_timeout_option(self.config.config_vars.default_inactivity_timeout)
		edit_network.setting_security_page_value(roaming = True)
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_page_value(roaming = True)
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9374_edit_enterprise_wpa_enterprise_voice_network_with_authentication_server_2_accoun(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_wpa_enterprise()
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.enable_accounting_interval('1')
		security.enable_authentication_survivability()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.click_security_accordion()
		edit_network.select_internal_server_in_auth_server_2()
		edit_network._save_settings()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.click_security_accordion()
		edit_network.assert_auth_server_2_internal()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9380_edit_enterprise_both_wpa_2_and_wpa_enterprise_voice_network_with_disable_ssid(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(disable_ssid=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_key_management('Both(WPA-2 & WPA)')
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()		
		security.setting_termination_option(flag=False)
		security.enable_accounting_interval('60')
		security.enable_authentication_survivability()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.set_enterprise_both_wpa_2_and_wpa_enterprise_voice()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.asserting_enterprise_both_wpa_2_and_wpa_enterprise_voice()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9391_edit_enterprise_dynamic_wep_voice_network_with_inactive_timeout_authentication(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(inactivity_timeout=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_dynamic_wep_option()
		security.create_external_radius_server_in_auth_server_one()
		security.set_authentication_server_to_internalserver()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.click_on_advanced_settings_accordion()
		edit_network.set_inactive_timeout_option(self.config.config_vars.default_inactivity_timeout)
		edit_network.setting_security_page_value(roaming = False)
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_page_value(roaming = False)
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9401_edit_enterprise_dynamic_wep_voice_network_with_local_probe_request_threshold(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(local_probe = True)
		security = virtual_lan.use_vlan_defaults()
		security.setting_dynamic_wep_voice_network_value('Dynamic- WEP With 802.1x')
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_dynamic_wep_voice_network_value()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_dynamic_wep_voice_network_value()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9371_edit_enterprise_wpa_enterprise_voice_network_with_local_probe_request_threshold(self):

		conf = self.config.config_vars
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.set_advance_options(uplink=False,max_threshold=False,inactivity_timeout=False,hide_ssid=False,local_probe=True,disable_ssid=False)
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_blacklisting(conf.blacklisting_option,conf.max_authentication_failure)
		security.authentication_server_2.set(conf.Authentication_server)
		security.set_load_balancing_field(conf.blacklisting_option)
		security.configure_reauth_interval(conf.new_reauth_value,conf.reauth_intrvl_unit_hrs)
		access = security.click_on_next()        
		access.finish_network_setup()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options()
		edit_network_page.localprobe.set(conf.max_auth_failure0)
		edit_network_page.click_on_security_accordion()
		edit_network_page.authentication_server_2.set(conf.auth_server_value_2)
		edit_network_page.select_auth_server_internalserver('1')
		edit_network_page.set_blacklisting_option('Disabled')
		edit_network_page.reauth_interval.set('0')
		edit_network_page._save_settings()
		self.LeftPanel.assert_delta_config_icon()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options()
		self.browser.assert_text(edit_network_page.localprobe, conf.max_auth_failure0, "Local probe not set to 0",'value')
		edit_network_page.click_on_security_accordion()
		self.browser.assert_drop_down_value(edit_network_page.authentication_server, conf.edit_Authentication_server, "Authentication server not set to 'InternalServer'")
		self.browser.assert_drop_down_value(edit_network_page.blacklisting, conf.disabled_option, "Blacklisting is not set to 'Disabled'")
		self.browser.assert_text(edit_network_page.reauth_interval, conf.max_auth_failure0, "Reauth interval is not set to 0",'value')
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9372_edit_enterprise_wpa_enterprise_voice_network_with_mac_authentication_request_threshold(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.configure_security_radio_fields(mac_authentication=True,mac_authentication_fail_thru=True)
		security.set_uppercase_support_dropdown()
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		edit_network.set_mac_authentication_options()
		edit_network.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		self.browser.assert_check_box_value(edit_network.mac_authentication_enterprise, 'Mac authentication enterprise is not unchecked', check = True)
		self.browser.assert_check_box_value(edit_network.auth_failthru_enterprise, 'auth fail through is not unchecked', check = True)	

		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9386_edit_enterprise_both_wpa2_and_wpa_enterprise_voice_network_with_local_probe_req(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.set_advance_options()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.configure_blacklisting('Enable',conf.max_authentication_failure)
		security.set_load_balancing_field(conf.blacklisting_option)
		security.configure_reauth_interval(conf.new_reauth_value,conf.reauth_intrvl_unit_hrs)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_enterprise_both_wpa2_and_wpa_enterprise_voice_network_with_local_probe_req()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options()
		edit_network.assert_edited_values()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_9389_edit_enterprise_both_wpa2_and_wpa_enterprise_voice_network_with_authentication(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.enable_accounting_interval('1')
		security.enable_authentication_survivability()
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		edit_network.select_internal_server_in_auth_server_2()
		edit_network.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		self.browser.assert_drop_down_value(edit_network.authentication_server_2, conf.edit_Authentication_server, 'authentication server2 is not set to internal server')
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9404_edit_enterprise_dyanamic_wep_voice_network_with_authentication_server2_accounting(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_dynamic_wep_option()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.enable_accounting_interval('1')
		security.enable_authentication_survivability()
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		edit_network.select_internal_server_in_auth_server_2()
		edit_network.save_configuration()
		self.take_s2_snapshot()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		self.browser.assert_drop_down_value(edit_network.authentication_server_2, conf.edit_Authentication_server, 'authentication server2 is not set to internal server')
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

		
	def test_ath_9364_edit_enterprise_wpa_enterprise_voice_network_with_disable_ssid_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa=True)
		security.create_external_radius_server_in_auth_server_one()
		security.setting_termination_option(True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options(disable_ssid=True)
		edit_network_page.click_security_accordion()
		#edit_network_page.configure_mac_authentication()
		edit_network_page.configure_auth_server_settings(termination_disable=True)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.setting_accounting_interval_option(True,self.config.config_vars.edit_accounting_interval60)
		import time
		time.sleep(10)
		edit_network_page._save_settings()
		time.sleep(10)
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_disable_ssid_termination_accounting_option()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_9387_edit_enterprise_both_wpa2_and_wpa_enterprise_voice_network_with_mac_authenticat(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.configure_security_radio_fields(okc=True,mac_authentication=True,mac_authentication_fail_thru=True)
		security.set_uppercase_support_dropdown()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.configure_okc()
		edit_network_page.configure_mac_authentication_radio_button(enable=False)
		edit_network_page.configure_auth_failthru_enterprise_radio_button()
		edit_network_page.save_settings.click()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.assert_configure_security_radio_fields()
		self.LeftPanel.go_to_network_page()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11964_create_enterprise_voice_network_with_inactive_timeout(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(inactivity_timeout=True)
		security = virtual_lan.select_virtual_controller()
		security.security_level_enterprise()
		security.configure_80211r_romaing()
		security.assert_auth_server_one_defaults()
		access = security.click_on_next()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edited_advance_options()
		edit_network.assert_security_level_enterprise()
		edit_network.assert_802_roaming_options()  
		self.LeftPanel.go_to_network_page()      
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11965_edit_enterprise_wpa_2_enterprise_voice_network_with_inactive_timeout_authenticat(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(inactivity_timeout=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_wpa_2_enterprise_option()
		security.configure_auth_server_settings(roaming=True)
		security.create_external_radius_server_in_auth_server_one()
		security.set_authentication_server_to_internalserver()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.click_on_advanced_settings_accordion()
		edit_network.set_inactive_timeout_option(self.config.config_vars.default_inactivity_timeout)
		edit_network.setting_security_page_value(roaming = True)
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_page_value(roaming = True)
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11966_edit_enterprise_voice_network_with_hide_ssid_okc_termination(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(hide_ssid=True)
		edit_network.open_security_accordion()
		# edit_network.configure_mac_authentication(enable=True)
		edit_network.create_external_radius_server_in_auth_server_one()
		edit_network.enable_auth_server_settings(termination = True)
		# edit_network.edit_security_settings(okc=True)
		# import pdb
		# pdb.set_trace()
		import time
		time.sleep(10)
		edit_network._save_settings()
		time.sleep(10)
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.check_hide_ssid_checkbox('check')
		edit_network.open_security_accordion()
		edit_network.assert_okc_checkbox(True)
		edit_network.assert_termination_dropdown('Enabled')
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11967_edit_enterprise_wpa_2_enterprise_voice_network_with_hide_ssid_authentication(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(hide_ssid=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.configure_auth_server_settings(termination=True)
		security.create_external_radius_server_in_auth_server_one()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(hide_ssid_uncheck=True)
		edit_network.open_security_accordion()
		edit_network.setting_termination_option(False)
		edit_network.enable_auth_server_settings(auth_survivability=True)
		edit_network.set_auth_cache_timeout('19')
		edit_network.save_settings.click()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.check_hide_ssid_checkbox('uncheck')
		edit_network.open_security_accordion()
		edit_network.assert_auth_survivability('Enabled')
		edit_network.assert_cache_timeout('19')
		self.LeftPanel.go_to_network_page()  
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11968_edit_enterprise_wpa_2_enterprise_voice_network_with_disable_ssid_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.configure_auth_server_settings(termination=True)
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(hide_ssid=True,disable_ssid=True)
		edit_network.open_security_accordion()
		edit_network.configure_auth_server_settings(termination_disable=True,acc_interval=True,accounting_enable=True)
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_disable_ssid_termination_accounting_option()
		self.LeftPanel.go_to_network_page()  
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11969_edit_enterprise_wpa_2_enterprise_voice_network_with_disable_ssid_authentication(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(disable_ssid=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.create_external_radius_server_in_auth_server_one()   
		security.configure_auth_server_settings(auth_survivability=True,accounting_enable=True,acc_interval=True,)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(hide_ssid_uncheck=True)        
		edit_network.open_security_accordion()
		edit_network.create_external_radius_server_in_auth_server_two()
		edit_network.configure_auth_server_settings(termination_enable=True)
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		edit_network.assert_termination_dropdown('Enabled')
		self.LeftPanel.go_to_network_page()  
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11970_create_enterprise_voice_network_without_uplink_security_level(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(uplink=True)
		security = virtual_lan.use_vlan_defaults()
		security.security_level_enterprise()
		security.set_auth_interval_time('10')
		security.okc_checkbox.click()
		access = security.click_on_next()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level_enterprise()
		self.LeftPanel.assert_delta_config_icon()
		self.LeftPanel.go_to_network_page()      
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()


	def test_ath_11971_edit_enterprise_voice_network_without_uplink_security_level(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(uplink=True)
		security = virtual_lan.use_vlan_defaults()
		security.security_level_enterprise()
		security.set_auth_interval_time('10')
		security.okc_checkbox.click()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_settings_and_reauth_interval()
		self.take_s2_snapshot()		
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11972_edit_enterprise_voice_network_max_client_threshold(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.security_level_enterprise()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_max_client_threshold_and_mac_authentication()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11973_edit_enterprise_voice_network_blacklisting_enabled(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(max_threshold=True)
		security = virtual_lan.use_vlan_defaults()
		security.security_level_enterprise()
		security.enable_mac_authentication_enterprise()
		security.configure_auth_server_settings(uppercase_support=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_enterprise_employee_network_blacklisting_enabled()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11974_edit_enterprise_wpa_2_enterprise_voice_network_with_local_probe_request_threshold(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options(local_probe=True)        
		edit_network.open_security_accordion()
		edit_network.create_external_radius_server_in_auth_server_one()
		edit_network.create_external_radius_server_in_auth_server_two()
		edit_network.enable_auth_server_settings(blacklisting=True)
		edit_network.configure_auth_server_settings(balancing=True)
		self.LeftPanel.assert_delta_config_icon()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11976_edit_enterprise_voice_network_with_mac_authentication(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.security_level_enterprise()
		security.set_mac_authentication_enabled()        
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.disable_mac_authentication()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11977_create_enterprise_wpa_2_enterprise_voice_network_with_key_management_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level(enterprise=True)
		edit_network.assert_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		edit_network.assert_external_radius_auth_server_one()
		edit_network.assert_external_radius_auth_server_two()
		self.LeftPanel.go_to_network_page()     
		self.LeftPanel.assert_delta_config_icon()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11978_edit_enterprise_wpa_2_enterprise_voice_network_with_authentication_server_2(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,auth_survivability=False)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		edit_network.select_internal_server_in_auth_server_2()
		edit_network.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11979_create_enterprise_wpa_enterprise_voice_network_with_inactive_timeout_interval(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(inactivity_timeout=True)
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)        
		security.assert_default_fields_security_enterprise(wpa=True,skip_roaming_okc=True)
		security.assert_auth_server_one_defaults()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level(enterprise=True)
		self.LeftPanel.go_to_network_page()                       
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11980_edit_enterprise_WPA_enterprise_voice_network_with_inactive_timeout_authentication(self):
		self.take_s1_snapshot()
		self._delete_network_auth_server()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()						
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_inactive_timeout(3600)
		security = virtual_lan.select_virtual_controller()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		security.select_auth_server_internalserver(1)
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.set_inactive_timeout_option(1000)
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_external_radius_server_1()
		edit_network_page.select_auth_server_internalserver('2')
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()		
		edit_network_page.assert_inactive_timeout(1000)
		edit_network_page.click_on_security_accordion()
		edit_network_page.assert_auth_server_2_internal_auth_server_1_external_server()
		edit_network_page.click_on_network()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11981_edit_enterprise_WPA_enterprise_voice_network_with_hide_SSID_termination(self):

		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()					
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()					
		edit_network_page.click_on_hide_ssid()
		edit_network_page.click_on_security_accordion()
		edit_network_page.setting_termination_option(True)
		edit_network_page.set_external_radius_server_1()
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.assert_hide_ssid_enabled()
		edit_network_page.click_on_security_accordion()
		edit_network_page.assert_termination_dropdown('Enabled')		
		edit_network_page.click_on_network()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11982_edit_enterprise_WPA_enterprise_voice_network_with_hide_SSID_authentication_survivability_cache_timeout(self):

		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_hide_ssid()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		security.set_external_radius_server_1()
		security.set_external_radius_server_2()
		security.setting_termination_option(True)	
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()				
		edit_network_page.click_on_hide_ssid()
		edit_network_page._save_settings()	
		edit_network_page = self.NetworkPage.edit_network()	
		edit_network_page.click_on_security_accordion()
		edit_network_page.assert_auth_survivability_cache_timeout()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.assert_hide_ssid_disabled()
		edit_network_page.click_on_network()
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11983_edit_enterprise_wpa_enterprise_voice_network_with_disable_ssid_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa=True)
		security.create_external_radius_server_in_auth_server_one()
		security.setting_termination_option(True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options(disable_ssid=True)
		edit_network_page.click_security_accordion()
		# edit_network_page.configure_mac_authentication()
		edit_network_page.configure_auth_server_settings(termination_disable=True)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.setting_accounting_interval_option(True,self.config.config_vars.edit_accounting_interval60)
		edit_network_page._save_settings()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_disable_ssid_termination_accounting_option()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11984_edit_enterprise_wpa_enterprise_voice_network_with_disable_ssid_authentication(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.voice_network_with_advanced_settings_enable_disable_ssid()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa=True)
		security.create_external_radiuds_server('1')
		security.configure_auth_server_settings(accounting_enable= True,acc_interval = True, auth_survivability= True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.uncheck_disable_ssid()
		edit_network_page.click_security_accordion()
		edit_network_page.create_external_radiuds_server('2')
		edit_network_page.enable_auth_server_settings(termination = True)
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_disable_ssid_checkbox('uncheck')
		edit_network_page.click_security_accordion()
		edit_network_page.assert_external_radius_auth_server_one()
		edit_network_page.assert_auth_server_settings(termination_enable = True)
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()     
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11985_create_enterprise_wpa_enterprise_voice_network_with_can_be_used_without_uplink(self):
		conf = self.config.config_vars
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(uplink=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)        
		security.set_security_enterprise_dropdown(wpa=True)
		security.assert_default_fields_security_enterprise(wpa=True,skip_roaming_okc=True)
		security.set_auth_interval_time(10)
		access = security.click_on_next()
		access.finish_network_setup() 
		edit_network = self.NetworkPage.edit_network()        
		edit_network.assert_edited_advance_options(uplink=True)
		edit_network.open_security_accordion()
		edit_network.assert_security_level(enterprise = True)
		edit_network.assert_on_security_key_management(conf.Authentication_Wpa_Enterprise)
		self.LeftPanel.go_to_network_page()    
		self.LeftPanel.assert_delta_config_icon()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11986_edit_enterprise_wpa_enterprise_voice_network_with_can_be_used_without_uplink(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj   = basic_info.set_advance_options(uplink=True)
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)        
		security.set_security_enterprise_dropdown(wpa=True)
		security.set_auth_interval_time('10')
		access = security.click_on_next()
		access.finish_network_setup() 
		edit_network_page = self.NetworkPage.edit_network()    
		edit_network_page.set_advance_settings_and_reauth_interval()		
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_advance_settings_and_reauth_interval()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11987_edit_enterprise_WPA_enterprise_voice_network_with_max_client_threshold_delimiter(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()	
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		access = security.move_to_next_page()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.set_max_client_threshold(255)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_mac_authentication_options()
		edit_network_page.set_delimiter_option()
		edit_network_page.set_uppercase_support_option('Enabled')
		edit_network_page._save_settings()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_delimiter_uppercase_support_mac_auth_options_check()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11988_edit_enterprise_WPA_enterprise_voice_network_with_max_client_threshold_blacklisting(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_max_client_threshold()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		security.set_mac_authentication_options()
		security.set_uppercase_support_dropdown()
		access = security.move_to_next_page()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.set_max_client_threshold('0')				
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_blacklisting_option('Enabled')
		edit_network_page.set_uppercase_support_option('Disabled')
		edit_network_page.set_delimiter_option_empty()
		edit_network_page._save_settings()		
		self.take_s2_snapshot()		
		self.LeftPanel.assert_delta_config_icon()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_blacklisting_uppercase_support_delimiter_changes()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11989_edit_enterprise_WPA_enterprise_voice_network_with_local_probe_request_threshold(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()					
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		access = security.move_to_next_page()
		access.finish_network_setup()						
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_local_probe_request(100)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()		
		edit_network_page.set_external_radius_server_1()
		edit_network_page.set_external_radius_server_2()
		edit_network_page.set_blacklisting_option('Enabled')
		edit_network_page.set_max_authentication_option(10)
		edit_network_page.set_load_balancing_option('Enabled')
		edit_network_page._save_settings()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_auth_server_loadbalancing_max_auth_failure()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()	
		
	def test_ath_11990_edit_enterprise_wpa_enterprise_voice_network_with_local_probe_request_threshold_blacklisting(self):
		self.take_s1_snapshot()
		conf = self.config.config_vars
		self._delete_network_auth_server()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.set_advance_options(local_probe=True)
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_wpa_enterprise()
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_blacklisting(conf.blacklisting_option,conf.max_authentication_failure)
		security.set_load_balancing_field(conf.blacklisting_option)
		security.configure_reauth_interval(conf.new_reauth_value,conf.reauth_intrvl_unit_hrs)
		access = security.click_on_next()        
		access.finish_network_setup()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options()
		logger.debug('EditNetworkPage :Advance settings: Writing local probe : 0')
		edit_network_page.localprobe.set(conf.max_auth_failure0)
		edit_network_page.click_on_security_accordion()
		logger.debug('EditNetworkPage :Security : Selecting InternalServer Auth server1 field')
		edit_network_page.select_auth_server_internalserver('1')
		edit_network_page.set_blacklisting_option('Disabled')
		logger.debug('EditNetworkPage :Security : Writing reauth interval : 0 mins')
		edit_network_page.reauth_interval.set('0')
		edit_network_page._save_settings()
		self.LeftPanel.assert_delta_config_icon()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options()
		logger.debug('EditNetworkPage :Advance settings: Asserting local probe value: 0')
		self.browser.assert_text(edit_network_page.localprobe, conf.max_auth_failure0, "Local probe not set to 0",'value')
		edit_network_page.click_on_security_accordion()
		logger.debug('EditNetworkPage :Security : asserting Auth server1 field is selected to : InternalServer')
		self.browser.assert_drop_down_value(edit_network_page.authentication_server, conf.edit_Authentication_server, "Authentication server not set to 'InternalServer'")
		logger.debug('EditNetworkPage :Security : asserting blacklisting field is selected to : disabled')
		self.browser.assert_drop_down_value(edit_network_page.blacklisting, conf.disabled_option, "Blacklisting is not set to 'Disabled'")
		logger.debug('EditNetworkPage :Security : asserting reauth interval field is set to : 0')
		self.browser.assert_text(edit_network_page.reauth_interval, conf.max_auth_failure0, "Reauth interval is not set to 0",'value')
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11991_edit_enterprise_wpa_enterprise_voice_network_with_mac_authentication_request_threshold(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_wpa_enterprise()
		security.configure_security_radio_fields(mac_authentication=True,mac_authentication_fail_thru=True)
		security.set_uppercase_support_dropdown()
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		edit_network.set_mac_authentication_options()
		edit_network.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()        
		logger.debug('EditNetworkPage :Security : asserting blacklisting field is selected to : disabled')
		self.browser.assert_check_box_value(edit_network.mac_authentication_enterprise, 'Mac authentication before802.1x is not unchecked', check = True)
		logger.debug('EditNetworkPage :Security : asserting blacklisting field is selected to : disabled')
		self.browser.assert_check_box_value(edit_network.auth_failthru_enterprise, 'auth fail through is not unchecked', check = True)	

		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11992_create_enterprise_wpa_enterprise_voice_network_with_key_management_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa=True)        
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level(enterprise=True)
		edit_network.assert_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		edit_network.assert_external_radius_auth_server_one()
		edit_network.assert_external_radius_auth_server_two()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11993_edit_enterprise_wpa_enterprise_voice_network_with_authentication_server_2_accoun(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_wpa_enterprise()
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.enable_accounting_interval('1')
		security.enable_authentication_survivability()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.click_security_accordion()
		edit_network.select_internal_server_in_auth_server_2()
		edit_network._save_settings()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.click_security_accordion()
		edit_network.assert_auth_server_2_internal()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9356_edit_enterprise_wpa2_enterprise_voice_network_with_local_probe_request_threshold(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(local_probe = True)
		security = virtual_lan.use_vlan_defaults()
		security.setting_dynamic_wep_voice_network_value('WPA-2 Enterprise')
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_dynamic_wep_voice_network_value()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_dynamic_wep_voice_network_value()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11994_create_enterprise_wpa_wpa2_enterprise_voice_network_with_inactive_timeout_interval(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(inactivity_timeout=True)
		security = virtual_lan.select_virtual_controller()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.configure_auth_server_settings(roaming=True)
		security.assert_auth_server_one_defaults()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edited_advance_options()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11996_edit_enterprise_both_WPA_2_and_WPA_enterprise_voice_network_with_hide_ssid_okc_termination(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()						
		security.click_on_enterprise_radio_button()		
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.set_external_radius_server_1()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s1_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()					
		edit_network_page.click_on_hide_ssid()
		edit_network_page.click_on_security_accordion()
		edit_network_page.click_on_okc('Disable')
		edit_network_page.setting_termination_option(True)
		edit_network_page.assert_auth_server_2(True)
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()			
		edit_network_page.assert_hide_ssid_enabled()
		edit_network_page.click_on_security_accordion()		
		edit_network_page.assert_okc_checkbox(False)
		edit_network_page.assert_termination_dropdown('Enabled')
		edit_network_page.click_on_network()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11997_edit_enterprise_both_WPA_2_and_WPA_enterprise_voice_network_with_hide_SSID(self):

		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_hide_ssid()		
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()					 				
		security.setting_termination_option(True)
		security.set_external_radius_server_1()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.click_on_hide_ssid()
		edit_network_page.click_on_security_accordion()
		edit_network_page.assert_auth_survivability_cache_timeout()
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		# edit_network_page.assert_hide_ssid_enabled()
		edit_network_page.click_on_network()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11998_edit_enterprise_both_wpa_2_and_wpa_enterprise_voice_network_with_disabled_ssid(self):
		conf=self.config.config_vars
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.voice_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.configure_auth_server_settings(termination = True)
		security.create_external_radiuds_server('1')
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options(disable_ssid=True)
		edit_network_page.click_security_accordion()
		edit_network_page.edit_enterprise_employee_network_with_disabled_ssid()
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_disable_ssid_checkbox('check')
		edit_network_page.click_security_accordion()
		edit_network_page.assert_external_radius_auth_server_one()
		edit_network_page.assert_auth_server_settings(accounting_enable=True,termination_disable = True)
		self.browser.assert_text(edit_network_page.account_interval,conf.new_accounting_interval,'Accounting interval not set to "60"','value')
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()     
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11999_edit_enterprise_both_wpa_2_and_wpa_enterprise_voice_network_with_disable_ssid(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(disable_ssid=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_key_management('Both(WPA-2 & WPA)')
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()		
		security.setting_termination_option(flag=False)
		security.enable_accounting_interval('60')
		security.enable_authentication_survivability()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.set_enterprise_both_wpa_2_and_wpa_enterprise_voice()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.asserting_enterprise_both_wpa_2_and_wpa_enterprise_voice()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12000_create_enterprise_wpa_wpa2_enterprise_voice_network_with_can_be_used_without_uplink(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(uplink=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.set_auth_interval_time(10)
		security.configure_auth_server_settings()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edited_advance_options(uplink=True)
		edit_network.assert_security_level(enterprise=True)
		edit_network.assert_auth_server_settings(okc=True)
		self.LeftPanel.go_to_network_page()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12001_edit_enterprise_both_WPA_2_and_WPA_enterprise_voice_network_with_can_be_used(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_can_be_used_without_uplink()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.click_on_okc('Disable')
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.set_reauth_interval_options(10)
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.click_on_can_be_used_without_uplink()
		edit_network_page.click_on_security_accordion()
		edit_network_page.click_on_okc('Enable')
		edit_network_page.set_reauth_interval()
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_can_be_used_without_uplink_okc_reauth_interval()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12002_edit_enterprise_both_wpa_2_and_wpa_enterprise_voice_network_with_max_client_threshold(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.voice_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_max_client_threshold_and_mac_authentication()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_delimiter_uppercase_support_mac_auth_options_check()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12003_edit_enterprise_both_wpa_2_and_wpa_enterprise_voice_network_with_max_client_blacklisting(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj   = basic_info.set_advance_options(max_threshold=True)
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.enable_mac_authentication_enterprise()
		security.configure_auth_server_settings(uppercase_support= True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_enterprise_employee_network_blacklisting_enabled()
		self.take_s2_snapshot()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_blacklisting_uppercase_support_delimiter_changes()
		self.NetworkPage.delete_network_if_present()       
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()	
		
	def test_ath_12004_edit_enterprise_both_wpa_2_and_wpa_enterprise_voice_network_with_local_probe(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.voice_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_advanced_settings_accordion()
		edit_network_page.set_localprobe_feilds()
		edit_network_page.click_security_accordion()
		edit_network_page.create_external_radiuds_server('1')
		edit_network_page.create_external_radiuds_server('2')
		edit_network_page.enable_auth_server_settings(balancing=True,blacklisting=True,max_auth_failures=True)
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.assert_external_radius_auth_server_one()
		edit_network_page.assert_external_radius_auth_server_two()
		edit_network_page.assert_auth_server_settings(balancing=True,blacklisting=True,max_auth_failures=True)
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page() 
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12005_edit_enterprise_both_wpa2_and_wpa_enterprise_voice_network_with_local_probe_req(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.set_advance_options()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.configure_blacklisting('Enable',conf.max_authentication_failure)
		security.set_load_balancing_field(conf.blacklisting_option)
		security.configure_reauth_interval(conf.new_reauth_value,conf.reauth_intrvl_unit_hrs)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_enterprise_both_wpa2_and_wpa_enterprise_voice_network_with_local_probe_req()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_advance_options()
		edit_network.assert_edited_values()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12006_edit_enterprise_both_wpa2_and_wpa_enterprise_voice_network_with_mac_authenticat(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(wpa_wpa2=True)
		security.configure_security_radio_fields(okc=True,mac_authentication=True,mac_authentication_fail_thru=True)
		security.set_uppercase_support_dropdown()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.configure_okc()
		edit_network_page.configure_mac_authentication_radio_button(enable=False)
		edit_network_page.configure_auth_failthru_enterprise_radio_button()
		edit_network_page.save_settings.click()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.assert_configure_security_radio_fields()
		self.LeftPanel.go_to_network_page()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12007_create_enterprise_wpa_wpa2_enterprise_voice_network_with_key_management_accounting(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.assert_default_fields_security_enterprise(wpa_wpa2=True)       
		security.create_external_radius_server_in_auth_server_one()
		security.create_external_radius_server_in_auth_server_two()
		security.configure_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_level(enterprise=True)
		edit_network.assert_auth_server_settings(accounting_enable=True,acc_interval=True,balancing=True,auth_survivability=True)
		edit_network.assert_external_radius_auth_server_one()
		edit_network.assert_external_radius_auth_server_two()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12008_edit_enterprise_both_wpa2_and_wpa_enterprise_voice_network_with_authentication(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.enable_accounting_interval('1')
		security.enable_authentication_survivability()
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		edit_network.select_internal_server_in_auth_server_2()
		edit_network.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		self.browser.assert_drop_down_value(edit_network.authentication_server_2, conf.edit_Authentication_server, 'authentication server2 is not set to internal server')
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12009_create_enterprise_dynamic_WEP_voice_network_with_inactive_timeout_virtual_con(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_inactive_timeout(3600)
		security = virtual_lan.select_virtual_controller()
		security.click_on_enterprise_radio_button()
		security.set_key_management_dynamic_wep_option()
		security.assert_auth_server_internal_server_option()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_inactive_timeout_vlan_security_level_key_management()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12010_edit_enterprise_dynamic_wep_voice_network_with_inactive_timeout_authentication(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(inactivity_timeout=True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_dynamic_wep_option()
		security.create_external_radius_server_in_auth_server_one()
		security.set_authentication_server_to_internalserver()
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.click_on_advanced_settings_accordion()
		edit_network.set_inactive_timeout_option(self.config.config_vars.default_inactivity_timeout)
		edit_network.setting_security_page_value(roaming = False)
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_security_page_value(roaming = False)
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_9376_edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_inactive_timeout(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.set_advance_options(inactivity_timeout = True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.configure_auth_server_settings(roaming = True)
		security.set_authentication_server(conf.InternalServer)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_inactive_timeout()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_inactive_timeout()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12011_edit_enterprise_dynamic_WEP_voice_network_with_hide_SSID_termination_use_session_key_for_LEAP(self):
		self.take_s1_snapshot()	
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()		
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_dynamic_wep_option()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.click_on_hide_ssid()		 					
		edit_network_page.click_on_security_accordion()
		edit_network_page.setting_termination_option(True)
		edit_network_page.set_session_key_for_leap()
		edit_network_page.set_external_radius_server_1()
		edit_network_page._save_settings()					
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_hide_ssid_termination_session_key_for_leap()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12012_edit_enterprise_dynamic_wep_voice_network_with_hide_ssid_authentication_survivability(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.voice_network_with_advanced_settings_enable_hide_ssid()
		security = vlan_obj.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_security_enterprise_dropdown(dynamic_wep=True)
		security.configure_auth_server_settings(termination= True)
		security.create_external_radiuds_server('1')
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_advance_options(hide_ssid_uncheck=True)
		edit_network_page.click_security_accordion()
		edit_network_page.enable_auth_server_settings(auth_survivability=True)
		edit_network_page.set_auth_cache_timeout('19')
		edit_network_page._save_settings()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.check_hide_ssid_checkbox('uncheck')
		edit_network_page.click_security_accordion()
		edit_network_page.assert_auth_survivability('Enabled')
		edit_network_page.assert_cache_timeout('19')
		#edit_network_page.assert_auth_server_settings(termination_enable = True)
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()     
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12013_edit_enterprise_dynamic_WEP_voice_network_with_disable_SSID_accounting_interv(self):
		self.take_s1_snapshot()	
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_dynamic_wep_option()
		security.set_external_radius_server_1()
		security.setting_termination_option(True)
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_advanced_settings_accordion()
		edit_network_page.click_on_disable_ssid()
		edit_network_page._save_settings()	
		edit_network_page = self.NetworkPage.edit_network()	
		edit_network_page.click_on_security_accordion()
		edit_network_page.setting_termination_option(False)
		edit_network_page.setting_accounting_interval_option(True,60)
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()	
		edit_network_page.assert_disable_ssid_termination_accounting_option()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12014_edit_enterprise_dynamic_WEP_voice_network_with_disable_SSID_authentication(self):

		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.create_and_assert_voice_network_with_disable_ssid()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_auth_server_termination_accounting()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_disable_ssid_auth_server_termination()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_disable_ssid_auth_server_termination_changes()
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()						
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12015_create_enterprise_dynamic_WEP_voice_network_with_can_be_used_without_uplink_select(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_can_be_used_without_uplink()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_reauth_interval_use_session_key()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_key_management_reauth_interval_use_session_key_changes()
		self.NetworkPage.delete_network_if_present()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12016_edit_enterprise_dynamic_WEP_voice_network_with_can_be_used_without_uplink(self):

		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_can_be_used_without_uplink()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_reauth_interval_use_session_key()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.edit_reauth_interval_session_key_with_advanced_settings()	
		edit_network_page = self.NetworkPage.edit_network()
		self.take_s2_snapshot()
		edit_network_page.assert_reauth_interval_session_key_with_advanced_settings_changes()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12017_edit_enterprise_dynamic_WEP_voice_network_with_max_client_threshold_delimiter(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_can_be_used_without_uplink()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_dynamic_wep()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_max_client_threshold(255)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_delimiter_uppercase_support_mac_auth_options()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_delimiter_uppercase_support_mac_auth_options_check()	
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12018_edit_enterprise_dynamic_WEP_voice_network_with_max_client_threshold_blacklist(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info_with_max_client_threshold()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_dynamic_wep_with_uppercase_support_enabled()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()		
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_max_client_threshold(0)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_blacklisting_uppercase_support_delimiter_options()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_blacklisting_uppercase_support_delimiter_changes()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12019_edit_enterprise_dynamic_WEP_voice_network_with_local_probe_request_threshold(self):
		self.take_s1_snapshot()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.set_key_management_dynamic_wep()					
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_local_probe_request(100)
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.set_auth_server_loadbalancing_max_auth_failure()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_auth_server_loadbalancing_max_auth_failure()
		self.LeftPanel.assert_delta_config_icon()
		self.NetworkPage.delete_network_if_present()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_2_external_servers()
		self.LeftPanel.assert_delta_config_icon()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12020_edit_enterprise_dynamic_wep_voice_network_with_local_probe_request_threshold(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(local_probe = True)
		security = virtual_lan.use_vlan_defaults()
		security.setting_dynamic_wep_voice_network_value('Dynamic- WEP With 802.1x')
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_dynamic_wep_voice_network_value()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_dynamic_wep_voice_network_value()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12021_edit_enterprise_dynamic_WEP_voice_network_with_mac_authentication_mac_authe(self):
		self.take_s1_snapshot()	
		self.NetworkPage.delete_network_if_present()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.click_on_enterprise_radio_button()
		security.set_key_management_dynamic_wep_option()
		security.set_mac_authentication_options()
		security.set_uppercase_support_dropdown()
		access = security.move_to_next_page()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		self.take_s2_snapshot()	
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_on_security_accordion()
		edit_network_page.set_mac_authentication_options()
		edit_network_page.set_session_key_for_leap()
		edit_network_page.assert_uppercase_support_delimiter_options()
		edit_network_page._save_settings()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_disabled_mac_authentication_options_and_session_key_for_leap()
		self.NetworkPage.delete_network_if_present()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12022_create_enterprise_dynamic_wep_voice_network_with_key_management_accounting_interval(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.voice_network_info()
		security = vlan_obj.use_vlan_defaults()
		security.set_security_level_and_key_management('Enterprise')
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.configure_auth_server_settings(accounting_enable = True,acc_interval=True, auth_survivability=True, balancing=True)
		access = security.click_on_next()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.click_security_accordion()
		edit_network_page.assert_auth_server_settings(accounting_enable=True,balancing=True,auth_survivability=True)
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page() 
		self._delete_network_auth_server()
		self.LeftPanel.assert_delta_config_icon()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_12023_edit_enterprise_dyanamic_wep_voice_network_with_authentication_server2_accounting(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.voice_network_info()
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_dynamic_wep_option()
		security.create_external_radiuds_server('1')
		security.create_external_radiuds_server('2')
		security.enable_accounting_interval('1')
		security.enable_authentication_survivability()
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		edit_network.select_internal_server_in_auth_server_2()
		edit_network.save_configuration()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.open_security_accordion()
		self.browser.assert_drop_down_value(edit_network.authentication_server_2, conf.edit_Authentication_server, 'authentication server2 is not set to internal server')
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11975_edit_enterprise_wpa2_enterprise_voice_network_with_local_probe_request_threshold(self):
		self._delete_network_auth_server()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan    = basic_info.set_advance_options(local_probe = True)
		security = virtual_lan.use_vlan_defaults()
		security.setting_dynamic_wep_voice_network_value('WPA-2 Enterprise')
		access = security.click_on_next()
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_dynamic_wep_voice_network_value()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_dynamic_wep_voice_network_value()
		self.LeftPanel.go_to_network_page()
		self.take_s2_snapshot()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11995_edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_inactive_timeout(self):
		self._delete_network_auth_server()
		conf = self.config.config_vars
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.set_advance_options(inactivity_timeout = True)
		security = virtual_lan.use_vlan_defaults()
		security.configure_security_level(enterprise=True)
		security.set_key_management_both_wpa2_and_wpa_enterprise_option()
		security.configure_auth_server_settings(roaming = True)
		security.set_authentication_server(conf.InternalServer)
		access = security.click_on_next()        
		access.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_inactive_timeout()
		self.LeftPanel.assert_delta_config_icon()
		edit_network = self.NetworkPage.edit_network()
		edit_network.assert_edit_enterprise_both_wpa2_and_wpa_enterprise_employee_network_with_inactive_timeout()
		self.take_s2_snapshot()
		self.LeftPanel.go_to_network_page()
		self._delete_network_auth_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		