import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class NonDefaultValue(ConfigurationTest):
	'''
	Test class for NonDefaultValue test cases of configuration module.
	'''

	def test_ath_11334_network_integration(self):
		self.take_s1_snapshot()
		services_page = self.LeftPanel.go_to_services()
		services_page.click_on_network_integration_accordion()
		services_page.set_network_integration_non_default_values()
		self.take_s2_snapshot()
		services_page.click_on_network_integration_accordion()
		services_page.reset_network_integration_fields()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11333_calea_configuration(self):
		self.take_s1_snapshot()
		services_page = self.LeftPanel.go_to_services()
		services_page.set_calea_non_default_values()
		self.take_s2_snapshot()
		services_page.clear_calea_settings()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11332_open_dns(self):
		self.take_s1_snapshot()
		services_page = self.LeftPanel.go_to_services()
		services_page.open_dns_credentials()
		self.take_s2_snapshot()
		services_page.clear_dns_credenrials()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11330_air_group(self):
		self.take_s1_snapshot()
		security_page = self.LeftPanel.go_to_security() 
		security_page.go_to_roles()
		security_page.create_new_role()
		services_page = self.LeftPanel.go_to_services()
		services_page.enable_airgroup()
		services_page.airgroup_bonjour_enable()
		
		services_page.page_down()
		services_page.click_on_enable_air_print_checkbox()
		services_page.edit_air_print_disallowed_role()
		services_page.edit_air_print_disallowed_vlans_id()
		services_page.save_settings()
		
		services_page.click_on_enable_air_play_checkbox()
		services_page.click_on_edit_air_play_disallowed_roles()
		services_page.edit_air_group_setting_and_services_disallowed_role()
		services_page.assert_air_play_default_wired_port_profile()
		services_page.click_on_edit_air_play_disallowed_vlans()
		services_page.edit_air_group_setting_and_services_disallowed_vlans()
		services_page.assert_air_play_created_vlan_text()
		services_page.save_settings()
		
		services_page.click_on_itunes_checkbox()
		services_page.click_on_edit_itunes_disallowed_roles()
		services_page.edit_air_group_setting_and_services_disallowed_role()
		services_page.assert_itunes_default_wired_port_profile()
		services_page.click_on_edit_itunes_disallowed_vlans()
		services_page.edit_air_group_setting_and_services_disallowed_vlans()
		services_page.assert_itunes_created_vlan_text()
		services_page.save_settings()
		
		services_page.click_on_remote_management()
		services_page.click_on_edit_remote_management_disallowed_roles()
		services_page.edit_air_group_setting_and_services_disallowed_role()
		services_page.assert_remote_management_wired_port_profile()
		services_page.click_on_edit_remote_management_disallowed_vlans()
		services_page.edit_air_group_setting_and_services_disallowed_vlans()
		services_page.assert_remote_management_created_vlan_text()
		services_page.save_settings()
		
		services_page.click_on_sharing_checkbox()
		services_page.click_on_edit_sharing_disallowed_roles()
		services_page.edit_air_group_setting_and_services_disallowed_role()
		services_page.assert_sharing_wired_port_profile()
		services_page.click_on_edit_sharing_disallowed_vlans()
		services_page.edit_air_group_setting_and_services_disallowed_vlans()
		services_page.assert_sharing_created_vlan_text()
		services_page.save_settings()
		
		services_page.click_on_chat_checkbox()
		services_page.click_on_edit_chat_disallowed_roles()
		services_page.edit_air_group_setting_and_services_disallowed_role()
		services_page.assert_chat_wired_port_profile()
		services_page.click_on_edit_chat_disallowed_vlans()
		services_page.edit_air_group_setting_and_services_disallowed_vlans()
		services_page.assert_chat_created_vlan_text()
		services_page.save_settings()
		
		services_page.click_on_allowall_checkbox()
		services_page.click_on_edit_allow_all_disallowed_roles()
		services_page.edit_air_group_setting_and_services_disallowed_role()
		services_page.assert_allow_all_wired_port_profile()
		services_page.click_on_edit_allow_all_disallowed_vlans()
		services_page.edit_air_group_setting_and_services_disallowed_vlans()
		services_page.assert_allow_all_created_vlan_text()
		services_page.save_settings()
		
		self.take_s2_snapshot()
		services_page.restore_defaults()
		security_page = self.LeftPanel.go_to_security()
		security_page.go_to_roles()
		security_page.delete_roles()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11331_rtls(self):
		conf=self.config.config_vars
		self.take_s1_snapshot()
		services_page = self.LeftPanel.go_to_services()
		services_page.click_on_rtls_accordion()
		services_page.click_on_aruba_rtls()
		services_page.click_analytics_location_engine_checkbox()
		services_page.click_aeroscout_checkbox()
		services_page.set_rtls_fields(conf.Ip_Address,conf.Port,conf.Network_Passphrase,conf.Network_Passphrase,conf.rtls_update)
		services_page.click_rtls_unassociated_chk()
		services_page.set_rtls_analytics_location_engine_fields(conf.service_server,conf.report_interval_location_new)
		services_page.set_aeroscout_fields(conf.Ip_Address,conf.Port)
		services_page.click_scout_unassociated_chk()
		services_page.save_settings()
		self.take_s2_snapshot()
		services_page.clear_entire_rtls_fields(aruba_rtls=True,location_engine=True,aero_scout=True) 
		services_page.save_settings()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()		
		
	def test_ath_11335_app_rf(self):
		self.take_s1_snapshot()
		services_page = self.LeftPanel.go_to_services()
		services_page.click_on_app_rf_accordion()
		services_page.assert_enable_dpi('false')
		services_page.set_enable_dpi('true')
		services_page.save_settings()
		self.take_s2_snapshot()
		services_page.set_enable_dpi('false')
		services_page.save_settings()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11336_cppm_server_for_airgroup(self):
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_cppm_server()
		security_page.delete_cppm_server()
		security_page.delete_cppm_server()
		self.take_s1_snapshot()
		config1 = self.config.config_vars
		services_page = self.LeftPanel.go_to_services()
		services_page.click_on_enable_air_group()
		services_page.set_cppm_server1(config1.new_cppm_server_name)
		services_page.set_new_server_name(config1.User_Name)
		services_page.set_new_server_ip(config1.cppm_server_ip)
		services_page.set_new_server_shared_key(config1.auth_sharedkey_value)
		services_page.set_new_server_retype_shared_key(config1.auth_sharedkey_value)
		services_page.set_rfc_3576('enable')
		services_page.set_accounting_port(config1.act_port)
		services_page.set_deadtime(config1.rtls_update_edit)
		services_page.set_timeout(config1.rtls_update_edit)
		services_page.set_retrycount(config1.invalid_auth_sharedkey_value)
		services_page.set_nas_ip_address(config1.ip_addr_edit)
		services_page.set_nas_identifier(config1.calea_mtu1)
		services_page.set_auth_port(config1.calea_gre_type1)
		services_page.save_auth_server()
		services_page.set_cppm_server1(config1.new_cppm_server_name)
		services_page.tacacs_radio.click()
		services_page.set_new_server_tacacs_name(config1.User_Name_1)
		services_page.set_new_server_tacacs_shared_key(config1.auth_sharedkey_value)
		services_page.set_new_server_tacacs_retype_shared_key(config1.auth_sharedkey_value)
		services_page.set_tacacs_auth_port(config1.calea_gre_type1)
		services_page.set_tacacs_timeout(config1.rtls_update_edit)
		services_page.set_new_server_tacacs_ip(config1.cppm_server_ip)
		services_page.set_tacacs_retrycount(config1.invalid_auth_sharedkey_value)
		services_page.save_auth_server()
		services_page.set_cppm_server1(config1.new_cppm_server_name)
		services_page.auth_coa_only.click()
		services_page.set_new_server_name(config1.User_Name2)
		services_page.set_new_server_ip(config1.cppm_server_ip)
		services_page.set_new_server_shared_key(config1.auth_sharedkey_value)
		services_page.set_new_server_retype_shared_key(config1.auth_sharedkey_value)
		services_page.set_airgroup_port(config1.calea_gre_type1)
		services_page.save_auth_server()
		services_page.save_settings()
		self.take_s2_snapshot()
		services_page.click_on_enable_air_group()
		services_page.save_settings()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_cppm_server()
		security_page.delete_cppm_server()
		security_page.delete_cppm_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(None)
		self.assert_s1_s3_diff()
		self.clear()
		