import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class Edit(ConfigurationTest):
	'''
	Test class for Edit test cases 
	'''

	def test_ath_11373_calea(self):
		self.take_s1_snapshot()
		services_page = self.LeftPanel.go_to_services()
		services_page.edit_calea_configuration()
		self.take_s2_snapshot()
		services_page.clear_calea_settings()  
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11374_network_integration_non_default_values(self):
		self.take_s1_snapshot()
		services_page = self.LeftPanel.go_to_services()
		services_page.click_on_network_integration_accordion()
		services_page.edit_network_integration()
		self.take_s2_snapshot()
		services_page.reset_network_integration_fields()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11372_open_dns(self):
		self.take_s1_snapshot()
		services_page = self.LeftPanel.go_to_services()
		services_page.open_dns_credentials()
		self.take_s2_snapshot()
		services_page.clear_dns_credenrials()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11371_rtls(self):
		conf=self.config.config_vars
		self.take_s1_snapshot()
		services_page = self.LeftPanel.go_to_services()
		services_page.click_on_rtls_accordion()
		services_page.click_on_aruba_rtls()
		services_page.click_analytics_location_engine_checkbox()
		services_page.click_aeroscout_checkbox()
		services_page.set_rtls_fields(conf.Ip_Address,conf.Port,conf.Network_Passphrase,conf.Network_Passphrase,conf.rtls_update)
		services_page.click_rtls_unassociated_chk()
		services_page.set_rtls_analytics_location_engine_fields(conf.service_server,conf.report_interval_location_new)
		services_page.set_aeroscout_fields(conf.Ip_Address,conf.Port)
		services_page.click_scout_unassociated_chk()
		services_page.save_settings()
		services_page.set_rtls_fields(conf.ip_addr_edit,conf.port_edit,conf.passphrase_edit,conf.passphrase_edit,conf.rtls_update_edit)
		services_page.set_rtls_analytics_location_engine_fields(conf.service_server_edit,conf.report_interval_location_edit)
		services_page.set_aeroscout_fields(conf.ip_addr_edit,conf.port_edit)
		services_page.save_settings()
		self.take_s2_snapshot()
		services_page.clear_entire_rtls_fields(aruba_rtls=True,location_engine=True,aero_scout=True)  
		services_page.save_settings()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()	

	def test_ath_11375_app_rf(self):
		self.take_s1_snapshot()
		services_page = self.LeftPanel.go_to_services()
		services_page.click_on_app_rf_accordion()
		services_page.assert_enable_dpi('false')
		services_page.set_enable_dpi('true')
		services_page.save_settings()
		self.take_s2_snapshot()
		services_page.set_enable_dpi('false')
		services_page.save_settings()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11376_cppm_server_for_airgroup(self):
		self.take_s1_snapshot()
		config1 = self.config.config_vars
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_cppm_server()
		security_page.create_authentication_server_radius()
		services_page = self.LeftPanel.go_to_services()
		services_page.click_on_enable_air_group()
		services_page.set_cppm_server1(config1.auth_server_name_value)
		services_page.edit_cppm_server1()
		# services_page.set_new_server_name(config1.User_Name)
		services_page.set_new_server_ip(config1.cppm_server_ip)
		services_page.set_new_server_shared_key(config1.auth_sharedkey_value)
		services_page.set_new_server_retype_shared_key(config1.auth_sharedkey_value)
		services_page.set_rfc_3576('enable')
		services_page.set_accounting_port(config1.act_port)
		services_page.set_deadtime(config1.rtls_update_edit)
		services_page.set_timeout(config1.rtls_update_edit)
		services_page.set_retrycount(config1.invalid_auth_sharedkey_value)
		services_page.set_nas_ip_address(config1.ip_addr_edit)
		services_page.set_nas_identifier(config1.calea_mtu1)
		services_page.set_auth_port(config1.calea_gre_type1)
		services_page.save_auth_server()
		services_page.save_settings()
		self.take_s2_snapshot()
		security_page = self.LeftPanel.go_to_security()
		security_page.delete_cppm_server()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(None)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11370_airgroup(self):
		conf = self.config.config_vars
		security_page = self.LeftPanel.go_to_security() 
		security_page.go_to_roles()
		security_page.create_new_role()
		services_page = self.LeftPanel.go_to_services()
		services_page.enable_airgroup()
		services_page.airgroup_bonjour_enable()
		
		services_page.page_down()
		services_page.click_on_enable_air_print_checkbox()
		services_page.edit_air_print_disallowed_role()
		services_page.edit_air_print_disallowed_vlans_id()
		services_page.save_settings()
		
		services_page.click_on_enable_air_play_checkbox()
		services_page.click_on_edit_air_play_disallowed_roles()
		services_page.edit_air_group_setting_and_services_disallowed_role()
		services_page.click_on_edit_air_play_disallowed_vlans()
		services_page.edit_air_group_setting_and_services_disallowed_vlans()
		services_page.save_settings()
		
		services_page.click_on_itunes_checkbox()
		services_page.click_on_edit_itunes_disallowed_roles()
		services_page.edit_air_group_setting_and_services_disallowed_role()
		services_page.click_on_edit_itunes_disallowed_vlans()
		services_page.edit_air_group_setting_and_services_disallowed_vlans()
		services_page.save_settings()
		
		services_page.click_on_remote_management()
		services_page.click_on_edit_remote_management_disallowed_roles()
		services_page.edit_air_group_setting_and_services_disallowed_role()
		services_page.click_on_edit_remote_management_disallowed_vlans()
		services_page.edit_air_group_setting_and_services_disallowed_vlans()
		services_page.save_settings()
		
		services_page.click_on_sharing_checkbox()
		services_page.click_on_edit_sharing_disallowed_roles()
		services_page.edit_air_group_setting_and_services_disallowed_role()
		services_page.click_on_edit_sharing_disallowed_vlans()
		services_page.edit_air_group_setting_and_services_disallowed_vlans()
		services_page.save_settings()
		
		services_page.click_on_chat_checkbox()
		services_page.click_on_edit_chat_disallowed_roles()
		services_page.edit_air_group_setting_and_services_disallowed_role()
		services_page.click_on_edit_chat_disallowed_vlans()
		services_page.edit_air_group_setting_and_services_disallowed_vlans()
		services_page.save_settings()
		
		services_page.click_on_allowall_checkbox()
		services_page.click_on_edit_allow_all_disallowed_roles()
		services_page.edit_air_group_setting_and_services_disallowed_role()
		services_page.click_on_edit_allow_all_disallowed_vlans()
		services_page.edit_air_group_setting_and_services_disallowed_vlans()
		services_page.save_settings()

		self.take_s1_snapshot()
		
		services_page.click_on_edit_air_print_disallowed_roles()
		services_page.select_default_role()
		services_page.move_back_selected_role()
		services_page.select_wired_instant_role()
		services_page.move_selected_role()
		services_page.save_roles()
		services_page.click_on_edit_air_print_disallowed_vlans()
		services_page.set_vlans(conf.rtls_update)
		services_page.save_vlan_pop_up()
		
		services_page.click_on_edit_air_play_disallowed_roles()
		services_page.select_default_role()
		services_page.move_back_selected_role()
		services_page.select_wired_instant_role()
		services_page.move_selected_role()
		services_page.save_roles()
		services_page.click_on_edit_air_play_disallowed_vlans()
		services_page.set_vlans(conf.rtls_update)
		services_page.save_vlan_pop_up()

		services_page.click_on_edit_itunes_disallowed_roles()
		services_page.select_default_role()
		services_page.move_back_selected_role()
		services_page.select_wired_instant_role()
		services_page.move_selected_role()
		services_page.save_roles()
		services_page.click_on_edit_itunes_disallowed_vlans()
		services_page.set_vlans(conf.rtls_update)
		services_page.save_vlan_pop_up()

		services_page.click_on_edit_remote_management_disallowed_roles()
		services_page.select_default_role()
		services_page.move_back_selected_role()
		services_page.select_wired_instant_role()
		services_page.move_selected_role()
		services_page.save_roles()
		services_page.click_on_edit_remote_management_disallowed_vlans()
		services_page.set_vlans(conf.rtls_update)
		services_page.save_vlan_pop_up()

		services_page.click_on_edit_sharing_disallowed_roles()
		services_page.select_default_role()
		services_page.move_back_selected_role()
		services_page.select_wired_instant_role()
		services_page.move_selected_role()
		services_page.save_roles()
		services_page.click_on_edit_sharing_disallowed_vlans()
		services_page.set_vlans(conf.rtls_update)
		services_page.save_vlan_pop_up()

		services_page.click_on_edit_chat_disallowed_roles()
		services_page.select_default_role()
		services_page.move_back_selected_role()
		services_page.select_wired_instant_role()
		services_page.move_selected_role()
		services_page.save_roles()
		services_page.click_on_edit_chat_disallowed_vlans()
		services_page.set_vlans(conf.rtls_update)
		services_page.save_vlan_pop_up()

		services_page.click_on_edit_allow_all_disallowed_roles()
		services_page.select_default_role()
		services_page.move_back_selected_role()
		services_page.select_wired_instant_role()
		services_page.move_selected_role()
		services_page.save_roles()
		services_page.click_on_edit_allow_all_disallowed_vlans()
		services_page.set_vlans(conf.rtls_update)
		services_page.save_vlan_pop_up()
		services_page.save_settings()
		
		self.take_s2_snapshot()
		services_page.restore_defaults()
		security_page = self.LeftPanel.go_to_security()
		security_page.go_to_roles()
		security_page.delete_roles()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
