import logging
logger = logging.getLogger('athenataf')

from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class Configuration(ConfigurationTest):
	'''
		Test class for Configuration.
	'''
	
	def test_ath_8290_configure_IPSec(self):
		self.take_s1_snapshot()
		vpn_obj = self.LeftPanel.go_to_vpn()
		vpn_obj.routing.click()
		vpn_obj.controller.click()
		vpn_obj.protocol.set(self.config.config_vars.vpn_def_protocol)
		protocol_default = vpn_obj.protocol.get_selected()
		config_protocol = self.config.config_vars.vpn_def_protocol
		self.assertEquals(protocol_default, config_protocol)
		# vpn_obj.assert_IPsec_parameters_fields()
		vpn_obj.write_in_primary()
		vpn_obj.write_in_backup()
		vpn_obj.configure_IPSec_default()
		vpn_obj.assert_IPSec_fields()
		vpn_obj.save_settings()
		self.take_s2_snapshot()
		vpn_obj.revert_settings()
		vpn_obj.save_settings()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8291_configure_manual_GRE_(self):
		self.take_s1_snapshot()
		vpn_obj = self.LeftPanel.go_to_vpn() 
		vpn_obj.routing.click()
		vpn_obj.controller.click()
		vpn_obj.protocol.set(self.config.config_vars.vpn_gre_protocol)
		# vpn_obj.assert_manual_gre_parameters_fields()
		vpn_obj.setting_gre_values()
		vpn_obj.save_settings()
		self.take_s2_snapshot()
		vpn_obj.restore_manual_GRE_default()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8292_configure_L2TPv3(self):
		self.take_s1_snapshot()
		vpn_obj = self.LeftPanel.go_to_vpn()
		vpn_obj.routing.click()
		vpn_obj.controller.click()		
		vpn_obj.protocol.set(self.config.config_vars.vpn_L2TPv3_protocol)
		vpn_obj.create_tunnel()
		vpn_obj.setting_tunnel_values()
		vpn_obj.assert_tunnel()
		vpn_obj.create_assert_session()
		vpn_obj.save_session_click()
		self.take_s2_snapshot()
		vpn_obj.delete_session()
		vpn_obj.tunnel_created.click()
		vpn_obj.delete_tunnel.click()
		vpn_obj.restore_Ipsec_default()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8293_configure_aruba_gre(self):
		self.take_s1_snapshot()
		vpn_obj = self.LeftPanel.go_to_vpn()
		vpn_obj.routing.click()
		vpn_obj.controller.click()
		vpn_obj.protocol.set(self.config.config_vars.vpn_ArubaGre_protocol)
		#vpn_obj.assert_IPsec_parameters_fields()
		vpn_obj.write_in_primary()
		vpn_obj.write_in_backup()
		vpn_obj.configure_IPSec_default()
		vpn_obj.enable_preup_tunnel()
		vpn_obj.save_settings()
		self.take_s2_snapshot()
		vpn_obj.revert_gre_settings()
		vpn_obj.restore_Ipsec_default()
		vpn_obj.buy_time()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8294_edit_protocol(self):
		self.take_s1_snapshot()
		vpn_obj = self.LeftPanel.go_to_vpn() 
		vpn_obj.routing.click()
		vpn_obj.controller.click()
		vpn_obj.assert_Ipsec_default()
		vpn_obj.protocol.set(self.config.config_vars.vpn_ArubaGre_protocol)
		vpn_obj.assert_aruba_gre_default()
		vpn_obj.protocol.set(self.config.config_vars.vpn_gre_protocol)
		vpn_obj.assert_manual_gre_default()
		self.take_s2_snapshot()
		vpn_obj.assert_Ipsec_default()
		vpn_obj.save_settings()
		vpn_obj.buy_time()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(None)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11192_configure_ipsec(self):
		self.take_s1_snapshot()
		vpn_obj = self.LeftPanel.go_to_vpn()
		vpn_obj.set_protocol(self.config.config_vars.vpn_def_protocol)	
		vpn_obj.set_primary_host_field(self.config.config_vars.hostname,'false')
		vpn_obj.assert_secs_between_test_packets()
		vpn_obj.assert_max_text_packet_loss()
		vpn_obj.set_secs_between_test_packets(self.config.config_vars.interval,'false')
		vpn_obj.set_max_allowed_test_packets_loss(self.config.config_vars.interval,'false')
		vpn_obj.set_backup_host(self.config.config_vars.primary_add,'false')
		vpn_obj.assert_backhost_fields()
		vpn_obj.set_premption('true')
		vpn_obj.assert_hold_time_field_default_value()
		vpn_obj.set_hold_time(self.config.config_vars.holdTime)
		vpn_obj.save_settings()
		vpn_obj.assert_hold_time_field('false')
		vpn_obj.set_reconnect_user_on_failover('true')
		vpn_obj.assert_reconnect_time_on_failover_field_default_value()
		vpn_obj.set_reconnect_time_on_failover(self.config.config_vars.interval)
		vpn_obj.save_settings()
		vpn_obj.assert_reconnect_time_on_failover_field('false')
		self.take_s2_snapshot()
		self.take_s2_snapshot()
		vpn_obj.set_backup_host('','false')
		vpn_obj.set_primary_host_field('','false')
		vpn_obj.buy_time()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_11193_configure_manual_gre(self):
		self.take_s1_snapshot()
		vpn_obj = self.LeftPanel.go_to_vpn()
		vpn_obj.set_protocol(self.config.config_vars.vpn_gre_protocol)
		vpn_obj.set_manual_gre_host(self.config.config_vars.primary_add)
		vpn_obj.save_settings()
		vpn_obj.assert_manual_gre_host('false')
		vpn_obj.set_gre_type(self.config.config_vars.valid_gre_type)
		vpn_obj.save_settings()
		vpn_obj.assert_gre_type_field('false')
		vpn_obj.set_per_ap_tunnel('true')
		vpn_obj.save_settings()
		self.take_s2_snapshot()
		vpn_obj.set_protocol(self.config.config_vars.vpn_def_protocol)	
		vpn_obj.save_settings()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()		
			
	def test_ath_11196_configuration_edit_protocol(self):
		self.take_s1_snapshot()
		vpn_obj = self.LeftPanel.go_to_vpn()
		vpn_obj.set_protocol(self.config.config_vars.vpn_ArubaGre_protocol)
		vpn_obj.write_in_primary()
		vpn_obj.save_settings()
		vpn_obj.set_protocol(self.config.config_vars.vpn_gre_protocol)
		vpn_obj.set_manual_gre_host(self.config.config_vars.primary_add)
		vpn_obj.save_settings()
		self.take_s2_snapshot()
		vpn_obj.restore_Ipsec_default()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_11195_configure_aruba_gre(self):
		self.take_s1_snapshot()
		vpn_obj = self.LeftPanel.go_to_vpn()
		vpn_obj.set_protocol(self.config.config_vars.vpn_ArubaGre_protocol)
		vpn_obj.write_in_primary()
		vpn_obj.assert_secs_between_test_packets()
		vpn_obj.assert_max_text_packet_loss()
		vpn_obj.set_secs_between_test_packets(self.config.config_vars.interval,'false')
		vpn_obj.set_max_allowed_test_packets_loss(self.config.config_vars.interval,'false')
		vpn_obj.set_backup_host(self.config.config_vars.primary_add,'false')
		vpn_obj.assert_backhost_fields()
		vpn_obj.set_premption('true')
		vpn_obj.assert_hold_time_field_default_value()
		vpn_obj.set_hold_time(self.config.config_vars.holdTime)
		vpn_obj.set_failover('true')
		vpn_obj.set_reconnect_user_on_failover('true')
		vpn_obj.assert_reconnect_time_on_failover_field_default_value()
		vpn_obj.set_reconnect_time_on_failover(self.config.config_vars.interval)
		vpn_obj.assert_reconnect_time_on_failover_field('false')
		vpn_obj.set_per_ap_tunnel('true')
		vpn_obj.save_settings()
		self.take_s2_snapshot()
		self.take_s2_snapshot()
		vpn_obj.set_backup_host('','false')
		vpn_obj.set_primary_host_field('','true')
		vpn_obj.restore_Ipsec_default()
		vpn_obj.buy_time()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_11194_configure_L2TPv3(self):
		self.take_s1_snapshot()
		config1 = self.config.config_vars
		vpn_obj = self.LeftPanel.go_to_vpn()
		vpn_obj.set_protocol(config1.vpn_L2TPv3_protocol)
		vpn_obj.create_tunnel()
		vpn_obj.setting_tunnel_values()
		vpn_obj.assert_tunnel()
		vpn_obj.create_new_session()
		vpn_obj.set_profile_name(config1.session_name)
		vpn_obj.set_tunnel_ip_address(config1.route_destination)
		vpn_obj.set_tunnel_netmask(config1.route_mask)
		vpn_obj.set_tunnel_vlan(config1.valid_session_vlan)
		vpn_obj.set_cookie_length(config1.eight_cookie_length)
		vpn_obj.set_cookie(config1.cookie_field_8)
		vpn_obj.save_session_click()
		self.take_s2_snapshot()
		vpn_obj.delete_session()
		vpn_obj.delete_created_tunnel()
		vpn_obj.save_settings()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_11413_l2tpv3_protocol_values(self):
		self.take_s1_snapshot()
		config1 = self.config.config_vars
		vpn_obj = self.LeftPanel.go_to_vpn()
		vpn_obj.set_protocol(config1.vpn_L2TPv3_protocol)
		vpn_obj.create_tunnel()
		vpn_obj.setting_tunnel_values()
		vpn_obj.assert_tunnel()
		vpn_obj.create_new_session()
		vpn_obj.set_profile_name(config1.session_name)
		vpn_obj.set_tunnel_ip_address(config1.route_destination)
		vpn_obj.set_tunnel_netmask(config1.route_mask)
		vpn_obj.set_tunnel_vlan(config1.valid_session_vlan)
		vpn_obj.set_cookie_length(config1.eight_cookie_length)
		vpn_obj.set_cookie(config1.cookie_field_8)
		vpn_obj.save_session_click()
		vpn_obj.select_tunnel()
		vpn_obj.set_backup_address(config1.backup_text)
		vpn_obj.set_message_digest_type(config1.msg_type)
		vpn_obj.save_tunnel_settings()
		vpn_obj.assert_failover_retry_count()
		vpn_obj.select_tunnel()
		vpn_obj.set_message_digest_type(config1.msg_type_md5)
		vpn_obj.select_session_profile()
		vpn_obj.set_cookie_length(config1.four_cookie_length)
		vpn_obj.set_cookie(config1.cookie_field_4)
		vpn_obj.set_session_remote_end_id(config1.secs_test_packets)
		vpn_obj.save_session_click()
		vpn_obj.select_session_profile()
		vpn_obj.set_cookie_length(config1.zero_cookie_length)
		vpn_obj.save_session_click()
		self.take_s2_snapshot()
		vpn_obj.delete_session()
		vpn_obj.delete_created_tunnel()
		vpn_obj.save_settings()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()						