import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class ActionSourceNat(ConfigurationTest):
	'''
	Test class for action allow of single rule.
	'''
	
	def test_ath_8459_source_nat_any_except_to_a_particular_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.assert_roaming_defaults(True, False)
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_action_source_nat_rule(conf.service_default_value, conf.dest_except_partclr_server)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.service_default_value, conf.dest_except_partclr_server)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8464_source_nat_dhcp_to_a_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.assert_roaming_defaults(True, False)
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_action_source_nat_rule(conf.service_dhcp_value, conf.dest_to_a_ntwrk)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.service_dhcp_value, conf.dest_to_a_ntwrk)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8466_source_nat_custom_other_to_a_domain_name(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.assert_roaming_defaults(True, False)
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_action_source_nat_rule(conf.service_custom, conf.dest_to_a_domain, conf.service_protocol)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.service_custom, conf.dest_to_a_domain)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8468_source_nat_ftp_to_a_particular_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.assert_roaming_defaults(True, False)
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_action_source_nat_rule(conf.action_ftp, conf.dest_particular_server)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.action_ftp, conf.dest_particular_server)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8471_source_nat_h323_udp_to_all_destinations(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.assert_roaming_defaults(True, False)
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_action_source_nat_rule(conf.action_h323_udp, conf.destination_default_value)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.action_h323_udp, conf.destination_default_value)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8469_source_nat_gre_except_to_a_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.assert_roaming_defaults(True, False)
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_action_source_nat_rule(conf.action_gre, conf.dest_except_partclr_server)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.action_gre, conf.dest_except_partclr_server)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8501_source_nat_custom_udp_except_to_a_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.assert_roaming_defaults(True, False)
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_action_source_nat_rule(conf.service_custom, conf.dest_except_ntwrk, conf.service_protocol_udp)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.service_custom, conf.dest_except_ntwrk)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8479_source_nat_l2tp_to_all_destinations(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.assert_roaming_defaults(True, False)
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_action_source_nat_rule(conf.action_l2tp, conf.destination_default_value)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.action_l2tp, conf.destination_default_value)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8484_source_nat_natt_to_a_particular_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.assert_roaming_defaults(True, False)
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_action_source_nat_rule(conf.action_natt, conf.destination_value)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.action_natt, conf.destination_value)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8488_source_nat_noe_oxo_except_to_a_server(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.assert_roaming_defaults(True, False)
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_action_source_nat_rule(conf.action_noe_oxo, conf.dest_except_partclr_server)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.action_noe_oxo, conf.dest_except_partclr_server)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8492_source_nat_papi_to_a_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.assert_roaming_defaults(True, False)
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_action_source_nat_rule(conf.action_papi, conf.dest_to_a_ntwrk)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.action_papi, conf.dest_to_a_ntwrk)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8496_source_nat_sccp_except_to_a_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.assert_roaming_defaults(True, False)
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_action_source_nat_rule(conf.action_sccp, conf.dest_except_ntwrk)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.action_sccp, conf.dest_except_ntwrk)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8499_source_nat_sip_udp_to_a_domain_name(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.assert_roaming_defaults(True, False)
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_action_source_nat_rule(conf.action_sip_udp, conf.dest_to_a_domain)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.action_sip_udp, conf.dest_to_a_domain)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
	
	def test_ath_8509_source_nat_tftp_except_to_a_network(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.assert_roaming_defaults(True, False)
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_action_source_nat_rule(conf.action_tftp, conf.dest_except_ntwrk)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.action_tftp, conf.dest_except_ntwrk)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8505_source_nat_ssh_to_a_domain_name(self):
		conf = self.config.config_vars
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		virtual_lan = basic_info.employee_network_info()
		security = virtual_lan.use_vlan_defaults()
		access = security.assert_roaming_defaults(True, False)
		access.click_network_access()
		access.delete_default_rule_if_present()
		access.create_action_source_nat_rule(conf.action_ssh, conf.dest_to_a_domain, None, True)
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created(conf.action_ssh, conf.dest_to_a_domain)
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()