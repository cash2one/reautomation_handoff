import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest
import time
class CaptivePortal(ConfigurationTest):
	'''
	Test class for action allow of Captive Portal.
	'''

	def test_ath_8622_create_internal_captive_portal(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()
		security.enable_mac_authentication()
		access_page = security.click_on_next()
		access_page.network_based.click()
		access_page.create_captive_portal()
		access_page.save1.click()
		access_page.finish_network_setup()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.access_accordion.click()
		edit_network.assert_captive_portal()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8623_create_external_captive_portal(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()		
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()
		security.enable_mac_authentication()
		access_page = security.click_on_next()
		access_page.network_based.click()
		access_page.create_captive_portal(external=True)
		access_page.save1.click()
		access_page.finish_network_setup()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.access_accordion.click()
		edit_network.assert_captive_portal()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8624_external_captive_portal_change_settings(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()				
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()
		security.enable_mac_authentication()
		access_page = security.click_on_next()
		access_page.network_based.click()
		access_page.create_captive_portal(external=True)       
		access_page.external_captive_portal_change_settings()
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.access_accordion.click()
		edit_network.assert_captive_portal()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()		
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8625_edit_splash_page_visuals_settings(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()	
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()
		security.enable_mac_authentication()
		access_page = security.click_on_next()
		access_page.network_based.click()
		access_page.create_captive_portal()
		access_page.splash_page_settings()
		access_page.finish_network_setup()       
		self.take_s2_snapshot()
		edit_network = self.NetworkPage.edit_network()
		edit_network.access_accordion.click()
		edit_network.assert_captive_portal()
		self.LeftPanel.go_to_network_page()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8626_change_external_splash_page_settings(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()	
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()
		security.enable_mac_authentication()
		access_page = security.click_on_next()
		access_page.network_based.click()
		access_page.create_captive_portal(external=True)
		access_page.create_new_external_captive_portal()
		time.sleep(10)
		access_page.save_settings.click()
		time.sleep(10)
		access_page.finish_network_setup()
		time.sleep(10)
		self.take_s2_snapshot()
		time.sleep(5)
		edit_network = self.NetworkPage.edit_network()
		edit_network.access_accordion.click()
		edit_network.assert_captive_portal()
		self.LeftPanel.go_to_network_page()
		time.sleep(5)
		security_page = self.LeftPanel.go_to_security()
		time.sleep(5)
		security_page.go_to_roles()
		security_page.external_captive_profile.click()
		security_page.delete_captive_portal()
		self.LeftPanel.go_to_network_page()		
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8952_modify_captive_portal_assignment_rule(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()	
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()
		security.enable_mac_authentication()
		access_page = security.click_on_next()
		access_page.network_based.click()
		access_page.create_captive_portal(external=True)
		access_page.save_settings.click()
		access_page.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.access_accordion.click()
		edit_network.modify_captive_portal_assignment_rule()
		self.NetworkPage.delete_network_if_present()		
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()
		access_page = security.enable_mac_authentication()
		access_page = security.click_on_next()		
		access_page.network_based.click()
		access_page.create_captive_portal(external=True)
		access_page.save_settings.click()
		access_page.finish_network_setup()
		edit_network = self.NetworkPage.edit_network()
		edit_network.access_accordion.click()
		edit_network.modify_captive_portal_assignment_rule(default=True)
		self.take_s2_snapshot()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()

	def test_ath_8963_delete_captive_rule(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()	
		basic_info = self.NetworkPage.create_new_network()
		vlan = basic_info.employee_network_info()
		security  = vlan.use_vlan_defaults()
		security.enable_mac_authentication()
		access_page = security.click_on_next()
		access_page.network_based.click()
		access_page.create_captive_portal(external=True)
		access_page.save_settings.click()
		access_page.finish_network_setup()
		self.take_s2_snapshot()	
		edit_network = self.NetworkPage.edit_network()
		edit_network.access_accordion.click()
		edit_network.delete_captive_rule()
		self.NetworkPage.delete_network_if_present()        
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()