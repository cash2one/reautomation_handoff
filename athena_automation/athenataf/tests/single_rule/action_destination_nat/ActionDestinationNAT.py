import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class ActionDestinationNAT(ConfigurationTest):
	'''
	Test class for Action Destination-NAT of single rule.
	'''
	def test_ath_8511_dst_nat_any_to_a_network(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.click_network_access()
		access.create_dst_nat_any_to_a_network()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('Any', 'To a network')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8518_dst_nat_custom_tcp_except_to_a_network(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.click_network_access()
		access.create_dst_nat_custom_tcp_except_to_a_network()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('CUSTOM', 'Except to a network')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8527_dst_nat_http_proxy_to_all_destinations(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.click_network_access()
		access.create_dst_nat_http_proxy_to_all_destinations()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('http', 'To all destinations')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8522_dst_nat_h323_tcp_to_a_paticular_sever(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.click_network_access()
		access.create_dst_nat_h323_tcp_to_a_paticular_sever()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('h323-tcp', 'To a particular server')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8529_dst_nat_ike_except_to_a_paticular_sever(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.click_network_access()
		access.create_dst_nat_ike_except_to_a_particular_server()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('ike', 'Except to a particular server')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8530_dst_nat_kerberos_to_a_domain_name(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.click_network_access()
		access.create_dst_nat_kerberos_to_a_domain_name()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('kerberos', 'To a Domain Name')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8532_dst_nat_lpd_tcp_to_all_destinations(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.click_network_access()
		access.create_dst_nat_lpd_tcp_to_all_destinations()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('lpd-tcp', 'To all destinations')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8537_dst_nat_netbios_dgm_to_a_particular_server(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.click_network_access()
		access.create_dst_nat_netbios_dgm_to_a_particular_server()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('netbios-dgm', 'To a particular server')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8538_dst_nat_netbios_ssn_except_to_a_particular_server(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.click_network_access()
		access.create_dst_nat_netbios_ssn_except_to_a_particular_server()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('netbios-ssn', 'Except to a particular server')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8545_dst_nat_pop3_to_a_network(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.click_network_access()
		access.create_dst_nat_pop3_to_a_network()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('pop3', 'To a network')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8549_dst_nat_sips_except_to_a_network(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.click_network_access()
		access.create_dst_nat_sips_except_to_a_network()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('sips', 'Except to a network')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8553_dst_nat_kerberos_to_a_domain_name(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.click_network_access()
		access.create_dst_nat_smb_udp_to_a_domain_name()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('smb-udp', 'To a Domain Name')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8560_dst_nat_telnet_to_a_particular_server(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.click_network_access()
		access.create_dst_nat_telnet_to_a_particular_server()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('telnet', 'To a particular server')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8556_dst_nat_snmp_trap_except_to_a_network(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.click_network_access()
		access.create_dst_nat_snmp_trap_except_to_a_network()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('snmp-trap', 'Except to a network')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
	def test_ath_8554_dst_nat_smtp_to_a_network(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.click_network_access()
		access.create_dst_nat_smtp_to_a_network()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('smtp', 'To a network')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()
		
		
	def test_ath_8828_dst_nat_custom_other_to_a_network(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.click_network_access()
		access.create_dst_nat_custom_other_to_a_network()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('CUSTOM', 'To a network')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()