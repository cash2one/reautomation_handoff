import logging
logger = logging.getLogger('athenataf')
from athenataf.lib.functionality.test.ConfigurationTest import ConfigurationTest

class NegativeTestScenarios(ConfigurationTest):
    '''
        Test class for Bandwidth Contract.
    '''

    def test_ath_9005_check_bw_contract(self):
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.guest_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.use_security_default()
        access.assert_bw_contract_option()
        self.take_s2_snapshot()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_8992_check_vlan_id(self):
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.guest_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.use_security_default()
        access.assert_vlan_assignment_option()
        self.take_s2_snapshot()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_8981_check_bw_contract(self):
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.guest_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.use_security_default()
        access.assert_bw_contract_range_error()
        self.take_s2_snapshot()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_8980_check_ip_validation(self):
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.guest_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.use_security_default()
        access.assert_ip_validation_error()
        self.take_s2_snapshot()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()
        
    def test_ath_8967_switching_options(self):
        self.NetworkPage.delete_network_if_present()
        self.take_s1_snapshot()
        basic_info = self.NetworkPage.create_new_network()
        virtual_lan = basic_info.guest_network_info()
        security = virtual_lan.use_vlan_defaults()
        access = security.use_security_default()
        access.create_different_rules()
        self.NetworkPage.assert_new_network()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.change_network_based_to_unrestricted()
        edit_network_page = self.NetworkPage.edit_network()
        edit_network_page.change_unrestricted_to_network_based()
        self.take_s2_snapshot()
        self.NetworkPage.delete_network_if_present()
        self.take_s3_snapshot()
        self.assert_s1_s2_diff(0)
        self.assert_s1_s3_diff()
        self.clear()   

	def test_ath_8966_wired_and_wireless_network_with_same_name_and_rules(self):
		self.NetworkPage.delete_network_if_present()
		self.take_s1_snapshot()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.employee_network_info()
		security = vlan_obj.use_vlan_defaults()
		access = security.assert_roaming_defaults(True,False)
		access.click_network_access()
		access.create_deny_adp_to_all_destinations()
		access.finish_network_setup()
		self.NetworkPage.assert_new_network()
		basic_info = self.NetworkPage.create_new_network()
		vlan_obj = basic_info.wired_employee_network_info_new()
		security = vlan_obj.wired_vlan_defaults()
		access = security.wired_security_defaults()
		access.click_network_access()
		network_assign = access.click_next()
		network_assign.finish_network_setup()
		self.NetworkPage.delete_wired_network_new()
		edit_network_page = self.NetworkPage.edit_network()
		edit_network_page.assert_new_rule_created('adp', 'To all destinations')
		self.take_s2_snapshot()
		edit_network_page.delete_access_rule()
		self.NetworkPage.delete_network_if_present()
		self.take_s3_snapshot()
		self.assert_s1_s2_diff(0)
		self.assert_s1_s3_diff()
		self.clear()